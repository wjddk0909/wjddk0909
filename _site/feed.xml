<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-07-09T20:51:57+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">FE Developer Note </title><subtitle>An amazing website.</subtitle><author><name>FE Developer</name></author><entry><title type="html">[TypeScript-part1] 강의 오리엔테이션</title><link href="http://localhost:4000/typescript-part1/typescript-part1-beginners1/" rel="alternate" type="text/html" title="[TypeScript-part1] 강의 오리엔테이션" /><published>2022-07-09T00:00:00+09:00</published><updated>2022-07-09T00:00:00+09:00</updated><id>http://localhost:4000/typescript-part1/typescript-part1-beginners1</id><content type="html" xml:base="http://localhost:4000/typescript-part1/typescript-part1-beginners1/"><![CDATA[<h2 id="타입스크립트-오리엔테이션">타입스크립트 오리엔테이션</h2>

<p>자바스크립트로 제작된 COVID-19 세계 현황판을 타입스크립트로 변환해보면서 타입스크립트의 개념과 기초를 배워보는 강좌</p>

<ul>
  <li>구현되어 있는 자바스크립트를 타입스크립트로 변환하기 위해 필요한 개념들을 설명하고 실습</li>
  <li>그 후에 실제 프로젝트에 적용해보는 순서로 진행</li>
</ul>

<p>강의 대상</p>
<ul>
  <li>자바스크립트 문법을 알고 있는 웹 개발자</li>
  <li>자바스크립트로 좀 더 단단한 웹 애플리케이션을 만들고 싶은 웹 개발자(버그가 좀 더 없었으면 좋겠다)</li>
  <li>타입스크립트로 되어 있는 프로젝트에서 퍼블리싱을 해야 하는 퍼블리셔</li>
</ul>]]></content><author><name>FE Developer</name></author><category term="typescript-part1" /><category term="typescript" /><summary type="html"><![CDATA[typescript에 대해서]]></summary></entry><entry><title type="html">[TypeScript] #3 인터페이스</title><link href="http://localhost:4000/typescript/typescript3/" rel="alternate" type="text/html" title="[TypeScript] #3 인터페이스" /><published>2022-06-09T00:00:00+09:00</published><updated>2022-06-09T00:00:00+09:00</updated><id>http://localhost:4000/typescript/typescript3</id><content type="html" xml:base="http://localhost:4000/typescript/typescript3/"><![CDATA[<h2 id="오브젝트-인터페이스">오브젝트 인터페이스</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">user</span><span class="p">:</span><span class="nx">object</span><span class="p">;</span>

<span class="nx">user</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">abc</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">age</span><span class="p">:</span> <span class="mi">20</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>타입스크립트에서 객체를 만들고 오브젝트 타입으로 정의한 후 콘솔로 찍어보면 에러가 발생한다.<br />
오브젝트에는 특정 속성 값에 대한 정보가 없기 때문이다. <code class="language-plaintext highlighter-rouge">name</code>에 커서를 올려보면 오브젝트에는 name이 없다고 뜬다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="kr">interface</span> <span class="nx">User</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">age</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">user</span><span class="p">:</span> <span class="nx">User</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">abc</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">age</span><span class="p">:</span> <span class="mi">20</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">age</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>이제 <code class="language-plaintext highlighter-rouge">console.log(user.)</code>까지만 찍어도 어떤 프로퍼티들이 있는지 힌트가 뜬다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="nx">type</span> <span class="nx">Score</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">A</span><span class="dl">'</span> <span class="o">|</span> <span class="dl">'</span><span class="s1">B</span><span class="dl">'</span> <span class="o">|</span> <span class="dl">'</span><span class="s1">C</span><span class="dl">'</span> <span class="o">|</span> <span class="dl">'</span><span class="s1">F</span><span class="dl">'</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">User</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">age</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
    <span class="nx">gender</span><span class="p">?:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nx">readonly</span> <span class="nx">birthYear</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
    <span class="p">[</span><span class="nx">grade</span><span class="p">:</span> <span class="nx">number</span><span class="p">]:</span> <span class="nx">Score</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">user</span><span class="p">:</span> <span class="nx">User</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">abc</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">age</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
    <span class="na">birthYear</span><span class="p">:</span> <span class="mi">2000</span><span class="p">,</span>
    <span class="mi">1</span><span class="p">:</span> <span class="dl">'</span><span class="s1">A</span><span class="dl">'</span><span class="p">,</span>
    <span class="mi">2</span><span class="p">:</span> <span class="dl">'</span><span class="s1">B</span><span class="dl">'</span>
<span class="p">}</span>

<span class="nx">user</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="nx">user</span><span class="p">.</span><span class="nx">gender</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">male</span><span class="dl">"</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">age</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>여기에서 <code class="language-plaintext highlighter-rouge">user.age = 10;</code>으로 변경은 문제가 없지만 <code class="language-plaintext highlighter-rouge">user.gender = "male"</code>은 에러가 발생한다.<br />
interface안에 있어도 되고 없어도 되는 옵셔널 속성으로 넣어주고 추가하면 된다.<br />
readonly속성은 생성할때만 할당이 가능하고 이후에는 수정이 불가하다.</p>

<p>여러가지 추가해야될 속성이 생길때, 예들들어 학년별로 성적을 추가해야한다고 할때<br />
옵셔널 말고 다른방법으로는 <code class="language-plaintext highlighter-rouge">[grade: number]</code> -&gt; 문자열 인덱스 서명을 추가하는 방법</p>

<h2 id="인터페이스에-함수">인터페이스에 함수</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="kr">interface</span> <span class="nx">Add</span> <span class="p">{</span>
    <span class="p">(</span><span class="nx">num1</span><span class="p">:</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">num2</span><span class="p">:</span> <span class="nx">number</span><span class="p">):</span> <span class="nx">number</span><span class="p">;</span> <span class="c1">// : number 는 리턴값이 number라는 뜻</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">add</span><span class="p">:</span> <span class="nx">Add</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">){</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">add</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>

<span class="kr">interface</span> <span class="nx">isAdult</span> <span class="p">{</span>
    <span class="p">(</span><span class="nx">age</span><span class="p">:</span><span class="nx">number</span><span class="p">):</span> <span class="nx">boolean</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">a</span><span class="p">:</span> <span class="nx">isAdult</span> <span class="o">=</span> <span class="p">(</span><span class="nx">age</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">age</span> <span class="o">&gt;</span> <span class="mi">19</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">a</span><span class="p">(</span><span class="mi">33</span><span class="p">)</span> <span class="c1">// true</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="인터페이스-확장extends">인터페이스 확장(extends)</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="kr">interface</span> <span class="nx">Car</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">wheels</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
    <span class="nx">start</span><span class="p">():</span> <span class="k">void</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">Toy</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">ToyCar</span> <span class="kd">extends</span> <span class="nx">Car</span><span class="p">,</span> <span class="nx">Toy</span> <span class="p">{</span>
    <span class="nl">price</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>]]></content><author><name>FE Developer</name></author><category term="typescript" /><category term="typescript" /><category term="interface" /><summary type="html"><![CDATA[타입스크립트]]></summary></entry><entry><title type="html">[TypeScript] #2 기본타입</title><link href="http://localhost:4000/typescript/typescript2/" rel="alternate" type="text/html" title="[TypeScript] #2 기본타입" /><published>2022-06-09T00:00:00+09:00</published><updated>2022-06-09T00:00:00+09:00</updated><id>http://localhost:4000/typescript/typescript2</id><content type="html" xml:base="http://localhost:4000/typescript/typescript2/"><![CDATA[<h2 id="기본타입">기본타입</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">age</span><span class="p">:</span><span class="nx">number</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">isAdult</span><span class="p">:</span><span class="nx">boolean</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">a</span><span class="p">:</span><span class="nx">number</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">];</span>
<span class="kd">let</span> <span class="nx">a2</span><span class="p">:</span><span class="nb">Array</span><span class="o">&lt;</span><span class="nx">number</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">];</span>

<span class="kd">let</span> <span class="nx">week1</span><span class="p">:</span><span class="nx">string</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">mon</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">tue</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">wed</span><span class="dl">'</span><span class="p">];</span>
<span class="kd">let</span> <span class="nx">week2</span><span class="p">:</span><span class="nb">Array</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">mon</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">tue</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">wed</span><span class="dl">'</span><span class="p">];</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="tuple-튜플">tuple 튜플</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">b</span><span class="p">:[</span><span class="nx">string</span><span class="p">,</span> <span class="nx">number</span><span class="p">];</span>

<span class="nx">b</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">z</span><span class="dl">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">];</span>
<span class="c1">// b = [1, 'z']; // 에러</span>

<span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">toLowerCase</span><span class="p">();</span>
<span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">toLowerCase</span><span class="p">();</span> <span class="c1">// number에는 없는 메소드라고 에러 발생</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="void-never">void, never</h2>

<p>void : 함수에서 아무것도 반환하지 않을떄 사용</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">sayHello</span><span class="p">():</span><span class="k">void</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>never : 항상 에러를 반환하거나, 영원히 끝나지 않는 함수의 타입으로 사용</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">showError</span><span class="p">():</span><span class="nx">never</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">infLoop</span><span class="p">():</span><span class="nx">never</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// do something</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="enum">enum</h2>

<p>enum : 비슷한 값들끼리 묶였다</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="kr">enum</span> <span class="nx">Os</span> <span class="p">{</span>
    <span class="nx">Window</span><span class="p">,</span>
    <span class="nx">Ios</span><span class="p">,</span>
    <span class="nx">Android</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>typescript에서 enum을 사용하지 않는게 좋은 이유<br />
<a href="https://engineering.linecorp.com/ko/blog/typescript-enum-tree-shaking/">참고 링크</a></p>]]></content><author><name>FE Developer</name></author><category term="typescript" /><category term="typescript" /><summary type="html"><![CDATA[타입스크립트]]></summary></entry><entry><title type="html">[TypeScript] #1 타입스크립트를 쓰는 이유</title><link href="http://localhost:4000/typescript/typescript1/" rel="alternate" type="text/html" title="[TypeScript] #1 타입스크립트를 쓰는 이유" /><published>2022-06-09T00:00:00+09:00</published><updated>2022-06-09T00:00:00+09:00</updated><id>http://localhost:4000/typescript/typescript1</id><content type="html" xml:base="http://localhost:4000/typescript/typescript1/"><![CDATA[<h2 id="타입스크립트-사용하기">타입스크립트 사용하기</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">num1</span><span class="p">,</span> <span class="nx">num2</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">num1</span> <span class="o">+</span> <span class="nx">num2</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">add</span><span class="p">();</span> <span class="c1">// NaN</span>
<span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// NaN</span>
<span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span> <span class="c1">// 3</span>
<span class="nx">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span> <span class="c1">// 7 -&gt; 12를 예상했을때 어디서 문제가 발생했는지 찾아봐야함</span>
<span class="nx">add</span><span class="p">(</span><span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">world</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// "helloworld"</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>add(1,2)를 제외하고는 원하는 값을 얻을 수 없지만 자바스크립트는 실행하기 전어떠한 경고도 주지 않는다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">showItems</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">arr</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>

<span class="nx">showItem</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]);</span> <span class="c1">// 1  2  3</span>
<span class="nx">showItem</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span> <span class="c1">// 에러</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>자바스크립트 (동적언어) : 런타임에 타입결정 -&gt; 오류 발견(사용자가 오류를 보게 됨)</li>
  <li>자바, 타입스크립트 (정적언어) : 컴파일 타임에 타입 결정 -&gt; 오류 발견</li>
</ul>

<h2 id="typescript-playground">typescript playground</h2>

<p><a href="https://www.typescriptlang.org/play">TypeScript</a></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">num1</span><span class="p">:</span><span class="nx">number</span><span class="p">,</span> <span class="nx">num2</span><span class="p">:</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">num1</span> <span class="o">+</span> <span class="nx">num2</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// add(); // NaN</span>
<span class="c1">// add(1); // NaN</span>
<span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span> <span class="c1">// 3</span>
<span class="c1">// add(3,4,5); // 7 </span>
<span class="c1">// add('hello', 'world'); // "helloworld"</span>

<span class="kd">function</span> <span class="nx">showItems</span><span class="p">(</span><span class="nx">arr</span><span class="p">:</span><span class="nx">number</span><span class="p">[])</span> <span class="p">{</span>
    <span class="nx">arr</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>

<span class="nx">showItem</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]);</span> <span class="c1">// 1  2  3</span>
<span class="c1">//showItem(1,2,3); // 에러</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>typescript playground에서 위 예제 코드를 넣어보면 자바스크립트는 오류를 표현하지 않던 부분이 오류를 표현한다.<br />
add에 인자가 2개가 들어와야하는데 갯수가 맞지 않다고 뜨고, num1과 num2에 타입을 정의해주면 ‘hello’,’world’는 타입에러가 뜬다.</p>

<p>arr:number[]가 아닌 arr:string[]을 적는다면 <code class="language-plaintext highlighter-rouge">showItem([1,2,3]);</code>에 에러가 잡히게 된다.<br />
또한, arr:number로 배열을 넣지 않으면 <code class="language-plaintext highlighter-rouge">arr.forEach((item)</code>이쪽에 에러가 잡힌다.</p>

<p>또한 add()만 작성해줘도 어떤 인자 타입이 몇개가 필요한지 힌트가 나오기 때문에 내가 짠 코드가 아니더라도 코드를 뒤져보지 않고도 쉽게 코드 작성이 가능하다.</p>]]></content><author><name>FE Developer</name></author><category term="typescript" /><category term="typescript" /><summary type="html"><![CDATA[타입스크립트]]></summary></entry><entry><title type="html">[TypeScript] interface 사용</title><link href="http://localhost:4000/typescript/interface/" rel="alternate" type="text/html" title="[TypeScript] interface 사용" /><published>2022-06-09T00:00:00+09:00</published><updated>2022-06-09T00:00:00+09:00</updated><id>http://localhost:4000/typescript/interface</id><content type="html" xml:base="http://localhost:4000/typescript/interface/"><![CDATA[<h2 id="typescript-interface-사용하기">TypeScript interface 사용하기</h2>

<p>TypeScript에서 Object 타입을 선언할 때 interface와 type을 사용<br />
TypeScript는 객체를 선언하고 그냥 접근할 수 없다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">user</span><span class="p">:</span><span class="nx">object</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ellin</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">age</span><span class="p">:</span> <span class="mi">20</span>
<span class="p">}</span> <span class="c1">// 객체 선언</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="c1">// Error</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>이때 interface를 선언해서 접근해야 한다.</p>

<h3 id="사용법">사용법</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * interface 인터페이스 이름 {
 * key: type;
 * key: type;
 * }
 * **/</span>
<span class="kr">interface</span> <span class="nx">User</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="nl">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="nx">user</span><span class="p">:</span> <span class="nx">User</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ellin</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">age</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="c1">// ellin</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="c1">// store notice.ts</span>
<span class="kd">const</span> <span class="nx">state</span><span class="p">:</span> <span class="nx">NoticeStateType</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">...</span>
    <span class="na">selected_fn_000039</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
    <span class="p">...</span>
<span class="p">}</span>

<span class="c1">// store noticeType.ts</span>
<span class="k">export</span> <span class="kr">interface</span> <span class="nx">NoticeStateType</span> <span class="p">{</span>
    <span class="p">...</span>
    <span class="nx">selected_fn_000039</span><span class="p">:</span> <span class="kr">string</span> <span class="o">|</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">...</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="optional-readonly-index-사용법">optional, readonly, index 사용법</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="rouge-code"><pre><span class="kr">enum</span> <span class="nx">Gender</span> <span class="p">{</span>
    <span class="nx">Man</span><span class="p">,</span>
    <span class="nx">Woman</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">User</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="nl">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
    <span class="nl">gender</span><span class="p">?:</span> <span class="nx">Gender</span><span class="p">;</span> <span class="c1">// 있어도 되고 없어도 되는 옵셔널-물음표</span>
    <span class="k">readonly</span> <span class="nx">birth</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span> <span class="c1">//읽기 전용</span>
    <span class="p">[</span><span class="nx">key</span><span class="p">:</span><span class="kr">number</span><span class="p">]:</span> <span class="kr">string</span><span class="p">;</span> <span class="c1">// 여러 속성 정보를 받을 때 사용 (key:number, value:string)</span>
<span class="p">}</span>

<span class="c1">//gender 포함</span>
<span class="kd">const</span> <span class="nx">user1</span><span class="p">:</span><span class="nx">User</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ellin1</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">age</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
    <span class="na">gender</span><span class="p">:</span> <span class="nx">Gender</span><span class="p">.</span><span class="nx">Man</span><span class="p">,</span>
    <span class="na">birth</span><span class="p">:</span><span class="mi">20020101</span><span class="p">,</span>
<span class="p">}</span>

<span class="c1">//gedner 제외</span>
<span class="kd">const</span> <span class="nx">user2</span><span class="p">:</span><span class="nx">User</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ellin2</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">age</span><span class="p">:</span> <span class="mi">21</span><span class="p">,</span>
    <span class="na">birth</span><span class="p">:</span><span class="mi">20020101</span>
<span class="p">}</span>

<span class="c1">//index 사용</span>
<span class="kd">const</span> <span class="nx">user3</span><span class="p">:</span><span class="nx">UserInfo</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ellin3</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">age</span><span class="p">:</span> <span class="mi">22</span><span class="p">,</span>
    <span class="na">birth</span><span class="p">:</span><span class="mi">19891225</span><span class="p">,</span>
    <span class="mi">1</span><span class="p">:</span> <span class="dl">"</span><span class="s2">1반</span><span class="dl">"</span><span class="p">,</span>
    <span class="mi">2</span><span class="p">:</span> <span class="dl">"</span><span class="s2">2번</span><span class="dl">"</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>gender 속성은 optional(?) 형태라서 사용하지 않으면 선언을 피할 수 있다.</li>
  <li>birth 속성은 읽기 전용으로 선언했기 때문에 값을 수정하려고 하면 Compile Error 발생</li>
  <li><code class="language-plaintext highlighter-rouge">[key:number]</code> 속성은 index방식으로 여러개를 한 번에 사용할 수 있고, 사용하지 않으면 선언을 피할 수 있다.</li>
</ul>]]></content><author><name>FE Developer</name></author><category term="typescript" /><category term="interface" /><summary type="html"><![CDATA[interface]]></summary></entry><entry><title type="html">[TypeScript] #4 함수 타입정의</title><link href="http://localhost:4000/typescript/typescript4/" rel="alternate" type="text/html" title="[TypeScript] #4 함수 타입정의" /><published>2022-06-09T00:00:00+09:00</published><updated>2022-06-09T00:00:00+09:00</updated><id>http://localhost:4000/typescript/typescript4</id><content type="html" xml:base="http://localhost:4000/typescript/typescript4/"><![CDATA[<h2 id="함수를-정의하는-방법">함수를 정의하는 방법</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">num1</span><span class="p">:</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">num2</span><span class="p">:</span> <span class="nx">number</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">num1</span> <span class="o">+</span> <span class="nx">num2</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">isAdult</span><span class="p">(</span><span class="nx">age</span><span class="p">:</span> <span class="nx">number</span><span class="p">):</span> <span class="nx">boolean</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">age</span> <span class="o">&gt;</span> <span class="mi">19</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">hello</span><span class="p">(</span><span class="nx">name</span><span class="p">?:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s2">`Hellom </span><span class="p">${</span><span class="nx">name</span> <span class="o">||</span> <span class="dl">"</span><span class="s2">world</span><span class="dl">"</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">hello</span><span class="p">();</span> <span class="c1">// name?: 옵셔널이 아니면 name을 전달해 주지 않으면 에러가 난다.</span>

<span class="c1">// 자바스크립트에서 디폴트값 주기</span>
<span class="kd">function</span> <span class="nx">hello2</span><span class="p">(</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">world</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s2">`Hello, </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">hello</span><span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">age</span><span class="p">?:</span> <span class="nx">number</span><span class="p">):</span> <span class="nx">string</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">age</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s2">`Hello, </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">. You are </span><span class="p">${</span><span class="nx">age</span><span class="p">}</span><span class="s2">.`</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s2">`Hello, </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">hello</span><span class="p">(</span><span class="dl">"</span><span class="s2">Sam</span><span class="dl">"</span><span class="p">));</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">hello</span><span class="p">(</span><span class="dl">"</span><span class="s2">Sam</span><span class="dl">"</span><span class="p">,</span> <span class="mi">30</span><span class="p">));</span>
</pre></td></tr></tbody></table></code></pre></div></div>]]></content><author><name>FE Developer</name></author><category term="typescript" /><category term="typescript" /><summary type="html"><![CDATA[타입스크립트]]></summary></entry><entry><title type="html">웹팩 시작하기</title><link href="http://localhost:4000/webpack/module-bundler-webpack3/" rel="alternate" type="text/html" title="웹팩 시작하기" /><published>2022-06-07T00:00:00+09:00</published><updated>2022-06-07T00:00:00+09:00</updated><id>http://localhost:4000/webpack/module-bundler-webpack3</id><content type="html" xml:base="http://localhost:4000/webpack/module-bundler-webpack3/"><![CDATA[<h2 id="31-웹팩-소개">3.1 웹팩 소개</h2>

<p>웹팩이란 최신 프론트엔드 프레임워크에서 가장 많이 사용되는 모듈 번들러 이다. 모듈 번들러란 웹 애플리케이션을 구성하는 자원(HTML, CSS, Jacascript, images등)을 모두 각각의 모듈로 보고 이를 조합해서 병합된 하나의 결과물을 만드는 도구를 의미한다.</p>

<h3 id="모듈이란">모듈이란?</h3>
<p>모듈이란 프로그래밍 관점에서 특정 기능을 갖는 작은 코드단위를 말한다.</p>

<h3 id="모듈-번들링이란">모듈 번들링이란?</h3>
<p>웹 애플리케이션을 구성하는 몇십, 몇백개의 자원들을 하나의 파일로 병합 및 압축 해주는 동작</p>

<h2 id="32-웹팩-시작하기-튜토리얼-파트-1---웹팩-적용-전">3.2 웹팩 시작하기 튜토리얼 파트 1 - 웹팩 적용 전</h2>

<p><a href="https://joshua1988.github.io/webpack-guide/getting-started.html#%EC%9B%B9%ED%8C%A9-%EB%A7%9B%EB%B3%B4%EA%B8%B0-%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC">참고 페이지</a></p>

<p><code class="language-plaintext highlighter-rouge">npm init -y</code><br />
npm을 이용해서 프로젝트를 관리하기 위한 초기화 설정</p>

<p><code class="language-plaintext highlighter-rouge">npm i webpack webpack-cli -D</code><br />
devDependencies에 webpack과 webpack-cli설치</p>

<p><code class="language-plaintext highlighter-rouge">npm install lodash</code><br />
lodash : 자바스크립트 유틸리티 라이브러리</p>

<h2 id="33-웹팩-시작하기-튜토리얼-파트-2---웹팩-적용-후">3.3 웹팩 시작하기 튜토리얼 파트 2 - 웹팩 적용 후</h2>

<ol>
  <li>
    <p>index.js<br />
<code class="language-plaintext highlighter-rouge">import _ from "lodash";</code> 추가</p>
  </li>
  <li>
    <p>index.html<br />
cdn으로 들고오던 lodash스크립트는 주석처리하고 body안의 스크립트는 <code class="language-plaintext highlighter-rouge">&lt;script src="./dist/main.js"&gt;&lt;/script&gt;</code>로 변경</p>
  </li>
  <li>
    <p>package.json<br />
웹팩 빌드 명령어를 실행하기 위해 <code class="language-plaintext highlighter-rouge">package.json</code> 파일에 내용 추가</p>
    <blockquote>
      <p>“scripts”: {<br />
 “build”: “webpack –mode=none”<br />
}</p>
    </blockquote>
  </li>
</ol>]]></content><author><name>FE Developer</name></author><category term="webpack" /><category term="webpack" /><summary type="html"><![CDATA[Modul Bundler Webpack]]></summary></entry><entry><title type="html">Node.js와 NPM</title><link href="http://localhost:4000/webpack/module-bundler-webpack1/" rel="alternate" type="text/html" title="Node.js와 NPM" /><published>2022-06-07T00:00:00+09:00</published><updated>2022-06-07T00:00:00+09:00</updated><id>http://localhost:4000/webpack/module-bundler-webpack1</id><content type="html" xml:base="http://localhost:4000/webpack/module-bundler-webpack1/"><![CDATA[<h2 id="개발-환경-구성">개발 환경 구성</h2>

<ul>
  <li>Chrome</li>
  <li>Git</li>
  <li>Visual Studio Code</li>
  <li>Node.js(v12.x 이상)</li>
</ul>

<p>단축키<br />
명령어 입력 : command + shift + p</p>

<p><a href="https://joshua1988.github.io/webpack-guide/">수업교안사이트</a></p>

<h2 id="11-npm-초기화-명령어---init">1.1 npm 초기화 명령어 - init</h2>

<ul>
  <li>npm init 으로 package.json을 생성</li>
  <li>또는 npm init -y 로 자동 생성</li>
</ul>

<h2 id="12-npm-설치-명령어---install">1.2 npm 설치 명령어 - install</h2>

<ul>
  <li>npm install jquery 로 설치하면 node_modules폴더 생성되고 그 안에 라이브러리가 설치됨</li>
  <li>packge.json에도 jquery의 버전도 명시 되어 있음</li>
</ul>

<h2 id="npm을-사용하는-이유와-장점">npm을 사용하는 이유와 장점</h2>

<ul>
  <li>라이브러리간에 의존성이 있는 경우에 라이브러리 관리가 필요하다.</li>
  <li>npm을 사용하면 라이브러리의 목록과 각각의 버전까지 확인 가능</li>
  <li>cdn을 쓰는 경우를 생각하면 브라우저에서 검색해서 하나씩 들고 와야하지만 npm은 <code class="language-plaintext highlighter-rouge">npm install jquery-ui</code> 같이 명령어로 설치가 가능하다.</li>
</ul>]]></content><author><name>FE Developer</name></author><category term="webpack" /><category term="node.js" /><category term="npm" /><summary type="html"><![CDATA[Modul Bundler Webpack]]></summary></entry><entry><title type="html">NPM(Node Package Manager)</title><link href="http://localhost:4000/webpack/module-bundler-webpack2/" rel="alternate" type="text/html" title="NPM(Node Package Manager)" /><published>2022-06-07T00:00:00+09:00</published><updated>2022-06-07T00:00:00+09:00</updated><id>http://localhost:4000/webpack/module-bundler-webpack2</id><content type="html" xml:base="http://localhost:4000/webpack/module-bundler-webpack2/"><![CDATA[<h2 id="21-npm-지역-설치-명령어와-제거-명령어---uninstall">2.1 NPM 지역 설치 명령어와 제거 명령어 - uninstall</h2>

<p>npm 지역 설치</p>

<p>npm install gulp로 설치하면 package.json에 gulp가 설치되어있는것을 확인할 수 있다.<br />
삭제는 npm uninstall gulp로 삭제하면 된다.</p>

<h2 id="22-npm-전역-설치-명령어---install-global">2.2 NPM 전역 설치 명령어 - install –global</h2>

<p><code class="language-plaintext highlighter-rouge">npm install gulp --global</code>로 설치하면 node_modules 폴더 안에 설치되지 않고 시스템내에 설치되어 <code class="language-plaintext highlighter-rouge">gulp</code> 명령어 인식 가능</p>

<h2 id="23-전역으로-설치된-라이브러리-경로-확인">2.3 전역으로 설치된 라이브러리 경로 확인</h2>

<p><a href="https://joshua1988.github.io/webpack-guide/build/npm-module-install.html#npm-%EC%A0%84%EC%97%AD-%EC%84%A4%EC%B9%98-%EA%B2%BD%EB%A1%9C">npm 전역 라이브러리 설치 경로</a></p>

<h3 id="npm-전역-설치-경로">npm 전역 설치 경로</h3>
<blockquote>
  <p>window<br />
%USERPROFILE%\AppData\Roaming\npm\node_modules</p>
</blockquote>

<blockquote>
  <p>mac<br />
/usr/local/lib/node_modules</p>
</blockquote>

<h2 id="24-지역-설치와-전역global-설치-비교-정리">2.4 지역 설치와 전역(–global) 설치 비교 정리</h2>

<p>npm 지역 설치<br />
<code class="language-plaintext highlighter-rouge">package.json</code>파일을 생성하고 해당 프로젝트에서 사용할 자바스크립트 라이브러리를 설치</p>

<p>npm 전역설치<br />
npm 전역설치는 위와 같이 프로젝트에서 사용할 라이브러리를 불러올 때 사용하는 것이 아니라 시스템 레벨에서 사용할 자바스크립트 라이브러리를 설치할 때 사용</p>

<h2 id="25-지역-설치-명령어-옵션---save-dev-d">2.5 지역 설치 명령어 옵션 - –save-dev(-D)</h2>

<p>npm 지역 설치 옵션 두가지</p>
<ul>
  <li>npm install vue –save-prod</li>
  <li>npm install vue –save-dev</li>
</ul>

<p>위 명령어를 축약하면</p>
<ul>
  <li>npm i vue</li>
  <li>npm i vue -D</li>
</ul>

<h2 id="26-dependencies와-devdependencies의-차이점">2.6 dependencies와 devDependencies의 차이점</h2>

<p>dependencies</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">npm i</code>로 설치</li>
  <li>애플리케이션의 로직과 직접적인 연관이 있는 라이브러리</li>
</ul>

<p>devDependencies</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">npm i vue -D</code>로 설치</li>
  <li>webpack, js-compression, sass등등 개발을 할때 도움을 주는 개발용 보조 라이브러리</li>
</ul>

<h2 id="27-개발용-라이브러리와-배포용-라이브러리-구분하기">2.7 개발용 라이브러리와 배포용 라이브러리 구분하기</h2>

<p>개발용 라이브러리</p>
<ul>
  <li>devDependencies</li>
</ul>

<p>배포용 라이브러리</p>
<ul>
  <li>dependencies</li>
</ul>

<p>npm 지역 설치를 할 떄는 해당 라이브러리가 배포용인지 개발용인지 구분해줘야 한다. 예를들어 <code class="language-plaintext highlighter-rouge">jquery</code>와 같이 화면 로직과ㅓ 직접적으로 관련된 라이브러리는 배포용으로 설치해야 한다.<br />
<code class="language-plaintext highlighter-rouge">npm i jquery</code><br />
이렇게 설치된 배포용 라이브러리는 <code class="language-plaintext highlighter-rouge">npm run build</code>로 빌드를 하면 최종 애플리케이션 코드 안에 포함된다.<br />
그런데 만약 설치 옵션에 <code class="language-plaintext highlighter-rouge">-D</code>를 줬다면 해당 라이브러리는 빌드하고 배포할 때 애플리케이션 코드에서 빠지게 되기 때문에 최종 애플리케이션에 포함되어야 하는 라이브러리는 <code class="language-plaintext highlighter-rouge">-D</code>로 설치하면 안된다.</p>

<p>배포할 때 빠져도 좋은 라이브러리의 예시</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">webpack</code> : 빌드도구</li>
  <li><code class="language-plaintext highlighter-rouge">eslint</code> : 코드 문법 검사 도구</li>
  <li><code class="language-plaintext highlighter-rouge">imagemin</code> : 이미지 압축 도구</li>
</ul>]]></content><author><name>FE Developer</name></author><category term="webpack" /><category term="node.js" /><category term="npm" /><summary type="html"><![CDATA[Modul Bundler Webpack]]></summary></entry><entry><title type="html">Function 오브젝트</title><link href="http://localhost:4000/js-advanced/js-advanced1/" rel="alternate" type="text/html" title="Function 오브젝트" /><published>2022-06-06T00:00:00+09:00</published><updated>2022-06-06T00:00:00+09:00</updated><id>http://localhost:4000/js-advanced/js-advanced1</id><content type="html" xml:base="http://localhost:4000/js-advanced/js-advanced1/"><![CDATA[<h2 id="11-function-형태-function-오브젝트-생성-오브젝트-저장-생각의-전환">1.1 function 형태, function 오브젝트 생성, 오브젝트 저장, 생각의 전환</h2>

<p>function 형태</p>
<ul>
  <li>빌트인 Function 오브젝트 Function.prototype.call()</li>
  <li>function 오브젝트
    <ul>
      <li>function book(){…}</li>
      <li>var book = function() {…}</li>
      <li>인스턴스이지만, new 연산자로 생성한 인스턴스와 구분하기 위해 function 오브젝트로 표기</li>
    </ul>
  </li>
  <li>function 인스턴스
    <ul>
      <li>new Book()처럼 new연산자를 사용하여 Book.prototype에 연결된 메소드로 생성</li>
    </ul>
  </li>
</ul>

<p>function 오브젝트 생성</p>
<ul>
  <li>var book = function() {…};</li>
  <li>엔진이 function 키워드를 만나면 빌트인 Function 오브젝트의 prototype에 연결된 메소드로 function 오브젝트 생성</li>
  <li>생성한 오브젝트를 book 변수에 할당</li>
  <li>book() 형태로 호출
    <ul>
      <li>function 오브젝트이므로 호출 가능</li>
    </ul>
  </li>
</ul>

<p>오브젝트 저장</p>
<ul>
  <li>함수를 호출하려면 생성한 function 오브젝트를 저장해야한다.</li>
  <li>function 오브젝트 저장형태
    <ul>
      <li>{name: value} 형태로 저장</li>
      <li>{book: 생성한 function 오브젝트} 형태</li>
    </ul>
  </li>
  <li>함수를 호출하려면
    <ol>
      <li>저장된 오브젝트에서 함수 이름(book)으로 검색</li>
      <li>value 값을 구하고</li>
      <li>value가 function 오브젝트면 호출</li>
    </ol>
  </li>
</ul>

<p>함수가 호출되면 엔진은 함수의 변수와 함수를 {name: value} 형태로 실행 환경을 설정하고 함수 코드를 실행한다.<br />
{name: value} 형태로 생각을 전환해야 JS의 아키텍처와 메커니즘을 쉽게 이해할 수 있다.<br />
function(){…} 코드를 보면 함수의 변수와 함수가 {name: value} 형태로 연상되어야 한다.</p>

<h2 id="12-function-오브젝트-생성-과정-function-오브젝트-구조">1.2 function 오브젝트 생성 과정, function 오브젝트 구조</h2>

<p>function 오브젝트 생성 과정</p>

<ol>
  <li>function sports(){…} 형태에서 function 키워드를 만나면</li>
  <li>오브젝트를 생성하고 저장
    <ul>
      <li>{sports: {…}}</li>
      <li>sports는 function 오브젝트 이름</li>
      <li>오브젝트 {…}에 프로퍼티가 없는 상태 -&gt; 이제부터 빈 오브젝트에 프로퍼티를 채운다.</li>
    </ul>
  </li>
</ol>

<p>ㄴsports 오브젝트 형태</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="kd">var</span> <span class="nx">sports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){};</span>
<span class="cm">/*
1. 생성한 오브젝트가 sports에 할당된다. -&gt; 오브젝트를 생성하는 시점에는 빈 오브젝트
2. Local의 sports를 펼치면
arguments: (...)
caller: (...)
length: 0
name: "sports"
prototype: {
  construnctor: ƒ ()
  __propto__: Object // 빌트인 오브젝트에 관련된 메소드들이 설정되어있음(6개)
}
__proto__: ƒ () // apply, bind, call 빌트인 function 오브젝트의 prototype에 연결되어 있는 메소드들이 설정됨
*/</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ol>
  <li>sports 오브젝트에 <code class="language-plaintext highlighter-rouge">prototype 오브젝트</code> 첨부</li>
  <li>prototype에 <code class="language-plaintext highlighter-rouge">constructor</code> 프로퍼티 첨부
    <ul>
      <li>prototype.contructor가 sports 오브젝트 참조</li>
    </ul>
  </li>
  <li>prototype에 <code class="language-plaintext highlighter-rouge">__proto__</code> 오브젝트 첨부</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="nx">sports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">prototype</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">constructor</span><span class="p">:</span> <span class="nx">sports</span>
    <span class="na">__proto__</span><span class="p">:</span> <span class="p">{}</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ol>
  <li>빌트인 Object.prototype의 메소드로 Object 인스턴스를 생성하여 <code class="language-plaintext highlighter-rouge">prototype.__proto__</code>에 첨부</li>
  <li>sports 오브젝트에 <code class="language-plaintext highlighter-rouge">__proto__</code> 오브젝트 첨부 -&gt; <code class="language-plaintext highlighter-rouge">sports.__proto__</code> 구조가 된다.</li>
  <li>빌트인 Function.prototype의 메소드로 function 인스턴스를 생성해서 <code class="language-plaintext highlighter-rouge">sports.__proto__</code>에 첨부</li>
  <li>sports 오브젝트 프로퍼티에 초기값 설정 - arguments, caller, length, name 프로퍼티</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="nx">sports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">arguments</span><span class="p">:</span> <span class="p">{},</span>
  <span class="na">caller</span><span class="p">:</span> <span class="p">{},</span>
  <span class="na">length</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">sports</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">prototype</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">constructor</span><span class="p">:</span> <span class="nx">sports</span><span class="p">,</span>
    <span class="na">__propto__</span><span class="p">:</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span>
  <span class="p">},</span>
  <span class="na">__proto__</span><span class="p">:</span> <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>function 오브젝트에 prototype이 있으며 constuctor가 연결된다.</li>
  <li>__proto__가 연결되어 있으며 Object인스턴스가 연결된다.</li>
  <li>function 오브젝트에 __proto__가 있으며 Function 인스턴스가 연결된다.</li>
  <li>Array면 Array인스턴스가 연결되고 String이면 String 인스턴스가 연결된다.</li>
</ul>

<h2 id="13-함수-실행-환경-인식-함수-실행-환경-저장-내부-프로퍼티">1.3 함수 실행 환경 인식, 함수 실행 환경 저장, 내부 프로퍼티</h2>

<p>함수 실행 환경 인식이 필요한 이유?</p>
<ul>
  <li>함수가 호출되었을 때 실행될 환경을 알아야 실행 환경에 맞추어 실행할 수 있기 때문</li>
</ul>

<p>실행 환경 설정 시점</p>
<ul>
  <li>엔진이 function 키워드를 만나 function 오브젝트를 생성할 때</li>
</ul>

<p>설정하는 것</p>
<ul>
  <li>실행 영역(함수가 속한 스코프 - <a href="/javascript/lexical-scope/">렉시컬스코프</a>)</li>
  <li>파라미터, 함수 코드 등</li>
</ul>

<p>함수 실행 환경 저장</p>
<ul>
  <li>function 오브젝트를 생성하고 바로 실행하지 않으므로 함수가 호출 되었을때 사용할 수 있도록 환경을 저장</li>
</ul>

<p>어디에?</p>
<ul>
  <li>생성한 functio 오브젝트에 저장</li>
</ul>

<p>인식한 환경을 function 오브젝트의 내부 프로퍼티에 설정 -&gt; {name: value} 형태로</p>

<p>내부 프로퍼티란?</p>
<ul>
  <li>엔진이 내부 처리에 사용하는 프로퍼티(외부에서 사용 불가)</li>
  <li>자바스크립트 엔진의 구현 알고리즘을 설명하기 위해 ECMAScript 사양에서 사용하는 의사 프로퍼티(내부 엔진 설명용)</li>
  <li>일부 내부 슬롯과 내부 메서드에 한해 간접적으로 접근할 수 있는 수단 제공</li>
  <li><code class="language-plaintext highlighter-rouge">[[]]</code> 이중 대괄호로 감싼 형태. 예를 들어 모든 걕체는 <code class="language-plaintext highlighter-rouge">[[prototype]]</code>이라는 내부 프로퍼티(슬롯)을 가진다.</li>
</ul>

<h2 id="14-내부-프로퍼티-분류-공통-내부-프로퍼티-선택적-내부-프로퍼티">1.4 내부 프로퍼티 분류: 공통 내부 프로퍼티, 선택적 내부 프로퍼티</h2>

<p>내부 프로퍼티 분류</p>
<ul>
  <li>공통 프로퍼티
    <ul>
      <li>모든 오브젝트에 공통으로 설정되는 프로퍼티</li>
    </ul>
  </li>
  <li>선택적 프로퍼티
    <ul>
      <li>오브젝트에 따라 선택적으로 설정되는 프로퍼티</li>
      <li>해당되는 오브젝트에만 설정</li>
    </ul>
  </li>
</ul>

<p>자바스크립트 엔진은 프로퍼티를 생성할 때 <code class="language-plaintext highlighter-rouge">프로퍼티의 상태를 나타내는 프로퍼티 어트리뷰트</code>를 기본값으로 자동 정의한다.</p>
<blockquote>
  <p>프로퍼티의 상태랑 프로퍼티의 값(value), 값의 갱신 가능 여부(writable), 열거 가능 여부(enumerable), 재정의 가능 여부(configurable)를 말한다.</p>
</blockquote>

<p>프로퍼티 어트리뷰트(상태)는 자바스크립트 엔진이 관리하는 내부상태 값인 내부 슬롯 <code class="language-plaintext highlighter-rouge">[[value]], [[writable]], [[enumerable]], [[configurable]]</code>이다. (내부 슬롯중 간접적으로 접근할 수 있는 일부)</p>

<p>따라서 프로퍼티 어트리뷰트에 직접 전근할 수 없지만 <code class="language-plaintext highlighter-rouge">Object.getOwnPropertyDescriptor</code>메서드를 사용하여 간접적으로 확인할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">ellin</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">age</span><span class="p">:</span> <span class="mi">25</span>
<span class="p">}</span>

<span class="c1">// 프로퍼티 어트리뷰트 정보를 제공하는 프로퍼티 디스크립터 객체를 반환한다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">))</span>
<span class="c1">// {value: 'ellin', writable: true, enumerable: true, configurable: true}</span>


<span class="c1">// 모든 프로퍼티의 프로퍼티 어트리뷰트 정보를 제공하는 프로퍼티 디스크립터 객체를 반환한다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptors</span><span class="p">(</span><span class="nx">person</span><span class="p">))</span>
<span class="cm">/*
{
  age: { value: 25, writable: true, enumerable: true, configurable: true },
  name: { value: 'ellin', writable: true, enumerable: true, configurable: true }
}
*/</span>
</pre></td></tr></tbody></table></code></pre></div></div>]]></content><author><name>FE Developer</name></author><category term="js-advanced" /><category term="function" /><category term="object" /><summary type="html"><![CDATA[function 형태, 오브젝트 생성, 저장, 생각의 전환]]></summary></entry></feed>
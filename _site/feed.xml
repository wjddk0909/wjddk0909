<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-04-20T08:12:26+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">FE개발자를 꿈꾸다</title><subtitle>An amazing website.</subtitle><author><name>FE Developer</name></author><entry><title type="html">vuex</title><link href="http://localhost:4000/vue-lv2/vuex/" rel="alternate" type="text/html" title="vuex" /><published>2022-03-12T00:00:00+09:00</published><updated>2022-03-12T00:00:00+09:00</updated><id>http://localhost:4000/vue-lv2/vuex</id><content type="html" xml:base="http://localhost:4000/vue-lv2/vuex/"><![CDATA[<h2 id="vuex-소개">vuex 소개</h2>

<ul>
  <li>복잡한 애플리케이션의 컴포넌트들을 효율적으로 관리하는 vuex 라이브러리</li>
  <li>React의 Flux패턴에서 기인함</li>
  <li>vue.js 중고급 개발자로 성장하기 위한 필수 관문</li>
</ul>

<h2 id="flux란">Flux란?</h2>

<ul>
  <li>MVC 패턴의 복잡한 데이터 흐름 문제를 해결하는 개발 패턴
    <ol>
      <li>action : 화면에서 발생하는 이벤트 또는 사용자의 입력</li>
      <li>dispatcher : 데이터를 변경하는 방법, 메서드</li>
      <li>model : 화면에 표시할 데이터</li>
      <li>view : 사용자에게 비춰지는 화면</li>
    </ol>
  </li>
  <li>MVC패턴과 Flux패턴 비교<br />
<img src="/assets/images/mvc_vs_flux.png" alt="mvc_vs_flux" />
    <ul>
      <li>view : 보고있는 화면</li>
      <li>model : 데이터</li>
      <li>controller : model과 view 제어
        <blockquote>
          <p>Flux패턴은 action에서 view까지 단방향으로 일어남 반면 MVC패턴은 model과 view가 서로 데이터를 주고받아서 양방향으로 일어남</p>
        </blockquote>
      </li>
    </ul>
  </li>
  <li>MVC패턴의 문제점<br />
<img src="/assets/images/mvc_problem.png" alt="mvc_problem" />
    <ul>
      <li>기능 추가 및 변경에 따라 생기는 문제점을 예측할 수 없음.</li>
      <li>앱이 복잡해지면서 생기는 업데이트 루프</li>
    </ul>
  </li>
  <li>Flux패턴의 단방향 흐름<br />
<img src="/assets/images/flux_flow.png" alt="flux_flow" />
    <ul>
      <li>데이터의 흐름이 여러 갈래로 나뉘지 않고 단방향으로만 처리</li>
    </ul>
  </li>
</ul>

<h2 id="vuex가-왜-필요할까">vuex가 왜 필요할까?</h2>

<p>복잡한 애플리케이션에서 컴포넌트의 개수가 많아지면 컴포넌트간에 데이터 전달이 어려워진다.</p>

<ul>
  <li>vuex로 해결할 수 있는 문제
    <ol>
      <li>MVC 패턴에서 발생하는 구조적 오류</li>
      <li>컴포넌트 간 데이터 전달 명시</li>
      <li>여러 개의 컴포넌트에서 같은 데이터를 업데이트 할 때 동기화 문제</li>
    </ol>
  </li>
</ul>

<h3 id="이벤트-버스로-해결">이벤트 버스로 해결?</h3>
<p>어디서 이벤트를 보냈는지 혹은 어디서 이벤트를 받았는지 알기 어려움</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="c1">// Login.vue</span>
<span class="nx">eventBus</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">fetch</span><span class="dl">'</span><span class="p">,</span> <span class="nx">loginInfo</span><span class="p">);</span>

<span class="c1">// List.vue</span>
<span class="nx">eventBus</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="dl">'</span><span class="s1">display</span><span class="dl">'</span><span class="p">,</span> <span class="nx">data</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">displayOnScreen</span><span class="p">(</span><span class="nx">data</span><span class="p">));</span>

<span class="c1">// Chart.vue</span>
<span class="nx">eventBus</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">refreshData</span><span class="dl">'</span><span class="p">,</span> <span class="nx">chartData</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>컴포넌트 간 데이터 전달이 명시적이지 않음</p>

<h2 id="vuex-컨셉">vuex 컨셉</h2>

<ul>
  <li>State : 컴포넌트 간에 공유하는 데이터 <code class="language-plaintext highlighter-rouge">data()</code></li>
  <li>View : 데이터를 표시하는 화면 <code class="language-plaintext highlighter-rouge">template</code></li>
  <li>Mutations: state값을 변경하는 이벤트 로직, 메서드 <code class="language-plaintext highlighter-rouge">methods</code></li>
  <li>Action : 사용자의 입력에 따라 데이터를 변경하는 (비동기 처리 로직을 선언) <code class="language-plaintext highlighter-rouge">aysnc methods</code>
<img src="/assets/images/vuex_flow.png" alt="vuex_flow" /><br />
흐름 설명 : 화면(view)에서 버튼을 클릭 하면 버튼이 action을 발생시킴 &gt; action이 발동하면 데이터(state)를 변경</li>
</ul>

<h2 id="vuex-구조">vuex 구조</h2>

<p>컴포넌트 -&gt; 비동기 로직 -&gt; 동기 로직 -&gt; 상태
<img src="/assets/images/vuex_construction.png" alt="vuex_construction" /><br />
action : 비동기 로직<br />
mutations : 동기 로직</p>

<p><a href="https://joshua1988.github.io/web-development/javascript/javascript-asynchronous-operation/">자바스크립트 비동기 처리와 콜백함수 참고 링크</a></p>]]></content><author><name>FE Developer</name></author><category term="vue-lv2" /><category term="vuex" /><category term="store" /><summary type="html"><![CDATA[vuex 설명]]></summary></entry><entry><title type="html">git branch</title><link href="http://localhost:4000/git/gitbranch/" rel="alternate" type="text/html" title="git branch" /><published>2021-12-12T00:00:00+09:00</published><updated>2021-12-12T00:00:00+09:00</updated><id>http://localhost:4000/git/gitbranch</id><content type="html" xml:base="http://localhost:4000/git/gitbranch/"><![CDATA[<h2 id="git-branch-생성하고-사용하는-방법">git branch 생성하고 사용하는 방법</h2>

<ul>
  <li>git init : git 저장소 생성(초기화)</li>
  <li>git remote add origin {link} : link에 생성한 레포지토리 url복사해서 넣기</li>
  <li>git branch : 깃 브랜치 확인</li>
  <li>git branch -v : 마지막 커밋메세지 확인</li>
  <li>git branch ‘브랜치명’ : 브랜치 생성</li>
  <li>git checkout ‘브랜치명’ : 선택한 브랜치로 이동</li>
  <li>git branch -d ‘브랜치명’ : 브랜치 삭제하기</li>
  <li>git merge ‘합칠 브랜치명’ : 현재위치한 브랜치에 합칠 브랜치에서 작업한 내용 가져와서 병합</li>
  <li>git add . : 변경한 파일을 저장</li>
  <li>git commit -m “커밋메세지” : 커밋메세지 입력</li>
  <li>git push origin ‘브랜치명’ : 원격저장소 브랜치에 push 하기</li>
</ul>]]></content><author><name>FE Developer</name></author><category term="git" /><category term="branch" /><summary type="html"><![CDATA[branch 생성하고 사용하기]]></summary></entry><entry><title type="html">flex에 대해서</title><link href="http://localhost:4000/css/flex/" rel="alternate" type="text/html" title="flex에 대해서" /><published>2021-12-12T00:00:00+09:00</published><updated>2021-12-12T00:00:00+09:00</updated><id>http://localhost:4000/css/flex</id><content type="html" xml:base="http://localhost:4000/css/flex/"><![CDATA[<h2 id="flex에-대한-정리">flex에 대한 정리</h2>]]></content><author><name>FE Developer</name></author><category term="css" /><category term="css" /><category term="flex" /><category term="grow" /><category term="shirink" /><summary type="html"><![CDATA[flex grow shirink]]></summary></entry><entry><title type="html">상단 박스 height 유동적일때 하단 박스 oveflow scroll 시키기(feat. flex)</title><link href="http://localhost:4000/css/flexbox_scroll/" rel="alternate" type="text/html" title="상단 박스 height 유동적일때 하단 박스 oveflow scroll 시키기(feat. flex)" /><published>2021-12-12T00:00:00+09:00</published><updated>2021-12-12T00:00:00+09:00</updated><id>http://localhost:4000/css/flexbox_scroll</id><content type="html" xml:base="http://localhost:4000/css/flexbox_scroll/"><![CDATA[<h2 id="상단-컨텐츠의-높이값이-유동적으로-바뀌고-하단-박스만-overflow-scroll-하는-법">상단 컨텐츠의 높이값이 유동적으로 바뀌고 하단 박스만 overflow scroll 하는 법</h2>

<p>스크롤시 상단 컨텐츠는 고정, 하단 컨텐츠만 overflow-y: auto 시켜야 하는 레이아웃 구현하기</p>

<p>레이아웃 상세
상단 컨텐츠 : 상단 컨텐츠는 내용에 따라서 <code class="language-plaintext highlighter-rouge">height</code>값 유동적<br />
하단 컨텐츠 : 리스트를 보여주며 디바이스에서 상단 컨텐츠 <code class="language-plaintext highlighter-rouge">height</code>를 뺀 만큼 보이고 <code class="language-plaintext highlighter-rouge">overflow</code> 되는 부분은 <code class="language-plaintext highlighter-rouge">scroll</code></p>

<p>코드 보기</p>

<div class="code-header">
    <button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
</pre></td><td class="rouge-code"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"X-UA-Compatible"</span> <span class="na">content=</span><span class="s">"IE=edge"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>Document<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;style&gt;</span>
    <span class="o">*</span> <span class="p">{</span>
        <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
        <span class="nl">padding</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nc">.container</span> <span class="p">{</span>
        <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
        <span class="nl">flex-direction</span><span class="p">:</span> <span class="n">column</span><span class="p">;</span>
        <span class="nl">min-height</span><span class="p">:</span> <span class="m">100vh</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nc">.topBox</span> <span class="p">{</span>
        <span class="nl">flex</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
        <span class="nl">background</span><span class="p">:</span> <span class="nb">rgb</span><span class="p">(</span><span class="m">174</span><span class="p">,</span> <span class="m">101</span><span class="p">,</span> <span class="m">177</span><span class="p">);</span>
        <span class="nl">color</span><span class="p">:</span> <span class="m">#fff</span><span class="p">;</span>
        <span class="nl">padding</span><span class="p">:</span> <span class="m">1.2rem</span>

    <span class="p">}</span>
    <span class="nc">.bottomBox</span> <span class="p">{</span>
        <span class="nl">position</span><span class="p">:</span> <span class="nb">relative</span><span class="p">;</span>
        <span class="nl">flex</span><span class="p">:</span> <span class="m">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nc">.scrollBox</span> <span class="p">{</span>
        <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
        <span class="nl">left</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span> <span class="nl">top</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span> <span class="nl">right</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span> <span class="nl">bottom</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
        <span class="nl">overflow-y</span><span class="p">:</span> <span class="nb">auto</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nt">li</span> <span class="p">{</span>
        <span class="nl">list-style</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
        <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
        <span class="nl">height</span><span class="p">:</span> <span class="m">150px</span><span class="p">;</span>
        <span class="nl">border-bottom</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="m">#ddd</span><span class="p">;</span>
        <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
        <span class="nl">justify-content</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
        <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"topBox"</span><span class="nt">&gt;</span>헤더 자리<span class="nt">&lt;/div&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"bottomBox"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"scrollBox"</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;ul&gt;</span>
                        <span class="nt">&lt;li&gt;&lt;span&gt;</span>리스트1<span class="nt">&lt;/span&gt;&lt;/li&gt;</span>
                        <span class="nt">&lt;li&gt;&lt;span&gt;</span>리스트2<span class="nt">&lt;/span&gt;&lt;/li&gt;</span>
                        <span class="nt">&lt;li&gt;&lt;span&gt;</span>리스트3<span class="nt">&lt;/span&gt;&lt;/li&gt;</span>
                        <span class="nt">&lt;li&gt;&lt;span&gt;</span>리스트4<span class="nt">&lt;/span&gt;&lt;/li&gt;</span>
                        <span class="nt">&lt;li&gt;&lt;span&gt;</span>리스트5<span class="nt">&lt;/span&gt;&lt;/li&gt;</span>
                        <span class="nt">&lt;li&gt;&lt;span&gt;</span>리스트6<span class="nt">&lt;/span&gt;&lt;/li&gt;</span>
                        <span class="nt">&lt;li&gt;&lt;span&gt;</span>리스트7<span class="nt">&lt;/span&gt;&lt;/li&gt;</span>
                        <span class="nt">&lt;li&gt;&lt;span&gt;</span>리스트8<span class="nt">&lt;/span&gt;&lt;/li&gt;</span>
                        <span class="nt">&lt;li&gt;&lt;span&gt;</span>리스트9<span class="nt">&lt;/span&gt;&lt;/li&gt;</span>
                        <span class="nt">&lt;li&gt;&lt;span&gt;</span>리스트10<span class="nt">&lt;/span&gt;&lt;/li&gt;</span>
                    <span class="nt">&lt;/ul&gt;</span>
                <span class="nt">&lt;/div&gt;</span>
            <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ol>
  <li>topBox와 bottomBox를 전체 container박스로 묶는다.</li>
  <li>bottomBox안에 리스트 박스를 넣는다.</li>
  <li>스타일 적용
    <ul>
      <li>전체 박스에 display: flex; flex-direction: column; min-height: 100vh;</li>
      <li>topBox에 flex: 0;</li>
      <li>bottomBox에 position: relative; flex: 1;</li>
      <li>리스트 박스에 position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow-y: auto;</li>
    </ul>
  </li>
</ol>

<p>적용 예시)<br />
<img src="/assets/images/html_css/flex_box01.gif" alt="overflow scroll" /></p>

<ul>
  <li><a href="https://dirask.com/posts/CSS-scrolling-for-flexbox-with-overflowing-content-j8VrdD">참고 링크</a></li>
</ul>]]></content><author><name>FE Developer</name></author><category term="css" /><category term="css" /><category term="flex" /><category term="overflow" /><category term="scroll" /><summary type="html"><![CDATA[flex-direction: column]]></summary></entry><entry><title type="html">Vue에서 Fontawesome 사용하기</title><link href="http://localhost:4000/vue-lv2/fontawesome/" rel="alternate" type="text/html" title="Vue에서 Fontawesome 사용하기" /><published>2021-12-11T00:00:00+09:00</published><updated>2021-12-11T00:00:00+09:00</updated><id>http://localhost:4000/vue-lv2/fontawesome</id><content type="html" xml:base="http://localhost:4000/vue-lv2/fontawesome/"><![CDATA[<h2 id="vue에서-fontawesome-사용하기">Vue에서 Fontawesome 사용하기</h2>

<p>폰트어썸 업데이트하면서 부터인지 vue에서 사용하려면 메일로 무료키트 사용 링크를 받아야한다.<br />
fontawsome.com/start로 접속 &gt; 이메일 입력 &gt; 확인, 설정 버튼 클릭 &gt; 폰트어썸 로그인 후 무료키트 링크 카피해서 index.html 헤드에 추가</p>]]></content><author><name>FE Developer</name></author><category term="vue-lv2" /><category term="fontawesome" /><summary type="html"><![CDATA[Fontawesome 삽입하기]]></summary></entry><entry><title type="html">REST</title><link href="http://localhost:4000/javascript/rest/" rel="alternate" type="text/html" title="REST" /><published>2021-12-09T00:00:00+09:00</published><updated>2021-12-09T00:00:00+09:00</updated><id>http://localhost:4000/javascript/rest</id><content type="html" xml:base="http://localhost:4000/javascript/rest/"><![CDATA[<h2 id="rest에-대해-알아보자">REST에 대해 알아보자</h2>

<p>REST에 대해 알아보기전에 api에 대해 다시 한번 확인해보자.<br />
api에 대한 포스팅이 따로 있지만 여기에서는 비유를 통해 간단히 설명한다.</p>

<p>좋아하는 드라마의 본방사수를 위해서 집에 서둘러 들어와 티비를 켜고 원하는 채널을 틀어야 하는 상황일때 이러한 과정이 필요하다.<br />
티비 리모컨의 전원 버튼을 눌러 티비를 켜고 채널 버튼을 눌러 원하는 채널로 돌려야 한다.<br />
나 &gt; <strong>리모컨</strong> &gt; 티비 이러한 순서로 볼 수 있다.</p>

<p>즉 API는 리모컨 처럼 애플리케이션과 운영체게 사이의 ‘상호작용’을 돕는다.</p>

<h3 id="웹-api의-역할">웹 API의 역할</h3>

<ul>
  <li>권한을 가진 사람만 서버와 데이터베이스안의 리소스에 접근이 가능하게 해준다.</li>
  <li>모든 요청(request)와 응답(response)를 표준화 해준다.</li>
</ul>

<h2 id="rest의-구성요소">REST의 구성요소</h2>

<ol>
  <li>자원(Resource) : HTTP UIR 를 통한 자원 명시</li>
  <li>자원에 대한 행위(Verb) : HTTP Method(post, get put, delete)</li>
  <li>자원에 대한 행위의 내용(Representations) : HTTP Message Pay Load</li>
</ol>

<h2 id="rest-api">REST API</h2>

<p>REST API란 REST의 원리를 따르는 API를 의미한다.
리소스(HTTP URI)로 어떠한 행위(HTTP Method + Pay Load)를 하겠다는 것을 구조적으로 표현하는 방법이다.</p>

<p>REST API의 설계 가이드를 살펴보자.</p>

<ol>
  <li>URI는 명사, 소문자를 사용한다.</li>
  <li>마지막에 슬래시를 포함하지 않는다.</li>
  <li>언더바 대신 하이픈을 사용한다.</li>
  <li>URI에 파일확장자는 포함하지 않는다.</li>
</ol>

<h2 id="restful-이란">RESTful 이란?</h2>

<p>RESTful이란 REST API의 설계 가이드를 올바르게 지킨 시스템을 RESTful 하다고 말할 수 있다.
RESTful하게 만들면 그자체로 API의 목적이 무엇인지 명확하게 알 수 있다.</p>]]></content><author><name>FE Developer</name></author><category term="javascript" /><category term="api" /><category term="REST" /><summary type="html"><![CDATA[REST API, RESTful 이란]]></summary></entry><entry><title type="html">호이스팅(Hoisting)</title><link href="http://localhost:4000/javascript/hoisting/" rel="alternate" type="text/html" title="호이스팅(Hoisting)" /><published>2021-12-08T00:00:00+09:00</published><updated>2021-12-08T00:00:00+09:00</updated><id>http://localhost:4000/javascript/hoisting</id><content type="html" xml:base="http://localhost:4000/javascript/hoisting/"><![CDATA[<h2 id="hoisting에-대해-알아보자">hoisting에 대해 알아보자</h2>

<blockquote>
  <p>자바스크립트에서 호이스팅(Hoisting)이란, 인터프리터가 변수와 함수의 공간을 선언전에 미리 할당 하는 것을 의미한다.</p>
</blockquote>

<p>실행컨텍스트의 처리 순서를 살펴보면,</p>
<ol>
  <li>선언 단계(Declaration phase) : 변수, 함수선언문 설정</li>
  <li>초기화 단계(Initialization phase) : 변수 이름 바인딩 (값은 undefined로 초기화)</li>
  <li>할당 단계(Assignment phase)</li>
</ol>

<p>위 순서로 처리가 된다.</p>

<p>이때, let변수는 호이스팅 되지 않는다.(사실상 호이스팅은 되지만 안되는것과 비슷하다.)
var 변수는 선언단계와 초기화단계가 동시에 진행되어 변수이름을 바인딩하면서 값이 undefined로 초기화되는 반면,<br />
let 변수는 선언단계와 초기화단계가 따로 진행된다.<br />
그래서 실행컨텍스트에 변수가 등록이 되었지만 메모리가 할당이 되어있지 않기 때문에 ReferenceError가 발생한다.</p>

<p>여기서 TDZ가 무엇인지 알고 가자.<br />
TDZ란 “temporal dead zone” 일시적인 사각지대 라고 직역할 수 있다.<br />
TDZ는 스코프의 시작지점 부터 초기화 단계 직전까지의 구간이다.</p>

<p>즉, let변수는 TDZ구간에 의해 메모리가 할당이 되지 않기 때문에 참조에러(ReferenceError)가 발생한다.</p>

<blockquote>
  <p>예)</p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`스포츠: </span><span class="p">${</span><span class="nx">sports</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span> <span class="c1">// 스포츠: undefined</span>
    <span class="kd">var</span> <span class="nx">sports</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">축구</span><span class="dl">'</span><span class="p">;</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`스포츠: </span><span class="p">${</span><span class="nx">sports</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span> <span class="c1">// ReferenceError: sports is not defined</span>
    <span class="kd">let</span> <span class="nx">sports</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">축구</span><span class="dl">'</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>]]></content><author><name>FE Developer</name></author><category term="javascript" /><category term="hoisting" /><summary type="html"><![CDATA[javascript에서 호이스팅이란?]]></summary></entry><entry><title type="html">api</title><link href="http://localhost:4000/javascript/api/" rel="alternate" type="text/html" title="api" /><published>2021-12-07T00:00:00+09:00</published><updated>2021-12-07T00:00:00+09:00</updated><id>http://localhost:4000/javascript/api</id><content type="html" xml:base="http://localhost:4000/javascript/api/"><![CDATA[<h2 id="api에-대해-알아보자">api에 대해 알아보자</h2>

<p>“API(Application Progtamming Interface, 응용프로그램 프로그래밍 인터페이스)는 응용 프로그램에서 사용할 수 있도록, 운영체제나 프로그래밍 언어가 제공하는 기능을 제어할 수 있게 만든 인터페이스를 뜻한다.” -위키백과</p>

<p>api는 프로그램이 서로 상호작용하는 것을 도와주는 매개체라고 볼 수 있다.<br />
프로그램이 주문하도록 명령을 정리하고, 그 명령을 받아서 응용프로그램과 상호작용하여 요청된 명령에 대한 값을 전달한다.</p>

<ol>
  <li>서버와 데이터베이스의 출입구 역할을 한다.</li>
  <li>애플리케이션과 기기가 원활하게 통신하도록 한다.</li>
  <li>모든 접속을 표준화 한다.</li>
</ol>

<p>개발자들이 어플리케이션 코드 작성을 표준화 해서 빠르고 간단히 프로세스 처리가 가능하다.<br />
또한 개발자들간의 협업도 용이해진다.</p>

<p>즉, api는 어떠한 응용프로그램에서 데이터를 주고받기 위한 방법이다.<br />
특정 사이트에서 데이터를 공유할때 어떤 방식으로 요청해야 하는지, 어떤 데이터를 제공 받을수 있는지에 대한 규격들을 말한다.</p>]]></content><author><name>FE Developer</name></author><category term="javascript" /><category term="api" /><summary type="html"><![CDATA[api란 무엇인가]]></summary></entry><entry><title type="html">call/apply/bind 함수의 차이점</title><link href="http://localhost:4000/javascript/call-apply-bind/" rel="alternate" type="text/html" title="call/apply/bind 함수의 차이점" /><published>2021-12-06T00:00:00+09:00</published><updated>2021-12-06T00:00:00+09:00</updated><id>http://localhost:4000/javascript/call-apply-bind</id><content type="html" xml:base="http://localhost:4000/javascript/call-apply-bind/"><![CDATA[<h2 id="callapplybind-함수의-차이점은">call/apply/bind 함수의 차이점은?</h2>

<p>예제를 보고 확인해보자.</p>

<blockquote>
  <p>예)</p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>    <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">maru</span><span class="dl">'</span><span class="p">};</span>
    <span class="kd">const</span> <span class="nx">live</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">city</span><span class="p">){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hi my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">, I live in </span><span class="p">${</span><span class="nx">city</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="p">};</span>
    <span class="nx">live</span><span class="p">(</span><span class="dl">'</span><span class="s1">korea</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// Hi my name is , I live in korea</span>
    <span class="nx">live</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="dl">'</span><span class="s1">korea</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// Hi my name is maru, I live in korea</span>
    <span class="nx">live</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="p">[</span><span class="dl">'</span><span class="s1">korea</span><span class="dl">'</span><span class="p">]);</span> <span class="c1">// Hi my name is maru, I live in korea</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>call과 apply는 함수를 호출하는 함수<br />
첫번째 인자인 “obj”로 this를 변경하고 함수를 실행한다.<br />
(apply는 파라미터를 배열로 넣어야 한다.)</p>

<blockquote>
  <p>예)</p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre>    <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">maru</span><span class="dl">'</span><span class="p">};</span>
    <span class="kd">const</span> <span class="nx">live</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">city</span><span class="p">){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hi my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">, I live in </span><span class="p">${</span><span class="nx">city</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="p">};</span>
    <span class="kd">const</span> <span class="nx">bound</span> <span class="o">=</span> <span class="nx">live</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
    <span class="nx">bound</span><span class="p">(</span><span class="dl">'</span><span class="s1">korea</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// Hi my name is maru, I live in korea</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>bind함수는 함수를 실행하지 않는다.</p>]]></content><author><name>FE Developer</name></author><category term="javascript" /><category term="function" /><category term="call" /><category term="apply" /><category term="bind" /><summary type="html"><![CDATA[call()/apply()/bind()]]></summary></entry><entry><title type="html">1 - Todo App - 프로젝트 소개 및 구성</title><link href="http://localhost:4000/vue-lv2/vue-intermediate1/" rel="alternate" type="text/html" title="1 - Todo App - 프로젝트 소개 및 구성" /><published>2021-12-05T00:00:00+09:00</published><updated>2021-12-05T00:00:00+09:00</updated><id>http://localhost:4000/vue-lv2/vue-intermediate1</id><content type="html" xml:base="http://localhost:4000/vue-lv2/vue-intermediate1/"><![CDATA[<h2 id="개발환경-설정-및-깃헙-리포지토리-클론">개발환경 설정 및 깃헙 리포지토리 클론</h2>

<ul>
  <li>vscode 설치
<img src="/assets/images/vue/vue-lv2/intermediate1_1.png" alt="todo" /></li>
  <li>플러그인 설치
<code class="language-plaintext highlighter-rouge">vetur</code>, <code class="language-plaintext highlighter-rouge">'tslint</code>(문법오류나 api쫓아가기 유용함)</li>
  <li><a href="https://nodejs.org/en/">node.js</a></li>
  <li><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd">Vue.js devtools</a></li>
  <li><a href="https://git-scm.com/downloads">git</a></li>
</ul>

<h2 id="11-뷰-cli로-프로젝트-생성하기">1.1 뷰 CLI로 프로젝트 생성하기</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>npm i <span class="nt">-g</span> @vue/cli
<span class="c"># or</span>
yarn global add @vue/cli
</pre></td></tr></tbody></table></code></pre></div></div>
<p>cli를 설치하고 <code class="language-plaintext highlighter-rouge">vue create 프로젝트이름</code> 명령어를 사용한다.<br />
vue2를 선택하고 세팅하도록 하겠다.</p>

<p><img src="/assets/images/vue/vue-lv2/intermediate1_2.png" alt="todo" /></p>

<p>프로젝트가 생성되고 나면 생성한 폴더 안으로 <code class="language-plaintext highlighter-rouge">cd 폴더명</code>으로 이동해서 <code class="language-plaintext highlighter-rouge">npm run serve or yarn serve</code>로 로컬서버로 실행해서 브라우저에서 확인할 수 있습니다.</p>

<p><code class="language-plaintext highlighter-rouge">App.vue</code> 파일을 살펴보면 <code class="language-plaintext highlighter-rouge">HelloWorld</code>라는 컴포넌트를 <code class="language-plaintext highlighter-rouge">import</code>를 통해서 가져오는 것을 볼 수 있습니다.</p>

<h2 id="12-프로젝트-소-및-컴포넌트-설계-방법">1.2 프로젝트 소 및 컴포넌트 설계 방법</h2>

<p>Todo App을 만들어 볼 계획입니다.</p>

<p>구성은 Root 밑에 4개의 컴포넌트로 구성 되어있습니다.</p>

<ul>
  <li>TodoHeader : 앱의 타이틀이 들어간 컴포넌트</li>
  <li>TodoInput : 할 일을 입력하는 입력창이 있는 컴포넌트</li>
  <li>TodoList : 입력한 내용을 리스트로 뿌려주고 각 리스트를 삭제하고, 체크 기능이 들어간 컴포넌트</li>
  <li>TodoFooter : 전체 리스트를 다 없애주는 버튼이 들어가있는 컴포넌트</li>
</ul>

<p>간단한 예제이지만 event올리기, props 내리기 같은 데이터 통신에 대해 다루고 있기 때문에 공부하기 좋은 예제입니다.</p>]]></content><author><name>FE Developer</name></author><category term="vue-lv2" /><category term="vue" /><summary type="html"><![CDATA[Todo App]]></summary></entry></feed>
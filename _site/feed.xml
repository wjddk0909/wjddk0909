<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-05-24T21:55:35+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">FE개발자를 꿈꾸다</title><subtitle>An amazing website.</subtitle><author><name>FE Developer</name></author><entry><title type="html">12 - 외부 라이브러리 모듈화 방법(차트)</title><link href="http://localhost:4000/vue-lv3/vue-advanced12/" rel="alternate" type="text/html" title="12 - 외부 라이브러리 모듈화 방법(차트)" /><published>2022-04-27T00:00:00+09:00</published><updated>2022-04-27T00:00:00+09:00</updated><id>http://localhost:4000/vue-lv3/vue-advanced12</id><content type="html" xml:base="http://localhost:4000/vue-lv3/vue-advanced12/"><![CDATA[<h2 id="121-라이브러리-모듈화의-이유와-배경">12.1 라이브러리 모듈화의 이유와 배경</h2>

<p><a href="https://www.chartjs.org/docs/latest/">Chart.js</a>
<a href="https://2018.stateofjs.com/front-end-frameworks/overview/">State of JS 2018</a></p>

<ol>
  <li>외부 라이브러리 모듈화
    <ul>
      <li>이유 : Vue.js 관련 라이브러리가 없을 때 일반 라이브러리를 결합할 수 있어야 함</li>
      <li>종류</li>
    </ul>
    <ol>
      <li>차트</li>
      <li>데이트피커</li>
      <li>테이블</li>
      <li>스피너</li>
    </ol>
  </li>
</ol>

<h2 id="122-차트-라이브러리-설치-및-차트-그리기">12.2 차트 라이브러리 설치 및 차트 그리기</h2>

<ul>
  <li>chart.js라이브러리 설치 <code class="language-plaintext highlighter-rouge">yarn add chart.js@2</code></li>
  <li>chart.js 공식사이트에서 예제 코드 복사해서 붙여넣기</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-chart/commit/f519e97f0f1b5d8ba43f0037dc0bf00a3a3749cd">diff check</a></p>
</blockquote>

<h2 id="123-barchart-컴포넌트화-작업">12.3 BarChart 컴포넌트화 작업</h2>

<ul>
  <li>차트 -&gt; 컴포넌트화 : 차트에 해당하는 코드들을 컴포넌트에 만들기</li>
  <li>컴포넌트의 플러그인화</li>
  <li>컴포넌트 통신을 이용한 차트 컴포넌트 기능 결합</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-chart/commit/3c445f959ca7a499906e6f9cd172005831351145">diff check</a></p>
</blockquote>

<h2 id="124-linechart-제작-및-차트-충돌-문제-해결">12.4 LineChart 제작 및 차트 충돌 문제 해결</h2>

<p><a href="https://www.chartjs.org/docs/latest/getting-started/">line chart</a></p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-chart/commit/bc92bf4dd663572e1b9ee8cb6ae893cb6c8a3a37">diff check</a></p>
</blockquote>

<h2 id="125-vue에서-dom을-접근하는-방법인-ref-속성-소개">12.5 Vue에서 DOM을 접근하는 방법인 ref 속성 소개</h2>

<p>ref</p>
<ul>
  <li>각각의 컴포넌트에서만 접근할 수 있는 접근자</li>
  <li>document.getElementById의 경우는 어떤 컴포넌트에서 사용하든 화면에서 그려진 돔에 전부 접근하기때문에 충돌날 확률이 높음</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="nt">&lt;div</span> <span class="na">ref=</span><span class="s">"app"</span> <span class="na">id=</span><span class="s">"app"</span><span class="nt">&gt;</span>hello<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;script&gt;</span>
    <span class="kd">var</span> <span class="nx">divElement</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">app</span><span class="dl">'</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">divElement</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">#app</span><span class="dl">'</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">divElement</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#app</span><span class="dl">'</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">divElement</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$refs</span><span class="p">.</span><span class="nx">app</span><span class="p">;</span>
<span class="nt">&lt;/script&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-chart/commit/870dda16ea5051a42a9745281f49f85e8f7126df">diff check</a></p>
</blockquote>

<h2 id="126-vuejs-플러그인-소개-및-차트-플러그인-제작">12.6 Vue.js 플러그인 소개 및 차트 플러그인 제작</h2>

<p><a href="https://vuejs.org/guide/reusability/plugins.html">plugin 문서</a></p>

<ul>
  <li>chart.js를 각 컴포넌트마다 불러와서 사용하면 차트의 종류가 많아질수록 라이브러리를 컴포넌트마다 불러오는 불필요한 로직이 생김</li>
</ul>

<p>플러그인</p>
<ul>
  <li>인스턴스가 생성됐을때 모든 컴포넌트에서 사용하고 싶은 기능을 정의</li>
  <li>Vue.use(ChartPlugin)</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-chart/commit/aafdc87c83982f20d494fbe0bf57015a9f0f7146">diff check</a></p>
</blockquote>

<h2 id="127-결합력-높은-차트-컴포넌트-모듈-제작-방법">12.7 결합력 높은 차트 컴포넌트 모듈 제작 방법</h2>

<ul>
  <li>컴포넌트 통신을 이용한 차트 컴포넌트 기능 결합</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-chart/commit/a495a8ef2c3d150c06625e8ea9f24510ff0c55d0">diff check</a></p>
</blockquote>]]></content><author><name>FE Developer</name></author><category term="vue-lv3" /><category term="vue" /><category term="chart" /><summary type="html"><![CDATA[Vue news]]></summary></entry><entry><title type="html">10 - 데이터 호출과 UX</title><link href="http://localhost:4000/vue-lv3/vue-advanced10/" rel="alternate" type="text/html" title="10 - 데이터 호출과 UX" /><published>2022-04-27T00:00:00+09:00</published><updated>2022-04-27T00:00:00+09:00</updated><id>http://localhost:4000/vue-lv3/vue-advanced10</id><content type="html" xml:base="http://localhost:4000/vue-lv3/vue-advanced10/"><![CDATA[<h2 id="101-ux를-고려한-데이터-호출-시점">10.1 UX를 고려한 데이터 호출 시점</h2>

<p>데이터 호출 시점</p>
<ol>
  <li>컴포넌트 라이프 사이클 훅
    <ul>
      <li>created : 인스턴스(컴포넌트)가 생성되자 마자 호출되는 로직들, 화면에 내용들이 붙은 상태는 아님</li>
    </ul>
  </li>
  <li>라우터 네비게이션 가드
    <ul>
      <li>라우터로 특정 url에 접근할때 그 전에 동작들을 정의하는 속성(함수)</li>
    </ul>
  </li>
</ol>

<p>네비게이션가드가 라이프사이클훅 보다 먼저 호출 됨<br />
컴포넌트가 생성되고 나서 데이터를 호출 할건지 라우팅 상태에서 호출할건지에 따라 선택</p>

<p><a href="https://vuejs.org/api/#created">created 라이프 사이클 훅 API 문서</a><br />
<a href="https://joshua1988.github.io/web-development/vuejs/vue-router-navigation-guards/">네비게이션 가드 블로그</a><br />
<a href="uide/advanced/navigation-guards.html">네비게이션 가드 뷰 라우터 공식 문서</a></p>

<h2 id="102-라이프-사이클-훅을-이용한-데이터-호출-방법의-문제와-비동기-처리-코드-수정">10.2 라이프 사이클 훅을 이용한 데이터 호출 방법의 문제와 비동기 처리 코드 수정</h2>

<p>actions.js</p>
<ul>
  <li>FETCH_LIST에서 fetchList api 호출에 return 해줘야함</li>
  <li>return을 해줘야 fetchList에 대한 결과가 프로미스로 체이닝 돼서 FETCH_LIST가 ListMixin에서 .then이 될 수 있게 함</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/c63b150611f9b11ae138b15379a4ab607e4c5370">diff check</a></p>
</blockquote>

<h2 id="103-라우터-네비게이션을-이용한-데이터-호출-방법">10.3 라우터 네비게이션을 이용한 데이터 호출 방법</h2>

<p>beforeEnter</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="nx">beforeEnter</span><span class="p">:</span> <span class="p">(</span><span class="nx">to</span><span class="p">,</span> <span class="k">from</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">to</span><span class="dl">'</span><span class="p">,</span> <span class="nx">to</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">from</span><span class="dl">'</span><span class="p">,</span> <span class="k">from</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">next</span><span class="dl">'</span><span class="p">,</span> <span class="nx">next</span><span class="p">);</span>
    <span class="nx">next</span><span class="p">();</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>to : 이동할 URL의 라우팅 정보</li>
  <li>from : 현재위치의 URL 라우팅 정보</li>
  <li>next : function, next();를 호출 해줘야지 이동할 URL로 이동할 수 있음</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/4b55dc15e00750fd255de63654429df7f9977d40">diff check</a></p>
</blockquote>

<h2 id="104-라우터-네비게이션-가드-실습-및-스피너-종료-시점-변경">10.4 라우터 네비게이션 가드 실습 및 스피너 종료 시점 변경</h2>

<ul>
  <li>데이터를 불러오고 나서도 로딩스피너가 바로 꺼지지 않음</li>
  <li><code class="language-plaintext highlighter-rouge">LinstMixin.js</code>에서 데이터 호출 로직을 <code class="language-plaintext highlighter-rouge">router/index.js</code>로 옮기기</li>
  <li>그리고 <code class="language-plaintext highlighter-rouge">bus.$emit('end:spinner');</code>를 뷰페이지의 <code class="language-plaintext highlighter-rouge">mounted()</code>에 넣어줘서 마운트 되면 꺼지도록 수정</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/b2e68117af805ba069554820edafe768c89abb75">diff check</a></p>
</blockquote>

<ul>
  <li>각 뷰페이지에 mounted에서 end:spinner가 중복되므로 이것을 다시 재활용 가능</li>
  <li><code class="language-plaintext highlighter-rouge">LinstMixin.js</code>을 다시 이용해서 데이터 호출 로직은 지우고 그안에 mounted()를 넣어서 재활용</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/8c8fb45ca96ff38af31815fb089ea74931b111b7">diff check</a></p>
</blockquote>]]></content><author><name>FE Developer</name></author><category term="vue-lv3" /><category term="vue" /><summary type="html"><![CDATA[Vue news]]></summary></entry><entry><title type="html">11 - async &amp;amp; await를 이용한 비동기 처리</title><link href="http://localhost:4000/vue-lv3/vue-advanced11/" rel="alternate" type="text/html" title="11 - async &amp;amp; await를 이용한 비동기 처리" /><published>2022-04-27T00:00:00+09:00</published><updated>2022-04-27T00:00:00+09:00</updated><id>http://localhost:4000/vue-lv3/vue-advanced11</id><content type="html" xml:base="http://localhost:4000/vue-lv3/vue-advanced11/"><![CDATA[<h2 id="111-자바스크립트-비동기-처리-패턴의-발전-과정">11.1 자바스크립트 비동기 처리 패턴의 발전 과정</h2>

<p>비동기 처리에 대해서 모르고 자바스크립트로 어떤 데이터를 받아와서 처리하려고 할때 일반적인 사고라면 아래와 같이 작성할 것이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">domain.com/id</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// #1 domain.com/id 로 get 요청을 보내서 결과값을 id에 담고</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">id</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">john</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// #2 그 id가 john이면</span>
    <span class="kd">var</span> <span class="nx">products</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">domain.com/products</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// #3 domain.com/products 로 get 요청을 받아서 결과값을 products에 담아라</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>그러나 위와 같이 코드를 짠다면 <code class="language-plaintext highlighter-rouge">var id = $.get('domain.com/id');</code> 여기서 데이터 요청을 보내고 받아오기 전에 아래줄이 실행이 되기때문에, 이것에 대해 콜백 처리가 필요하다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="nx">$</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">domain.com/id</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">id</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">john</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">domain.com/products</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">products</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">products</span><span class="p">);</span>
        <span class="p">});</span>
    <span class="p">}</span>
<span class="p">});</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>이것을 Promise를 적용해보면,(대충 아래같은 식으로 코드 작성)</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="rouge-code"><pre><span class="c1">// $.get('domain.com/id', function(id) {</span>
<span class="c1">//     if (id === 'john') {</span>
<span class="c1">//         $.get('domain.com/products', function(products) {</span>
<span class="c1">//             console.log(products);</span>
<span class="c1">//         });</span>
<span class="c1">//     }</span>
<span class="c1">// });</span>
<span class="kd">function</span> <span class="nx">getId</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">domain.com/id</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">resolve</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
        <span class="p">})</span>
    <span class="p">})</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">getProduct</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">id</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">john</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">domain.com/products</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">products</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">products</span><span class="p">);</span><span class="o">\</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(...)</span>
        <span class="p">});</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">logProduct</span><span class="p">(</span><span class="nx">products</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">products</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">getId</span><span class="p">()</span> <span class="c1">// #1 id를 가져오면</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">getProduct</span><span class="p">())</span> <span class="c1">// #2 product를 가져오고</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">logProduct</span><span class="p">())</span> <span class="c1">// #3 콘솔에 product를 찍기</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="112-async--await-문법-소개">11.2 async &amp; await 문법 소개</h2>

<p>async &amp; await는 자바스크립트 비동기 처리 패턴의 최신 문법.<br />
Promise와 Callback에서 주는 단점들을 해결 하고 자바스크립트의 비동기전 사고 방식에서 벗어나 동기적(절차적)으로 코드를 작성할 수 있게 도와준다.</p>

<p>기본문법</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="k">async</span> <span class="kd">function</span> <span class="nx">fetchData</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">await</span> <span class="nx">getUserList</span><span class="p">();</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>async함수는 함수의 앞에 <code class="language-plaintext highlighter-rouge">async</code>를 붙여주고 함수의 내부 로직 중 비동기 처리 로직 앞에 <code class="language-plaintext highlighter-rouge">await</code>를 붙여주면 된다.<br />
좀 더 정확하게 말하면 <code class="language-plaintext highlighter-rouge">Promise</code>객체를 반환하는 API 호출 함수 앞에 <code class="language-plaintext highlighter-rouge">await</code>를 붙인다.</p>

<p>예제를 좀 더 살펴보면</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">fetchData</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">list</span> <span class="o">=</span> <span class="nx">getUserList</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">list</span><span class="p">);</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">getUserList</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">userList</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">user1</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">user2</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">user3</span><span class="dl">'</span><span class="p">];</span>
        <span class="nx">resolve</span><span class="p">(</span><span class="nx">userList</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>

<span class="nx">fetchData</span><span class="p">()</span>
<span class="c1">// Promise {&lt;fulfilled&gt;: Array(3)}</span>
<span class="c1">// undefined</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>여기에 async await를 적용하면</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="k">async</span> <span class="kd">function</span> <span class="nx">fetchData1</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">list</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">getUserList1</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">list</span><span class="p">);</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">getUserList1</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">userList</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">user1</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">user2</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">user3</span><span class="dl">'</span><span class="p">];</span>
        <span class="nx">resolve</span><span class="p">(</span><span class="nx">userList</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>

<span class="nx">fetchData</span><span class="p">()</span>
<span class="c1">// (3) ['user1', 'user2', 'user3']</span>
<span class="c1">// Promise {&lt;fulfilled&gt;: Array(3)}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="113-async--await-예제-소개">11.3 async &amp; await 예제 소개</h2>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/0737fe51e0aa5b5727af0e46305a249db996c090">diff check</a></p>
</blockquote>

<h2 id="114-async-await-예제-실습">11.4 async await 예제 실습</h2>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/8d9fd89a99dcb30b8a86595f38fcbaa4deb9c884">diff check</a></p>
</blockquote>

<h2 id="115-async-await-에러-처리-방법과-공통화-함수-작성-방법">11.5 async await 에러 처리 방법과 공통화 함수 작성 방법</h2>

<ul>
  <li>try / catch 문으로 에러 처리</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/ebb2dccbdc4c56a96ce2c6a5fe335fd1a1be4c33">diff check</a></p>
</blockquote>

<h2 id="116-async-함수를-이용한-코드-리팩토링">11.6 async 함수를 이용한 코드 리팩토링</h2>

<ul>
  <li>promise를 반환하는 함수나 api앞에 await를 붙여줌, const response -&gt; promise방식에서 then의 response를 받는것과 같음</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/4f9bd67dbbea1fca881dadbf1dccab1cd31d2c13">diff check</a></p>
</blockquote>]]></content><author><name>FE Developer</name></author><category term="vue-lv3" /><category term="vue" /><category term="async" /><category term="await" /><category term="promise" /><category term="callback" /><summary type="html"><![CDATA[Vue news]]></summary></entry><entry><title type="html">9 - Mixin과 하이 오더 컴포넌트</title><link href="http://localhost:4000/vue-lv3/vue-advanced9/" rel="alternate" type="text/html" title="9 - Mixin과 하이 오더 컴포넌트" /><published>2022-04-26T00:00:00+09:00</published><updated>2022-04-26T00:00:00+09:00</updated><id>http://localhost:4000/vue-lv3/vue-advanced9</id><content type="html" xml:base="http://localhost:4000/vue-lv3/vue-advanced9/"><![CDATA[<h2 id="91-컴포넌트-재활용-방법-및-재활용할-포인트-소개">9.1 컴포넌트 재활용 방법 및 재활용할 포인트 소개</h2>

<ul>
  <li>dispatch를 분기처리 하기 위해 ListItem에 있던 dispatch를 각각의 view파일로 옮김</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/e605bd1e36873caf64ba40af860edd802a96f8d8">diff check</a></p>
</blockquote>

<h2 id="92-이벤트-버스를-이용한-스피너-컴포넌트-구현">9.2 이벤트 버스를 이용한 스피너 컴포넌트 구현</h2>

<ul>
  <li>export 스타일에 따라서 import하는 방법이 달라진다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="c1">// default의 경우는 아무 이름이나 정의해서 사용할 수 있다.</span>
<span class="c1">// bus.js</span>
<span class="k">export</span> <span class="k">default</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">();</span>
<span class="c1">// App.vue</span>
<span class="k">import</span> <span class="nx">bus</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./bus.js</span><span class="dl">'</span> <span class="c1">// bus나 bus1 이나 아무거나 가능</span>

<span class="c1">// bus.js</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">bus</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">();</span>
<span class="c1">// App.vue</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">bus</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./bus.js</span><span class="dl">'</span> <span class="c1">// 먼저 정의해준 변수명을 {}안에 넣어서 사용</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/c644bff38ffe7391be6e49d3c2429ed3f5882615">diff check</a></p>
</blockquote>

<h2 id="93-스피너-실행-및-종료-시점-알아보기">9.3 스피너 실행 및 종료 시점 알아보기</h2>

<ul>
  <li>actions.js에서 response를 return 하면 NewsView에서 dispatch에 .then으로 프로미스 체이닝이 가능</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/c139797550d73804d916ed64d4f2b5000d21910d">diff check</a></p>
</blockquote>

<h2 id="94-하이-오더-컴포넌트hoc-소개-및-구현">9.4 하이 오더 컴포넌트(HOC) 소개 및 구현</h2>

<p>컴포넌트의 로직을 재사용하기 위한 기술 하이 오더 컴포넌트</p>
<ul>
  <li>CreateListView.js가 하이오더컴포넌트</li>
  <li>기존에 있었던 컴포넌트의 위에 하나의 컴포넌트가 더 생성됨</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/a58c83719b1b8befd5ef9f213e964e3135aa219f">diff check</a></p>
</blockquote>

<h2 id="95-하이-오더-컴포넌트에서-사용할-listview-컴포넌트-구현">9.5 하이 오더 컴포넌트에서 사용할 ListView 컴포넌트 구현</h2>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/ddc1c29c3b0bbae9caf83abcc0df58a143e9f839">diff check</a></p>
</blockquote>

<h2 id="96-하이-오더-컴포넌트가-적용된-앱-구조-설명-및-흐름-정리">9.6 하이 오더 컴포넌트가 적용된 앱 구조 설명 및 흐름 정리</h2>

<ul>
  <li>router/index.js에서 <code class="language-plaintext highlighter-rouge">component: createListView('NewsView'),</code>으로 pagename을 넘기고</li>
  <li>CreateListView에서 name으로 받고 재사용하는 로직들을 created()에 넣어줌</li>
  <li>spinner를 켜고 끄는 로직까지 같이 넣어줌</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/2af588dd119046a7cf25ab8fb3c253cd95318408">diff check</a></p>
</blockquote>

<h2 id="97-mixin의-개요와-활용처-그리고-hoc와의-차이점">9.7 Mixin의 개요와 활용처 그리고 HOC와의 차이점</h2>

<p>Mixins</p>
<ul>
  <li>여러 컴포넌트간에 공통으로 사용하고 있는 로직 기능들을 재사용하는 방법</li>
  <li>믹스인안에 정의할 수 있는 재사용 로직은 <code class="language-plaintext highlighter-rouge">data, methods, created</code> 등과 같은 컴포넌트 옵션</li>
  <li>hoc는 중간에 컴포넌트가 하나 더 생기므로 레벨이 깊어져서 통신에 불편함이 생김</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kd">var</span> <span class="nx">HelloMixins</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// 컴포넌트 옵션 (data, methods, created 등)\</span>
<span class="p">};</span>

<span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
    <span class="na">mixins</span><span class="p">:</span> <span class="p">[</span><span class="nx">HelloMixins</span><span class="p">]</span>
<span class="p">})</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>위와 같이 믹스인을 주입할 컴포넌트에 <code class="language-plaintext highlighter-rouge">mixins</code> 속성을 선언하고 <code class="language-plaintext highlighter-rouge">[]</code> 배열안에 주입할 믹스인들을 추가</p>

<p>예시</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="kd">var</span> <span class="nx">DialogMixin</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="na">dialog</span><span class="p">:</span> <span class="kc">false</span>
        <span class="p">}</span>
    <span class="p">},</span>
    <span class="na">methods</span><span class="p">:</span> <span class="p">{</span>
        <span class="nx">showDialog</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">dialog</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
        <span class="p">},</span>
        <span class="nx">closeDialog</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">dialog</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">DialogMixin</code>에 다이얼로그의 표시 상태를 나타내는 <code class="language-plaintext highlighter-rouge">dialog</code>데이터와 다이얼로그를 열거나 닫는 메서드 <code class="language-plaintext highlighter-rouge">showDialog()</code>, <code class="language-plaintext highlighter-rouge">closeDialog()</code> 정의</p>

<p>재사용</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="c">&lt;!-- LoginForm.vue --&gt;</span>
<span class="nt">&lt;script&gt;</span>
    <span class="k">import</span> <span class="p">{</span> <span class="nx">DialogMixin</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./mixins.js</span><span class="dl">'</span><span class="p">;</span>

    <span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
        <span class="na">mixins</span><span class="p">:</span> <span class="p">[</span> <span class="nx">DialogMixin</span> <span class="p">],</span>
        <span class="na">methods</span><span class="p">:</span> <span class="p">{</span>
            <span class="nx">submitForm</span><span class="p">()</span> <span class="p">{</span>
                <span class="nx">axios</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">login</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
                    <span class="na">id</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
                    <span class="na">pw</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">pw</span>
                <span class="p">})</span>
                <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">closeDialog</span><span class="p">())</span>
                <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">error</span><span class="p">));</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="nt">&lt;/script&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="98-mixin-적용-후-hoc-구조와-비교">9.8 Mixin 적용 후 HOC 구조와 비교</h2>

<ul>
  <li>hoc는 AskView와 ListItem 사이에 ListView 컴포넌트가 생성되어 레벨이 더 깊어짐</li>
  <li>mixins는 새로 생성되는 컴포넌트가 없음</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/0bfe7e56eb6c5acc7258b0534f07ecaa41e3f639">diff check</a></p>
</blockquote>]]></content><author><name>FE Developer</name></author><category term="vue-lv3" /><category term="vue" /><category term="mixin" /><category term="hoc" /><summary type="html"><![CDATA[Vue news]]></summary></entry><entry><title type="html">7 - 리스트 아이템 컴포넌트 공통화</title><link href="http://localhost:4000/vue-lv3/vue-advanced7/" rel="alternate" type="text/html" title="7 - 리스트 아이템 컴포넌트 공통화" /><published>2022-04-26T00:00:00+09:00</published><updated>2022-04-26T00:00:00+09:00</updated><id>http://localhost:4000/vue-lv3/vue-advanced7</id><content type="html" xml:base="http://localhost:4000/vue-lv3/vue-advanced7/"><![CDATA[<h2 id="71-컴포넌트-공통화-리팩토링">7.1 컴포넌트 공통화 리팩토링</h2>

<ul>
  <li>각 view페이지 스타일링</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/e889a7c6810e06fdee1f7a455cf05c01a41c13c5">diff check</a></p>
</blockquote>

<h2 id="72-공통-컴포넌트-listitem-제작-및-실습-안내">7.2 공통 컴포넌트 ListItem 제작 및 실습 안내</h2>

<ul>
  <li>components폴더에 ListItem.vue파일 생성 : 각각의 페이지 컴포넌트가 들고있는 데이터 패치와 스타일링등을 다 들고옴</li>
  <li>NewsView.vue에 ListItem.vue import해서 컴포넌트로 넣어줌</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/998719e87d71186f1059ae6b391e714f202d703a">diff check</a></p>
</blockquote>

<h2 id="73-공통-컴포넌트-구현1---페이지별-데이터-분기">7.3 공통 컴포넌트 구현(1) - 페이지별 데이터 분기</h2>

<ul>
  <li>라우터에 있는 정보들로 분기처리 가능</li>
  <li>router/index.js에 각 라우트 속성에 name값 정의</li>
  <li>ListItem.vue에서 각 라우트 name으로 들어올때 actions의 비동기처리 실행</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/da772aa9b27e420163229272518d9b2b8ca86297">diff check</a></p>
</blockquote>

<h2 id="74-공통-컴포넌트-구현2---computed-속성">7.4 공통 컴포넌트 구현(2) - computed 속성</h2>

<ul>
  <li>computed 사용해서 각 페이지 api 뿌리기</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/5f8d20a13ceea72f3e6cd31eda7ce6c88194e6f0">diff check</a></p>
</blockquote>

<h1 id="75-공통-컴포넌트-구현3---template-속성과-v-if-디렉티브-활용">7.5 공통 컴포넌트 구현(3) - template 속성과 v-if 디렉티브 활용</h1>

<ul>
  <li><code class="language-plaintext highlighter-rouge">&lt;template v-if=""&gt;&lt;/template&gt;</code> 가상의 태그를 넣고 태그가 vue 내부적으로 분기처리를 해서 v-if안에 해당되는 조건이 있으면 뿌려줌</li>
  <li>태그 안에 바로 v-if, v-else 사용 가능</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/c96efb9243421ea7d663f605399b0d2b0e2124b2">diff check</a></p>
</blockquote>]]></content><author><name>FE Developer</name></author><category term="vue-lv3" /><category term="vue" /><category term="공통화" /><summary type="html"><![CDATA[Vue news]]></summary></entry><entry><title type="html">6 - 라우터 실전</title><link href="http://localhost:4000/vue-lv3/vue-advanced6/" rel="alternate" type="text/html" title="6 - 라우터 실전" /><published>2022-04-26T00:00:00+09:00</published><updated>2022-04-26T00:00:00+09:00</updated><id>http://localhost:4000/vue-lv3/vue-advanced6</id><content type="html" xml:base="http://localhost:4000/vue-lv3/vue-advanced6/"><![CDATA[<h2 id="61-동적-라우트-매칭-원리-및-적용">6.1 동적 라우트 매칭 원리 및 적용</h2>

<p>Dynamic Route Matching</p>
<ul>
  <li>파라미터에 값을 넘겨주고 그 정보를 가지고 페이지를 이동한다.</li>
  <li>router에 UserView.vue 컴포넌트 추가</li>
  <li>아이디를 클릭했을때 그 값을 어떻게 넘겨서 각 회원 상세페이지를 보여줄까..? <code class="language-plaintext highlighter-rouge">path에 /user/:id</code></li>
  <li><code class="language-plaintext highlighter-rouge">router-link</code>를 사용한다.</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/320803e3759da42445e15c713f151a50e2fb46e0">diff check</a></p>
</blockquote>

<h2 id="62-라우터-params을-이용한-user-상세-페이지-구현">6.2 라우터 params을 이용한 User 상세 페이지 구현</h2>

<p>news라우트에서 user 이름 클릭시 user 정보 상세페이지 구현</p>
<ul>
  <li>동적라우트 매칭으로 params를 받아왔고 그것을 이용해서 api를 호출</li>
  <li>UserView.vue에서 user정보 가져오는 api를 호출 할 수도 있지만 스토어를 사용</li>
</ul>

<ol>
  <li>api/index.js &gt; fetchUserInfo에 user정보 가져오는 로직 넣기</li>
  <li>NewsView에서 클릭한 user이름으로 /user/${item.user} router-link를 통해서 이동</li>
  <li>router/index.js에 라우트 등록해주기</li>
  <li>UserView에서는 $route안의 params.id값을 const userName에 넣어주고 this.$store.dispatch를 통해서 actions에 있는 FETCH_USER에 접근하고 두번째 인자로 클릭한 username을 넘겨준다.</li>
  <li>actions(비동기처리)에서 context를 첫번째 인자로 넘겨서 mutations에 접근할 수 있도록 하고 UserView에서 넘겨받은 username을 받도록 두번째 인자에 name을 넣어준다.</li>
  <li>user정보 가져오는 함수 fetchUserInfo를 실행하고 인자로 name을 넘겨준다.</li>
  <li>commit으로 SET_USER를 실행한다.</li>
  <li>mutations에서 state에 접근해서 user에 비동기로 받아온 데이터를 넣어서 state를 바꾼다.</li>
  <li>UserView에서 화면에 데이터를 뿌려준다.</li>
</ol>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/a2d462fc29978f9f39e16f5bbc7c46d0d0ebf947">diff check</a></p>
</blockquote>

<h2 id="63-질문-상세-페이지-실습-풀이-및-오류-디버깅">6.3 질문 상세 페이지 실습 풀이 및 오류 디버깅</h2>

<ol>
  <li>ItemView.vue 생성하고 router/index.js에 라우트 등록</li>
  <li>AskView.vue에 router-link등록하기 &gt; <code class="language-plaintext highlighter-rouge">/item/${item.id}</code></li>
  <li>ItemView에 created에서 itemId 변수에 this.$route.params.id를 넣어준다.(콘솔로 itemId를 찍어봐서 잘 들어오는지 확인해보기)</li>
  <li>actions에 FETCH_ITEM 선언하고 이 액션을 호출했을때 불러올 api함수(fetchItemInfo)를 api/index.js에 선언해준다.</li>
  <li>api에 선언한 함수(fetchItemInfo)를 acions상단에 import해주고 FETCH_ITEM안에 실행시켜준다.</li>
  <li>ItemView에서 created 됐을때 dispatch로 actions의 FETCH_ITEM에 연결해서 api를 호출하도록 하고, 두번째 인자로 params.id를 넣은 변수 itemId를 넣어준다.</li>
  <li>다시 actions의 FETCH_ITEM에 ItemView에서 넘겨준 itemId를 여기서는 id(두번째 인자)로 받는다.</li>
  <li>actions에 실행한 api함수(fetchItemInfo)가 프로미스 객체이므로 then, catch문을 받을 수 있다.</li>
  <li>then에서 commit으로 SET_ITEM(mutations)을 연결한다.</li>
  <li>mutations에서 SET_ITEM을 선언하고 첫번째 인자로 state를 넣고 actions에서 비동기처리로 데이터를 data에 받아와서 mutations의 두번째 인자에 item이라고 정의해서 넣어준다.</li>
  <li>mutations에서 두번째 인자로 item을 넣었는데 이를 받아줄 item을 store/index.js의 state에서 정의 하지 않았으므로 가서 정의해준다.</li>
</ol>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/5c877f557e5f59afffe38ce8a76b2926f3c8d2e7">diff check</a></p>
</blockquote>

<h2 id="64-질문-상세-페이지-스타일링-및-v-html-디렉티브-사용법-소개">6.4 질문 상세 페이지 스타일링 및 v-html 디렉티브 사용법 소개</h2>

<p>불러온 데이터를 화면에 표시</p>

<ul>
  <li>화면에 뿌려주는 항목들을 mapGetters 헬퍼함수를 이용해서 뿌리기</li>
  <li>mapGetters를 import한다.</li>
  <li>store/index.js에 getter추가</li>
  <li>ItemView로 돌아와서 computed 속성에 …mapGetters([‘fetchedItem’]) 정의하고 템플릿영역에서 fetchedItem으로 뿌려줌</li>
  <li>content부분이 html태그를 그대로 들고와서 화면에 태그가 노출됨 &gt; v-html=”fetchedItem.content”</li>
  <li><a href="https://v2.vuejs.org/v2/api/?redirect=true#v-html">v-html API 문서</a></li>
  <li><a href="https://v2.vuejs.org/v2/guide/syntax.html?redirect=true#Raw-HTML">v-html과 데이터 바인딩 차이점 문서</a></li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/962f263adf8b32e755d7701d1a6635e76f7a9862">diff check</a></p>
</blockquote>

<h2 id="65-라우터-트랜지션">6.5 라우터 트랜지션</h2>

<p>특정 링크로 이동할때 바로 화면이 바뀌는데 뷰 내부적으로 제공하는 트랜지션 api로 부드러운 화면 전환하기</p>
<ul>
  <li><a href="https://router.vuejs.org/guide/advanced/transitions.html#per-route-transition">라우터 트랜지션 문서</a></li>
  <li><a href="https://v2.vuejs.org/v2/guide/transitions.html?redirect=true">뷰 트랜지션 문서</a></li>
  <li>라우터 뷰를 트랜지션 태그로 감싸면 트랜지션 이펙트 사용 가능</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/4687eb2d5bf41f3be1a687a7ec989bf34bbb80ca">diff check</a></p>
</blockquote>]]></content><author><name>FE Developer</name></author><category term="vue-lv3" /><category term="vue" /><category term="router" /><summary type="html"><![CDATA[Vue news]]></summary></entry><entry><title type="html">5 - 스토어 구현</title><link href="http://localhost:4000/vue-lv3/vue-advanced5/" rel="alternate" type="text/html" title="5 - 스토어 구현" /><published>2022-04-26T00:00:00+09:00</published><updated>2022-04-26T00:00:00+09:00</updated><id>http://localhost:4000/vue-lv3/vue-advanced5</id><content type="html" xml:base="http://localhost:4000/vue-lv3/vue-advanced5/"><![CDATA[<h2 id="51-vuex-설치-및-vuex가-적용된-앱-구조-소개">5.1 Vuex 설치 및 Vuex가 적용된 앱 구조 소개</h2>

<ul>
  <li>vuex를 적용해서 api에서 바로 불러오는게 아니고 vuex의 state에 api를 담아서 화면에 표시</li>
  <li><code class="language-plaintext highlighter-rouge">yarn add vuex@3.4.0</code>로 vuex 라이브러리 설치</li>
</ul>

<h2 id="52-vuex-모듈화-및-state-적용">5.2 Vuex 모듈화 및 state 적용</h2>

<ul>
  <li>store폴더 생성후 그안에 작성</li>
  <li>vuex는 플러그인 형태로 제공 되기 때문에 <code class="language-plaintext highlighter-rouge">Vue.use(Vuex);</code>로 사용</li>
  <li>vuex는 상태관리 라이브러리이다. 상태라는 것은 여러 컴포넌트간에 공유되는 데이터 속성</li>
  <li>NewsView가 users라는 데이터를 다른 컴포넌트에 아직 공유하고 있지 않은 상태인데 만약 다른 컴포넌트에서 users를 뿌려줘야 하는 상황이라면 공유해서 사용해야 한다.</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/2051c3290d123a0ba6087c52152b824b42d17b83">diff check</a></p>
</blockquote>

<h2 id="53-newsview에-actions와-mutations-적용">5.3 NewsView에 actions와 mutations 적용</h2>

<ul>
  <li>비동기 호출은 전부 action에서 하고 받아온 데이터를 mutations를 통해서 state에 넣어주게 구분되어 있다.</li>
  <li>actions에서 비동기 호출을 하고 첫번째 인자로 context를 주면 mutations에 접근 할 수 있다.</li>
  <li>context.commit(‘SET_NEWS’, response.data)</li>
  <li>mutations에서는 첫번째 인자로 state를 넣어주고 두번째 인자에는 actions에서 넘겨준 response.data값이 들어간다.</li>
  <li>컴포넌트에서 actions에 접근은 dispatch로 한다.</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/f1d13f91ee4672a0a111094a3833f53b230626a0">diff check</a></p>
</blockquote>

<h2 id="54-jobview에-스토어-적용">5.4 JobView에 스토어 적용</h2>

<ul>
  <li>Destructuring 사용해서 넣어보기</li>
  <li><a href="https://joshua1988.github.io/es6-online-book/destructuring.html">Dstructuring 설명</a></li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/74c99efcdd9b849abe927365fbe26b523641d03f">diff check</a></p>
</blockquote>

<h2 id="55-map-헬퍼-함수를-이용한-askview-풀이">5.5 map 헬퍼 함수를 이용한 AskView 풀이</h2>

<ul>
  <li>mapState와 mapGetters는 computed 속성에서 사용</li>
  <li>this.$store.state.ask; 이렇게 가져오는것은 더 길어지면 파악하기 힘들기 때문에 헬퍼 함수를 사용하면 편함</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/f629a7e9aba8a99e6930bfbc528954350b83d02c">diff check</a></p>
</blockquote>

<h2 id="56-스토어-속성-모듈화">5.6 스토어 속성 모듈화</h2>

<ul>
  <li>프로젝트가 커질 수록 store가 길어지니까 모듈화해서 나눠놓는게 좋다.</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/6e92aae19f48ffb976010166bf7e4a2794471ec6">diff check</a></p>
</blockquote>]]></content><author><name>FE Developer</name></author><category term="vue-lv3" /><category term="vue" /><category term="store" /><category term="vuex" /><summary type="html"><![CDATA[Vue news]]></summary></entry><entry><title type="html">4 - API 구현</title><link href="http://localhost:4000/vue-lv3/vue-advanced4/" rel="alternate" type="text/html" title="4 - API 구현" /><published>2022-04-26T00:00:00+09:00</published><updated>2022-04-26T00:00:00+09:00</updated><id>http://localhost:4000/vue-lv3/vue-advanced4</id><content type="html" xml:base="http://localhost:4000/vue-lv3/vue-advanced4/"><![CDATA[<h2 id="41-axios를-이용한-api-호출">4.1 axios를 이용한 api 호출</h2>

<p><a href="https://github.com/tastejs/hacker-news-pwas/blob/master/docs/api.md">해커뉴스 api</a></p>

<ul>
  <li>views 폴더에는 페이지 라우팅에 관련된 정보들만 들어가는게 좋다.</li>
  <li>설계가 바뀌거나 할때 유연하게 대처하려면 데이터를 불러온다던지 비즈니스 로직들은 별도의 컴포넌트로 등록하는게 좋다.</li>
  <li>우선 views안에 바로 넣고 나중에 수정할 예정</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/1e9ad6983ef8359e0aed961f6bdd567be08ebb33">diff check</a></p>
</blockquote>

<h2 id="42-axios의-api-함수-구조화-방법-및-실습-안내">4.2 axios의 api 함수 구조화 방법 및 실습 안내</h2>

<ul>
  <li>라이브러리를 각각의 파일에서 불러와야하고, 공통된 로직들이 계속 파일마다 불러와야 하는데 공통화시켜서 사용</li>
  <li>data를 요청할때는 created나 beforeMount에서 많이 함 - 마운트 되고나서 데이터를 요청하면 데이터를 받아와서 데이터 배열에 넣으면 뷰의 리액티비티 시스템때문에 화면이 다시 그려짐</li>
  <li>return axios.get = return new Promise가 같은 말이고 이것은 promise가 떨어진다는건데 -&gt; 뒤에 .then()을 연결할 수 있다는 뜻</li>
</ul>

<p>api/index.js</p>
<ul>
  <li>정의한 함수를 다른데서 import로 쓸 수 있도록 export해줘야 함</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/06ce74056f9d3f9d2759451e31df0e6f2fe637fd">diff check</a></p>
</blockquote>

<h2 id="43-자바스크립트-this-4가지와-화살표-함수의-this">4.3 자바스크립트 this 4가지와 화살표 함수의 this</h2>

<p>this
가장 최상단에는 window가 있는데 콘솔창에 this를 그냥 찍어보면 window를 가리킨다.<br />
함수안에 console.log(this)를 선언하고 함수를 실행하면 window를 가리킨다. 기본적으로 this는 전역을 향한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">// 전역을 가리킴</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">sum</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span> <span class="c1">// window객체와, 30이 찍힘</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>생성자 함수로 인스턴스를 생성했을 때는</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">Vue</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">// 함수 자체를 가리킴</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">el</span> <span class="o">=</span> <span class="nx">el</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">new</span> <span class="nx">Vue</span><span class="p">(</span><span class="dl">'</span><span class="s1">#app</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// Vue{}, Vue{el: '#app'} 이 찍힘</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>비동기 처리에서의 this</p>
<ul>
  <li>호출 전에는 VueComponent</li>
  <li>호출 후에는 undefined</li>
</ul>

<p>기본적으로 비동기 호출 자체는 호출되는 시점에서 기존에 있었던 this를 벗어난 새로운 this가 생김<br />
그래서 함수밖과 함수안의 this가 다르기 때문에 함수 밖에서 변수에 this를 담아서 바인딩 해줘야 한다.<br />
그러나 화살표 함수를 사용하면 this가 호출되는 위치의 this를 가져온다.</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/380ade3516f7e36d2ca98e7ded01f671a0b79090">diff check</a></p>
</blockquote>

<h2 id="44-자바스크립트-비동기-처리1---callback">4.4 자바스크립트 비동기 처리(1) - Callback</h2>

<p>Callback
어떤 특정 함수나 기능이 종료되는 시점에 실행 되는 함수<br />
자바스크립트는 함수를 인자로 넘길 수 있는데 인자로 전달되는 함수를 보통 콜백함수라고 표현</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/6a724932fde0983c7f219e975add4cf036386bf3">diff check</a></p>
</blockquote>

<h2 id="45-자바스크립트-비동기-처리2---promise">4.5 자바스크립트 비동기 처리(2) - Promise</h2>

<p>새로운 비동기 처리 패턴 promise</p>

<ul>
  <li><a href="https://joshua1988.github.io/web-development/javascript/promise-for-beginners/">프로미스 쉽게 이해하기</a></li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/a6d0d624a94196cf3011115cc93108125248260a">diff check</a></p>
</blockquote>]]></content><author><name>FE Developer</name></author><category term="vue-lv3" /><category term="vue" /><category term="api" /><category term="axios" /><category term="arrow function" /><category term="비동기처리" /><summary type="html"><![CDATA[Vue news]]></summary></entry><entry><title type="html">3 - 라우터 기본</title><link href="http://localhost:4000/vue-lv3/vue-advanced3/" rel="alternate" type="text/html" title="3 - 라우터 기본" /><published>2022-04-26T00:00:00+09:00</published><updated>2022-04-26T00:00:00+09:00</updated><id>http://localhost:4000/vue-lv3/vue-advanced3</id><content type="html" xml:base="http://localhost:4000/vue-lv3/vue-advanced3/"><![CDATA[<h2 id="31-라우터-설치-및-라우터-구현">3.1 라우터 설치 및 라우터 구현</h2>

<p><code class="language-plaintext highlighter-rouge">yarn add vue-router@3.2.0</code>로 설치하기(vue2는 vue-router3 버전사용, vue3는 vue-router4 버전사용)</p>

<p>package.json의 dependencies에 추가됨(배포할때도 포함 되어야 하는 라이브러리들)</p>

<p>라우터 설정을 main.js에 할 수도 있지만, main.js는 기본적으로 애플리케이션의 설정들(플러그인, 라이브러리, 구조들을 파악)의 청사진으로 보면 됨<br />
그래서 라우터는 따로 폴더를 빼줌</p>

<h2 id="32-router-view를-이용한-라우팅-컴포넌트-표시">3.2 router-view를 이용한 라우팅 컴포넌트 표시</h2>

<p>App.vue에 <code class="language-plaintext highlighter-rouge">&lt;router-view&gt;&lt;/router-view&gt;</code>로 라우터 컴포넌트 보여줌</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/7e9afa13197fa14cfbffc011aa9efd13429f1053">diff check</a></p>
</blockquote>

<h2 id="33-redirect-속성과-router-link">3.3 redirect 속성과 router-link</h2>

<p>첫 화면에서 빈화면이 나오는데 redirect속성으로 원하는 라우터로 연결 가능<br />
라우터 이동 링크 버튼도 추가</p>

<p>컴포넌트 등록할때는 스크립트단에서는 단어마다 첫글자 대문자로 연결<br />
컴포넌트를 태그에서 등록할때는 단어사이에 하이픈으로 연결</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/d0de793092e5dae58d78f1027b9885d3b5ca22a6">diff check</a></p>
</blockquote>

<h2 id="34-toolbar의-라우터-링크-스타일링">3.4 ToolBar의 라우터 링크 스타일링</h2>

<p>vue cli scss 설정</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/affc65f482fa6cd8af2060988aa7ca09e9730e30">diff check</a></p>
</blockquote>

<h2 id="35-라우터-폴더-작명-팁과-라우터-mode-안내">3.5 라우터 폴더 작명 팁과 라우터 mode 안내</h2>

<p>mode: ‘history’, // 해쉬값 제거</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/f7fb20e121bfa69ff9cd80a2537dfba3345e7bd4">diff check</a></p>
</blockquote>]]></content><author><name>FE Developer</name></author><category term="vue-lv3" /><category term="vue" /><category term="router" /><summary type="html"><![CDATA[Vue news]]></summary></entry><entry><title type="html">2 - 프로젝트 셋업</title><link href="http://localhost:4000/vue-lv3/vue-advanced2/" rel="alternate" type="text/html" title="2 - 프로젝트 셋업" /><published>2022-04-26T00:00:00+09:00</published><updated>2022-04-26T00:00:00+09:00</updated><id>http://localhost:4000/vue-lv3/vue-advanced2</id><content type="html" xml:base="http://localhost:4000/vue-lv3/vue-advanced2/"><![CDATA[<h2 id="21-vue-cli로-프로젝트-생성-및-eslint-로그-확인">2.1 Vue CLI로 프로젝트 생성 및 ESLint 로그 확인</h2>

<p><code class="language-plaintext highlighter-rouge">vue create vue-news</code>로 프로젝트 생성</p>

<p><code class="language-plaintext highlighter-rouge">Vue 2</code>선택후 완료 되면 폴더 경로 들어가서 서버 실행하기</p>

<h2 id="22-eslint-도구-소개와-사용해야-하는-이유">2.2 ESLint 도구 소개와 사용해야 하는 이유?</h2>

<p>ESLint : javascript 문법 검사기(보조도구)
javascript에서 ;(세미콜론)을 찍지 않더라도 자바스크립트 해석기에서는 마지막에 세미콜론을 넣어줌<br />
여기서 ESLint는 세미콜론을 찍게 유도함<br />
예를들어서</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="c1">// 이런식이면 문제 없지만</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="o">===</span> <span class="mi">10</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">a는 10</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// 자바스크립트 해석기가 어디서 세미콜론을 찍어야 할지 모를때</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="o">===</span> <span class="mi">10</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">a는 10</span><span class="dl">'</span><span class="p">)</span> <span class="nx">b</span><span class="p">()</span> <span class="nx">c</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>]]></content><author><name>FE Developer</name></author><category term="vue-lv3" /><category term="vue" /><summary type="html"><![CDATA[Vue news]]></summary></entry></feed>
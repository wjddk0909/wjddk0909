<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-05-01T03:07:55+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">FE개발자를 꿈꾸다</title><subtitle>An amazing website.</subtitle><author><name>FE Developer</name></author><entry><title type="html">6 - 라우터 실전</title><link href="http://localhost:4000/vue-lv3/vue-advanced6/" rel="alternate" type="text/html" title="6 - 라우터 실전" /><published>2022-04-26T00:00:00+09:00</published><updated>2022-04-26T00:00:00+09:00</updated><id>http://localhost:4000/vue-lv3/vue-advanced6</id><content type="html" xml:base="http://localhost:4000/vue-lv3/vue-advanced6/"><![CDATA[<h2 id="61-동적-라우트-매칭-원리-및-적용">6.1 동적 라우트 매칭 원리 및 적용</h2>

<p>Dynamic Route Matching</p>
<ul>
  <li>파라미터에 값을 넘겨주고 그 정보를 가지고 페이지를 이동한다.</li>
  <li>router에 UserView.vue 컴포넌트 추가</li>
  <li>아이디를 클릭했을때 그 값을 어떻게 넘겨서 각 회원 상세페이지를 보여줄까..? <code class="language-plaintext highlighter-rouge">path에 /user/:id</code></li>
  <li><code class="language-plaintext highlighter-rouge">router-link</code>를 사용한다.</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/320803e3759da42445e15c713f151a50e2fb46e0">diff check</a></p>
</blockquote>

<h2 id="62-라우터-params을-이용한-user-상세-페이지-구현">6.2 라우터 params을 이용한 User 상세 페이지 구현</h2>

<p>news라우트에서 user 이름 클릭시 user 정보 상세페이지 구현</p>
<ul>
  <li>동적라우트 매칭으로 params를 받아왔고 그것을 이용해서 api를 호출</li>
  <li>UserView.vue에서 user정보 가져오는 api를 호출 할 수도 있지만 스토어를 사용</li>
</ul>

<ol>
  <li>api/index.js &gt; fetchUserInfo에 user정보 가져오는 로직 넣기</li>
  <li>NewsView에서 클릭한 user이름으로 /user/${item.user} router-link를 통해서 이동</li>
  <li>router/index.js에 라우트 등록해주기</li>
  <li>UserView에서는 $route안의 params.id값을 const userName에 넣어주고 this.$store.dispatch를 통해서 actions에 있는 FETCH_USER에 접근하고 두번째 인자로 클릭한 username을 넘겨준다.</li>
  <li>actions(비동기처리)에서 context를 첫번째 인자로 넘겨서 mutations에 접근할 수 있도록 하고 UserView에서 넘겨받은 username을 받도록 두번째 인자에 name을 넣어준다.</li>
  <li>user정보 가져오는 함수 fetchUserInfo를 실행하고 인자로 name을 넘겨준다.</li>
  <li>commit으로 SET_USER를 실행한다.</li>
  <li>mutations에서 state에 접근해서 user에 비동기로 받아온 데이터를 넣어서 state를 바꾼다.</li>
  <li>UserView에서 화면에 데이터를 뿌려준다.</li>
</ol>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/a2d462fc29978f9f39e16f5bbc7c46d0d0ebf947">diff check</a></p>
</blockquote>

<h2 id="63-질문-상세-페이지-실습-풀이-및-오류-디버깅">6.3 질문 상세 페이지 실습 풀이 및 오류 디버깅</h2>

<ol>
  <li>ItemView.vue 생성하고 router/index.js에 라우트 등록</li>
  <li>AskView.vue에 router-link등록하기 &gt; <code class="language-plaintext highlighter-rouge">/item/${item.id}</code></li>
  <li>ItemView에 created에서 itemId 변수에 this.$route.params.id를 넣어준다.(콘솔로 itemId를 찍어봐서 잘 들어오는지 확인해보기)</li>
  <li>actions에 FETCH_ITEM 선언하고 이 액션을 호출했을때 불러올 api함수(fetchItemInfo)를 api/index.js에 선언해준다.</li>
  <li>api에 선언한 함수(fetchItemInfo)를 acions상단에 import해주고 FETCH_ITEM안에 실행시켜준다.</li>
  <li>ItemView에서 created 됐을때 dispatch로 actions의 FETCH_ITEM에 연결해서 api를 호출하도록 하고, 두번째 인자로 params.id를 넣은 변수 itemId를 넣어준다.</li>
  <li>다시 actions의 FETCH_ITEM에 ItemView에서 넘겨준 itemId를 여기서는 id(두번째 인자)로 받는다.</li>
  <li>actions에 실행한 api함수(fetchItemInfo)가 프로미스 객체이므로 then, catch문을 받을 수 있다.</li>
  <li>then에서 commit으로 SET_ITEM(mutations)을 연결한다.</li>
  <li>mutations에서 SET_ITEM을 선언하고 첫번째 인자로 state를 넣고 actions에서 비동기처리로 데이터를 data에 받아와서 mutations의 두번째 인자에 item이라고 정의해서 넣어준다.</li>
  <li>mutations에서 두번째 인자로 item을 넣었는데 이를 받아줄 item을 store/index.js의 state에서 정의 하지 않았으므로 가서 정의해준다.</li>
</ol>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/5c877f557e5f59afffe38ce8a76b2926f3c8d2e7">diff check</a></p>
</blockquote>

<h2 id="64-질문-상세-페이지-스타일링-및-v-html-디렉티브-사용법-소개">6.4 질문 상세 페이지 스타일링 및 v-html 디렉티브 사용법 소개</h2>

<p>불러온 데이터를 화면에 표시</p>

<ul>
  <li>화면에 뿌려주는 항목들을 mapGetters 헬퍼함수를 이용해서 뿌리기</li>
  <li>mapGetters를 import한다.</li>
  <li>store/index.js에 getter추가</li>
  <li>ItemView로 돌아와서 computed 속성에 …mapGetters([‘fetchedItem’]) 정의하고 템플릿영역에서 fetchedItem으로 뿌려줌</li>
  <li>content부분이 html태그를 그대로 들고와서 화면에 태그가 노출됨 &gt; v-html=”fetchedItem.content”</li>
  <li><a href="https://v2.vuejs.org/v2/api/?redirect=true#v-html">v-html API 문서</a></li>
  <li><a href="https://v2.vuejs.org/v2/guide/syntax.html?redirect=true#Raw-HTML">v-html과 데이터 바인딩 차이점 문서</a></li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/962f263adf8b32e755d7701d1a6635e76f7a9862">diff check</a></p>
</blockquote>

<h2 id="65-라우터-트랜지션">6.5 라우터 트랜지션</h2>

<p>특정 링크로 이동할때 바로 화면이 바뀌는데 뷰 내부적으로 제공하는 트랜지션 api로 부드러운 화면 전환하기</p>
<ul>
  <li><a href="https://router.vuejs.org/guide/advanced/transitions.html#per-route-transition">라우터 트랜지션 문서</a></li>
  <li><a href="https://v2.vuejs.org/v2/guide/transitions.html?redirect=true">뷰 트랜지션 문서</a></li>
  <li>라우터 뷰를 트랜지션 태그로 감싸면 트랜지션 이펙트 사용 가능</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/4687eb2d5bf41f3be1a687a7ec989bf34bbb80ca">diff check</a></p>
</blockquote>]]></content><author><name>FE Developer</name></author><category term="vue-lv3" /><category term="vue" /><category term="router" /><summary type="html"><![CDATA[Vue news]]></summary></entry><entry><title type="html">4 - API 구현</title><link href="http://localhost:4000/vue-lv3/vue-advanced4/" rel="alternate" type="text/html" title="4 - API 구현" /><published>2022-04-26T00:00:00+09:00</published><updated>2022-04-26T00:00:00+09:00</updated><id>http://localhost:4000/vue-lv3/vue-advanced4</id><content type="html" xml:base="http://localhost:4000/vue-lv3/vue-advanced4/"><![CDATA[<h2 id="41-axios를-이용한-api-호출">4.1 axios를 이용한 api 호출</h2>

<p><a href="https://github.com/tastejs/hacker-news-pwas/blob/master/docs/api.md">해커뉴스 api</a></p>

<ul>
  <li>views 폴더에는 페이지 라우팅에 관련된 정보들만 들어가는게 좋다.</li>
  <li>설계가 바뀌거나 할때 유연하게 대처하려면 데이터를 불러온다던지 비즈니스 로직들은 별도의 컴포넌트로 등록하는게 좋다.</li>
  <li>우선 views안에 바로 넣고 나중에 수정할 예정</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/1e9ad6983ef8359e0aed961f6bdd567be08ebb33">diff check</a></p>
</blockquote>

<h2 id="42-axios의-api-함수-구조화-방법-및-실습-안내">4.2 axios의 api 함수 구조화 방법 및 실습 안내</h2>

<ul>
  <li>라이브러리를 각각의 파일에서 불러와야하고, 공통된 로직들이 계속 파일마다 불러와야 하는데 공통화시켜서 사용</li>
  <li>data를 요청할때는 created나 beforeMount에서 많이 함 - 마운트 되고나서 데이터를 요청하면 데이터를 받아와서 데이터 배열에 넣으면 뷰의 리액티비티 시스템때문에 화면이 다시 그려짐</li>
  <li>return axios.get = return new Promise가 같은 말이고 이것은 promise가 떨어진다는건데 -&gt; 뒤에 .then()을 연결할 수 있다는 뜻</li>
</ul>

<p>api/index.js</p>
<ul>
  <li>정의한 함수를 다른데서 import로 쓸 수 있도록 export해줘야 함</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/06ce74056f9d3f9d2759451e31df0e6f2fe637fd">diff check</a></p>
</blockquote>

<h2 id="43-자바스크립트-this-4가지와-화살표-함수의-this">4.3 자바스크립트 this 4가지와 화살표 함수의 this</h2>

<p>this
가장 최상단에는 window가 있는데 콘솔창에 this를 그냥 찍어보면 window를 가리킨다.<br />
함수안에 console.log(this)를 선언하고 함수를 실행하면 window를 가리킨다. 기본적으로 this는 전역을 향한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">// 전역을 가리킴</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">sum</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span> <span class="c1">// window객체와, 30이 찍힘</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>생성자 함수로 인스턴스를 생성했을 때는</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">Vue</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">// 함수 자체를 가리킴</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">el</span> <span class="o">=</span> <span class="nx">el</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">new</span> <span class="nx">Vue</span><span class="p">(</span><span class="dl">'</span><span class="s1">#app</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// Vue{}, Vue{el: '#app'} 이 찍힘</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>비동기 처리에서의 this</p>
<ul>
  <li>호출 전에는 VueComponent</li>
  <li>호출 후에는 undefined</li>
</ul>

<p>기본적으로 비동기 호출 자체는 호출되는 시점에서 기존에 있었던 this를 벗어난 새로운 this가 생김<br />
그래서 함수밖과 함수안의 this가 다르기 때문에 함수 밖에서 변수에 this를 담아서 바인딩 해줘야 한다.<br />
그러나 화살표 함수를 사용하면 this가 호출되는 위치의 this를 가져온다.</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/380ade3516f7e36d2ca98e7ded01f671a0b79090">diff check</a></p>
</blockquote>

<h2 id="44-자바스크립트-비동기-처리1---callback">4.4 자바스크립트 비동기 처리(1) - Callback</h2>

<p>Callback
어떤 특정 함수나 기능이 종료되는 시점에 실행 되는 함수<br />
자바스크립트는 함수를 인자로 넘길 수 있는데 인자로 전달되는 함수를 보통 콜백함수라고 표현</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/6a724932fde0983c7f219e975add4cf036386bf3">diff check</a></p>
</blockquote>

<h2 id="45-자바스크립트-비동기-처리2---promise">4.5 자바스크립트 비동기 처리(2) - Promise</h2>

<p>새로운 비동기 처리 패턴 promise</p>

<ul>
  <li><a href="https://joshua1988.github.io/web-development/javascript/promise-for-beginners/">프로미스 쉽게 이해하기</a></li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/a6d0d624a94196cf3011115cc93108125248260a">diff check</a></p>
</blockquote>]]></content><author><name>FE Developer</name></author><category term="vue-lv3" /><category term="vue" /><category term="api" /><category term="axios" /><category term="arrow function" /><category term="비동기처리" /><summary type="html"><![CDATA[Vue news]]></summary></entry><entry><title type="html">3 - 라우터 기본</title><link href="http://localhost:4000/vue-lv3/vue-advanced3/" rel="alternate" type="text/html" title="3 - 라우터 기본" /><published>2022-04-26T00:00:00+09:00</published><updated>2022-04-26T00:00:00+09:00</updated><id>http://localhost:4000/vue-lv3/vue-advanced3</id><content type="html" xml:base="http://localhost:4000/vue-lv3/vue-advanced3/"><![CDATA[<h2 id="31-라우터-설치-및-라우터-구현">3.1 라우터 설치 및 라우터 구현</h2>

<p><code class="language-plaintext highlighter-rouge">yarn add vue-router@3.2.0</code>로 설치하기(vue2는 vue-router3 버전사용, vue3는 vue-router4 버전사용)</p>

<p>package.json의 dependencies에 추가됨(배포할때도 포함 되어야 하는 라이브러리들)</p>

<p>라우터 설정을 main.js에 할 수도 있지만, main.js는 기본적으로 애플리케이션의 설정들(플러그인, 라이브러리, 구조들을 파악)의 청사진으로 보면 됨<br />
그래서 라우터는 따로 폴더를 빼줌</p>

<h2 id="32-router-view를-이용한-라우팅-컴포넌트-표시">3.2 router-view를 이용한 라우팅 컴포넌트 표시</h2>

<p>App.vue에 <code class="language-plaintext highlighter-rouge">&lt;router-view&gt;&lt;/router-view&gt;</code>로 라우터 컴포넌트 보여줌</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/7e9afa13197fa14cfbffc011aa9efd13429f1053">diff check</a></p>
</blockquote>

<h2 id="33-redirect-속성과-router-link">3.3 redirect 속성과 router-link</h2>

<p>첫 화면에서 빈화면이 나오는데 redirect속성으로 원하는 라우터로 연결 가능<br />
라우터 이동 링크 버튼도 추가</p>

<p>컴포넌트 등록할때는 스크립트단에서는 단어마다 첫글자 대문자로 연결<br />
컴포넌트를 태그에서 등록할때는 단어사이에 하이픈으로 연결</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/d0de793092e5dae58d78f1027b9885d3b5ca22a6">diff check</a></p>
</blockquote>

<h2 id="34-toolbar의-라우터-링크-스타일링">3.4 ToolBar의 라우터 링크 스타일링</h2>

<p>vue cli scss 설정</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/affc65f482fa6cd8af2060988aa7ca09e9730e30">diff check</a></p>
</blockquote>

<h2 id="35-라우터-폴더-작명-팁과-라우터-mode-안내">3.5 라우터 폴더 작명 팁과 라우터 mode 안내</h2>

<p>mode: ‘history’, // 해쉬값 제거</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/f7fb20e121bfa69ff9cd80a2537dfba3345e7bd4">diff check</a></p>
</blockquote>]]></content><author><name>FE Developer</name></author><category term="vue-lv3" /><category term="vue" /><category term="router" /><summary type="html"><![CDATA[Vue news]]></summary></entry><entry><title type="html">2 - 프로젝트 셋업</title><link href="http://localhost:4000/vue-lv3/vue-advanced2/" rel="alternate" type="text/html" title="2 - 프로젝트 셋업" /><published>2022-04-26T00:00:00+09:00</published><updated>2022-04-26T00:00:00+09:00</updated><id>http://localhost:4000/vue-lv3/vue-advanced2</id><content type="html" xml:base="http://localhost:4000/vue-lv3/vue-advanced2/"><![CDATA[<h2 id="21-vue-cli로-프로젝트-생성-및-eslint-로그-확인">2.1 Vue CLI로 프로젝트 생성 및 ESLint 로그 확인</h2>

<p><code class="language-plaintext highlighter-rouge">vue create vue-news</code>로 프로젝트 생성</p>

<p><code class="language-plaintext highlighter-rouge">Vue 2</code>선택후 완료 되면 폴더 경로 들어가서 서버 실행하기</p>

<h2 id="22-eslint-도구-소개와-사용해야-하는-이유">2.2 ESLint 도구 소개와 사용해야 하는 이유?</h2>

<p>ESLint : javascript 문법 검사기(보조도구)
javascript에서 ;(세미콜론)을 찍지 않더라도 자바스크립트 해석기에서는 마지막에 세미콜론을 넣어줌<br />
여기서 ESLint는 세미콜론을 찍게 유도함<br />
예를들어서</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="c1">// 이런식이면 문제 없지만</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="o">===</span> <span class="mi">10</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">a는 10</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// 자바스크립트 해석기가 어디서 세미콜론을 찍어야 할지 모를때</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="o">===</span> <span class="mi">10</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">a는 10</span><span class="dl">'</span><span class="p">)</span> <span class="nx">b</span><span class="p">()</span> <span class="nx">c</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>]]></content><author><name>FE Developer</name></author><category term="vue-lv3" /><category term="vue" /><summary type="html"><![CDATA[Vue news]]></summary></entry><entry><title type="html">1 - 소개 및 설계</title><link href="http://localhost:4000/vue-lv3/vue-advanced1/" rel="alternate" type="text/html" title="1 - 소개 및 설계" /><published>2022-04-26T00:00:00+09:00</published><updated>2022-04-26T00:00:00+09:00</updated><id>http://localhost:4000/vue-lv3/vue-advanced1</id><content type="html" xml:base="http://localhost:4000/vue-lv3/vue-advanced1/"><![CDATA[<h2 id="11-소개-및-설계">1.1 소개 및 설계</h2>

<p>해커뉴스 사이트 제작<br />
<a href="https://news.ycombinator.com/">해커뉴스 공식사이트</a></p>

<p>API를 호출해서 화면에 표시하고 링크 연결하거나 정보등 페이지로 넘어가게 제작
<a href="https://github.com/tastejs/hacker-news-pwas/blob/master/docs/api.md">해커뉴스 API 문서</a></p>

<h2 id="12-애플리케이션-라우터-설계">1.2 애플리케이션 라우터 설계</h2>

<p>사이트 설계 : 기획서를 토대로 컴포넌트 기반으로 설계를 해야함
news, ask, jobs 라는 리스트를 표시하는 페이지 3개를 라우터로 설계<br />
각 페이지에서 리스트를 클릭했을때 넘어가는 뷰 페이지와 사용자 정보를 보여주는 페이지까지 총 다섯개</p>

<h2 id="13-비공개-리포지토리-소개-및-뷰-cli-설명">1.3 비공개 리포지토리 소개 및 뷰 cli 설명</h2>

<p><code class="language-plaintext highlighter-rouge">vue create 프로젝트폴더이름</code></p>

<h2 id="14-vue-cli-2x-vs-vue-cli-3x">1.4 Vue CLI 2.x vs Vue CLI 3.x</h2>

<p><a href="https://cli.vuejs.org/">vue CLI 사이트</a>
<a href="https://github.com/vuejs-templates/webpack-simple">webpack-simple 템플릿 깃헙 주소</a></p>

<p>명령어</p>
<ul>
  <li>2.x : vue init ‘프로젝트 템플릿 이름’ ‘파일위치’ <code class="language-plaintext highlighter-rouge">vue init webpack-simple new-project</code></li>
  <li>3.x : vue create ‘프로젝트 이름’ <code class="language-plaintext highlighter-rouge">vue create new-project</code></li>
</ul>

<p>웹팩 설정 파일</p>
<ul>
  <li>2.x : 노출 O</li>
  <li>3.x : 노출 X
웹팩이 복잡하기 때문에 그 설정 파일을 사용자들에게 노출시키지않고 라이브러리 내부에서 알아서 처리하겠다 라는 것.<br />
2점대에서 웹팩에 대한 이해도가 높으면 어떤걸 설정해야될 때, <code class="language-plaintext highlighter-rouge">webpack.config.js</code>에 바로 옵션들을 추가하는식으로 했지만,<br />
3점대 이상에서는 웹팩 설정을 추가해야될 때, 별도의 내용들을 추가해야됨.
그 내용들을 vue cli 사이트 가서 <code class="language-plaintext highlighter-rouge">webpack</code>을 검색해보면 추가 설정 관련 설명이 나옴
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="c1">// vue.config.js</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
<span class="na">configureWebpack</span><span class="p">:</span> <span class="p">{</span>
  <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
    <span class="k">new</span> <span class="nx">MyAwesomeWebpackPlugin</span><span class="p">()</span>
  <span class="p">]</span>
<span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p>위와 같이 <code class="language-plaintext highlighter-rouge">configureWebpack</code>이라는 설정들을 추가해서 <code class="language-plaintext highlighter-rouge">plugins</code>라던지 기타 설정들을 추가할 수 있다.</p>
  </li>
</ul>

<p>프로젝트 구성</p>
<ul>
  <li>2.x : 깃헙의 템플릿 다운로드
    <ul>
      <li><a href="https://github.com/vuejs-templates/">vuejs-templates</a></li>
      <li><a href="https://github.com/vuejs-templates/webpack-simple">vuejs-templates/webpack-simple</a>
템플릿 다운로드를 통해 정해진 템플릿을 사용한다.</li>
    </ul>
  </li>
  <li>3.x : 플러그인 기반으로 기능 추가
vue plugin이라는 강력한 기능을 사용<br />
이 기능을 이용해서 원하는 기능들 (라우터, Vuex …) 플러그인 형식으로 추가할 수 있도록 뷰에서 제공.</li>
</ul>

<p>ES6 이해도</p>
<ul>
  <li>2.x : 필요 X</li>
  <li>3.x : 필요 O</li>
</ul>]]></content><author><name>FE Developer</name></author><category term="vue-lv3" /><category term="vue" /><summary type="html"><![CDATA[Vue news]]></summary></entry><entry><title type="html">5 - 스토어 구현</title><link href="http://localhost:4000/vue-lv3/vue-advanced5/" rel="alternate" type="text/html" title="5 - 스토어 구현" /><published>2022-04-26T00:00:00+09:00</published><updated>2022-04-26T00:00:00+09:00</updated><id>http://localhost:4000/vue-lv3/vue-advanced5</id><content type="html" xml:base="http://localhost:4000/vue-lv3/vue-advanced5/"><![CDATA[<h2 id="51-vuex-설치-및-vuex가-적용된-앱-구조-소개">5.1 Vuex 설치 및 Vuex가 적용된 앱 구조 소개</h2>

<ul>
  <li>vuex를 적용해서 api에서 바로 불러오는게 아니고 vuex의 state에 api를 담아서 화면에 표시</li>
  <li><code class="language-plaintext highlighter-rouge">yarn add vuex@3.4.0</code>로 vuex 라이브러리 설치</li>
</ul>

<h2 id="52-vuex-모듈화-및-state-적용">5.2 Vuex 모듈화 및 state 적용</h2>

<ul>
  <li>store폴더 생성후 그안에 작성</li>
  <li>vuex는 플러그인 형태로 제공 되기 때문에 <code class="language-plaintext highlighter-rouge">Vue.use(Vuex);</code>로 사용</li>
  <li>vuex는 상태관리 라이브러리이다. 상태라는 것은 여러 컴포넌트간에 공유되는 데이터 속성</li>
  <li>NewsView가 users라는 데이터를 다른 컴포넌트에 아직 공유하고 있지 않은 상태인데 만약 다른 컴포넌트에서 users를 뿌려줘야 하는 상황이라면 공유해서 사용해야 한다.</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/2051c3290d123a0ba6087c52152b824b42d17b83">diff check</a></p>
</blockquote>

<h2 id="53-newsview에-actions와-mutations-적용">5.3 NewsView에 actions와 mutations 적용</h2>

<ul>
  <li>비동기 호출은 전부 action에서 하고 받아온 데이터를 mutations를 통해서 state에 넣어주게 구분되어 있다.</li>
  <li>actions에서 비동기 호출을 하고 첫번째 인자로 context를 주면 mutations에 접근 할 수 있다.</li>
  <li>context.commit(‘SET_NEWS’, response.data)</li>
  <li>mutations에서는 첫번째 인자로 state를 넣어주고 두번째 인자에는 actions에서 넘겨준 response.data값이 들어간다.</li>
  <li>컴포넌트에서 actions에 접근은 dispatch로 한다.</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/f1d13f91ee4672a0a111094a3833f53b230626a0">diff check</a></p>
</blockquote>

<h2 id="54-jobview에-스토어-적용">5.4 JobView에 스토어 적용</h2>

<ul>
  <li>Destructuring 사용해서 넣어보기</li>
  <li><a href="https://joshua1988.github.io/es6-online-book/destructuring.html">Dstructuring 설명</a></li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/74c99efcdd9b849abe927365fbe26b523641d03f">diff check</a></p>
</blockquote>

<h2 id="55-map-헬퍼-함수를-이용한-askview-풀이">5.5 map 헬퍼 함수를 이용한 AskView 풀이</h2>

<ul>
  <li>mapState와 mapGetters는 computed 속성에서 사용</li>
  <li>this.$store.state.ask; 이렇게 가져오는것은 더 길어지면 파악하기 힘들기 때문에 헬퍼 함수를 사용하면 편함</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/f629a7e9aba8a99e6930bfbc528954350b83d02c">diff check</a></p>
</blockquote>

<h2 id="56-스토어-속성-모듈화">5.6 스토어 속성 모듈화</h2>

<ul>
  <li>프로젝트가 커질 수록 store가 길어지니까 모듈화해서 나눠놓는게 좋다.</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/6e92aae19f48ffb976010166bf7e4a2794471ec6">diff check</a></p>
</blockquote>]]></content><author><name>FE Developer</name></author><category term="vue-lv3" /><category term="vue" /><category term="store" /><category term="vuex" /><summary type="html"><![CDATA[Vue news]]></summary></entry><entry><title type="html">vuex</title><link href="http://localhost:4000/vue-lv2/vuex/" rel="alternate" type="text/html" title="vuex" /><published>2022-03-12T00:00:00+09:00</published><updated>2022-03-12T00:00:00+09:00</updated><id>http://localhost:4000/vue-lv2/vuex</id><content type="html" xml:base="http://localhost:4000/vue-lv2/vuex/"><![CDATA[<h2 id="vuex-소개">vuex 소개</h2>

<ul>
  <li>복잡한 애플리케이션의 컴포넌트들을 효율적으로 관리하는 vuex 라이브러리</li>
  <li>React의 Flux패턴에서 기인함</li>
  <li>vue.js 중고급 개발자로 성장하기 위한 필수 관문</li>
</ul>

<h2 id="flux란">Flux란?</h2>

<ul>
  <li>MVC 패턴의 복잡한 데이터 흐름 문제를 해결하는 개발 패턴
    <ol>
      <li>action : 화면에서 발생하는 이벤트 또는 사용자의 입력</li>
      <li>dispatcher : 데이터를 변경하는 방법, 메서드</li>
      <li>model : 화면에 표시할 데이터</li>
      <li>view : 사용자에게 비춰지는 화면</li>
    </ol>
  </li>
  <li>MVC패턴과 Flux패턴 비교<br />
<img src="/assets/images/mvc_vs_flux.png" alt="mvc_vs_flux" />
    <ul>
      <li>view : 보고있는 화면</li>
      <li>model : 데이터</li>
      <li>controller : model과 view 제어
        <blockquote>
          <p>Flux패턴은 action에서 view까지 단방향으로 일어남 반면 MVC패턴은 model과 view가 서로 데이터를 주고받아서 양방향으로 일어남</p>
        </blockquote>
      </li>
    </ul>
  </li>
  <li>MVC패턴의 문제점<br />
<img src="/assets/images/mvc_problem.png" alt="mvc_problem" />
    <ul>
      <li>기능 추가 및 변경에 따라 생기는 문제점을 예측할 수 없음.</li>
      <li>앱이 복잡해지면서 생기는 업데이트 루프</li>
    </ul>
  </li>
  <li>Flux패턴의 단방향 흐름<br />
<img src="/assets/images/flux_flow.png" alt="flux_flow" />
    <ul>
      <li>데이터의 흐름이 여러 갈래로 나뉘지 않고 단방향으로만 처리</li>
    </ul>
  </li>
</ul>

<h2 id="vuex가-왜-필요할까">vuex가 왜 필요할까?</h2>

<p>복잡한 애플리케이션에서 컴포넌트의 개수가 많아지면 컴포넌트간에 데이터 전달이 어려워진다.</p>

<ul>
  <li>vuex로 해결할 수 있는 문제
    <ol>
      <li>MVC 패턴에서 발생하는 구조적 오류</li>
      <li>컴포넌트 간 데이터 전달 명시</li>
      <li>여러 개의 컴포넌트에서 같은 데이터를 업데이트 할 때 동기화 문제</li>
    </ol>
  </li>
</ul>

<h3 id="이벤트-버스로-해결">이벤트 버스로 해결?</h3>
<p>어디서 이벤트를 보냈는지 혹은 어디서 이벤트를 받았는지 알기 어려움</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="c1">// Login.vue</span>
<span class="nx">eventBus</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">fetch</span><span class="dl">'</span><span class="p">,</span> <span class="nx">loginInfo</span><span class="p">);</span>

<span class="c1">// List.vue</span>
<span class="nx">eventBus</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="dl">'</span><span class="s1">display</span><span class="dl">'</span><span class="p">,</span> <span class="nx">data</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">displayOnScreen</span><span class="p">(</span><span class="nx">data</span><span class="p">));</span>

<span class="c1">// Chart.vue</span>
<span class="nx">eventBus</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">refreshData</span><span class="dl">'</span><span class="p">,</span> <span class="nx">chartData</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>컴포넌트 간 데이터 전달이 명시적이지 않음</p>

<h2 id="vuex-컨셉">vuex 컨셉</h2>

<ul>
  <li>State : 컴포넌트 간에 공유하는 데이터 <code class="language-plaintext highlighter-rouge">data()</code></li>
  <li>View : 데이터를 표시하는 화면 <code class="language-plaintext highlighter-rouge">template</code></li>
  <li>Mutations: state값을 변경하는 이벤트 로직, 메서드 <code class="language-plaintext highlighter-rouge">methods</code></li>
  <li>Action : 사용자의 입력에 따라 데이터를 변경하는 (비동기 처리 로직을 선언) <code class="language-plaintext highlighter-rouge">aysnc methods</code>
<img src="/assets/images/vuex_flow.png" alt="vuex_flow" /><br />
흐름 설명 : 화면(view)에서 버튼을 클릭 하면 버튼이 action을 발생시킴 &gt; action이 발동하면 데이터(state)를 변경</li>
</ul>

<h2 id="vuex-구조">vuex 구조</h2>

<p>컴포넌트 -&gt; 비동기 로직 -&gt; 동기 로직 -&gt; 상태
<img src="/assets/images/vuex_construction.png" alt="vuex_construction" /><br />
action : 비동기 로직<br />
mutations : 동기 로직</p>

<p><a href="https://joshua1988.github.io/web-development/javascript/javascript-asynchronous-operation/">자바스크립트 비동기 처리와 콜백함수 참고 링크</a></p>]]></content><author><name>FE Developer</name></author><category term="vue-lv2" /><category term="vuex" /><category term="store" /><summary type="html"><![CDATA[vuex 설명]]></summary></entry><entry><title type="html">flex에 대해서</title><link href="http://localhost:4000/css/flex/" rel="alternate" type="text/html" title="flex에 대해서" /><published>2021-12-12T00:00:00+09:00</published><updated>2021-12-12T00:00:00+09:00</updated><id>http://localhost:4000/css/flex</id><content type="html" xml:base="http://localhost:4000/css/flex/"><![CDATA[<h2 id="flex에-대한-정리">flex에 대한 정리</h2>]]></content><author><name>FE Developer</name></author><category term="css" /><category term="css" /><category term="flex" /><category term="grow" /><category term="shirink" /><summary type="html"><![CDATA[flex grow shirink]]></summary></entry><entry><title type="html">git branch</title><link href="http://localhost:4000/git/gitbranch/" rel="alternate" type="text/html" title="git branch" /><published>2021-12-12T00:00:00+09:00</published><updated>2021-12-12T00:00:00+09:00</updated><id>http://localhost:4000/git/gitbranch</id><content type="html" xml:base="http://localhost:4000/git/gitbranch/"><![CDATA[<h2 id="git-branch-생성하고-사용하는-방법">git branch 생성하고 사용하는 방법</h2>

<ul>
  <li>git init : git 저장소 생성(초기화)</li>
  <li>git remote add origin {link} : link에 생성한 레포지토리 url복사해서 넣기</li>
  <li>git branch : 깃 브랜치 확인</li>
  <li>git branch -v : 마지막 커밋메세지 확인</li>
  <li>git branch ‘브랜치명’ : 브랜치 생성</li>
  <li>git checkout ‘브랜치명’ : 선택한 브랜치로 이동</li>
  <li>git branch -d ‘브랜치명’ : 브랜치 삭제하기</li>
  <li>git merge ‘합칠 브랜치명’ : 현재위치한 브랜치에 합칠 브랜치에서 작업한 내용 가져와서 병합</li>
  <li>git add . : 변경한 파일을 저장</li>
  <li>git commit -m “커밋메세지” : 커밋메세지 입력</li>
  <li>git push origin ‘브랜치명’ : 원격저장소 브랜치에 push 하기</li>
</ul>]]></content><author><name>FE Developer</name></author><category term="git" /><category term="branch" /><summary type="html"><![CDATA[branch 생성하고 사용하기]]></summary></entry><entry><title type="html">git commit 메세지 수정</title><link href="http://localhost:4000/git/git-commit-edit/" rel="alternate" type="text/html" title="git commit 메세지 수정" /><published>2021-12-12T00:00:00+09:00</published><updated>2021-12-12T00:00:00+09:00</updated><id>http://localhost:4000/git/git-commit-edit</id><content type="html" xml:base="http://localhost:4000/git/git-commit-edit/"><![CDATA[<h2 id="마지막-commit-메세지-수정하기">마지막 commit 메세지 수정하기</h2>

<blockquote>
  <p>git commit –amend -m “바꿀 메세지”<br />
or<br />
git commit –amend<br />
까지 입력후 vi 에서 i(수정모드)로 변경하고 수정 후 esc 누르고 :wq로 저장</p>
</blockquote>

<h2 id="이전-commit-메세지-수정하기">이전 commit 메세지 수정하기</h2>

<p><code class="language-plaintext highlighter-rouge">rebase</code> 명령어를 사용<br />
<code class="language-plaintext highlighter-rouge">rebase</code> 명령어는 branch의 base를 다시 설정하여 master브랜치와 merge commit생성을 방지하여 깔끔한 커밋을 남길 수 있도록 도와주는 명령어</p>

<blockquote>
  <p>git rebase -i HEAD~3</p>
</blockquote>

<p>rebase에서 -i 옵션을 주면 rebase명령을  대화형으로 수행하여 여러 커밋들의 순서를 바꾸거나 커밋 히스토리를 변경 또는 삭제할 때 사용<br />
HEAD~3 은 최근 커밋 메시지중 3개만 불러온다는 뜻</p>

<p>입혁하면 최근 커밋 메시지 3개를 불러오는데</p>

<blockquote>
  <p>pick 커밋번호 커밋메시지</p>
</blockquote>

<p>형식으로 출력</p>

<p>이때 수정하고 싶은 commit 내역의 <code class="language-plaintext highlighter-rouge">pick</code>을 <code class="language-plaintext highlighter-rouge">reword</code>로 바꾸고 :wq로 저장 종료<br />
종료가 되면 선택한 commit 메시지에 대한 화면이 다시 터미널에 호출<br />
위와 동일하게 vi 에서 i(수정모드)로 변경하고 수정 후 esc 누르고 :wq로 저장</p>

<h2 id="원격에-이미-push-했을-때">원격에 이미 Push 했을 때</h2>

<p>commit이 이미 원격에 push 되었다면 커밋 메시지를 수정하고</p>

<blockquote>
  <p>git push origin master(혹은 브랜치명) -f</p>
</blockquote>

<p>로 강제 덮어씌우기</p>

<p>*** 개인 레포지토리나 개인 브랜치가 아닌 협업 마스터 브랜치에는 위험할 수 있음</p>]]></content><author><name>FE Developer</name></author><category term="git" /><category term="commit" /><summary type="html"><![CDATA[commit 오타 수정]]></summary></entry></feed>
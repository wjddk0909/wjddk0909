<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-07-18T21:23:43+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">FE Developer Note </title><subtitle>An amazing website.</subtitle><author><name>FE Developer</name></author><entry><title type="html">[TypeScript-part1] 인터페이스</title><link href="http://localhost:4000/typescript-part1/typescript-part1-beginners6/" rel="alternate" type="text/html" title="[TypeScript-part1] 인터페이스" /><published>2022-07-13T00:00:00+09:00</published><updated>2022-07-13T00:00:00+09:00</updated><id>http://localhost:4000/typescript-part1/typescript-part1-beginners6</id><content type="html" xml:base="http://localhost:4000/typescript-part1/typescript-part1-beginners6/"><![CDATA[<h2 id="61-인터페이스-소개-및-변수를-정의하는-인터페이스">6.1 인터페이스 소개 및 변수를 정의하는 인터페이스</h2>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/b9559cb2582ba028305cb883cef723d2668ea265">diff check</a></p>
</blockquote>

<h2 id="62-함수의-인자를-정의하는-인터페이스">6.2 함수의 인자를 정의하는 인터페이스</h2>

<p>변수에 인터페이스를 활용하는 방법을 사용해보았다면 이번에는 함수에 인터페이스를 활용하는 방법을 사용해 보자</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">getUser</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
<span class="p">}</span>
<span class="nx">getUser</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>여기까지 입력하고 <code class="language-plaintext highlighter-rouge">getUer()</code>함수를 호출하는 부분에 마우스를 올려보면,<br />
<code class="language-plaintext highlighter-rouge">function getUser(user: any): void</code>를 보여주며 any 타입이기 때문에 어떤 타입의 인자가 들어가도 에러가 나지 않는다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">getUser</span><span class="p">(</span><span class="nx">user</span><span class="p">:</span> <span class="nx">User</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="nx">ja</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">jungah</span><span class="dl">'</span>
<span class="p">}</span>
<span class="nx">getUser</span><span class="p">(</span><span class="nx">ja</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>만약 여기에 <code class="language-plaintext highlighter-rouge">user: User</code> 위에서 정의한 User인터페이스를 받는다면<br />
<code class="language-plaintext highlighter-rouge">ja</code>에는 age가 없기 때문에 에러가 난다.</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/360e007d8cb944e6dd85c091b1dce58f62fa4aa6">diff check</a></p>
</blockquote>

<h2 id="63-함수-구조를-정의하는-인터페이스">6.3 함수 구조를 정의하는 인터페이스</h2>

<p>api를 호출 했을 때, 그 api의 데이터 타입이 어떤지 인터페이스를 정의해서 그것을 활용할때 인터페이스가 빛을 발한다.</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/d06b7d38811c91b4ceb84786e559946d07e8cee3">diff check</a></p>
</blockquote>

<h2 id="64-인덱싱-방식을-정의하는-인터페이스">6.4 인덱싱 방식을 정의하는 인터페이스</h2>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/5ccae53bb0970b84683efe66be30c979bd86d655">diff check</a></p>
</blockquote>

<h2 id="65-인터페이스-딕셔너리-패턴">6.5 인터페이스 딕셔너리 패턴</h2>

<p>RegExp : 정규표현식 생성자라는 느낌의 예약어?</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/ba556c4b4eb553834d890331ca4a5fa793d11720">diff check</a></p>
</blockquote>

<h2 id="66-인터페이스-확장상속">6.6 인터페이스 확장(상속)</h2>

<p>인터페이스를 상속받아서 기존에 있던것보다 확장해서 사용하는 것<br />
인터페이스를 각각 정의했을때 각 인터페이스에 중복되는 속성들이 있다면 상속을 받아서 사용할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="kr">interface</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">age</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">Developer</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">age</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
    <span class="nl">language</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 상속받아서 확장</span>
<span class="kr">interface</span> <span class="nx">Developer</span> <span class="kd">extends</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="nl">language</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/cc7993d889893ff00fc8cc02fb39c369ad883567">diff check</a></p>
</blockquote>]]></content><author><name>FE Developer</name></author><category term="typescript-part1" /><category term="typescript" /><category term="interface" /><summary type="html"><![CDATA[typescript 인터페이스]]></summary></entry><entry><title type="html">[TypeScript-part1] 이넘</title><link href="http://localhost:4000/typescript-part1/typescript-part1-beginners9/" rel="alternate" type="text/html" title="[TypeScript-part1] 이넘" /><published>2022-07-13T00:00:00+09:00</published><updated>2022-07-13T00:00:00+09:00</updated><id>http://localhost:4000/typescript-part1/typescript-part1-beginners9</id><content type="html" xml:base="http://localhost:4000/typescript-part1/typescript-part1-beginners9/"><![CDATA[<h2 id="91-이넘-소개">9.1 이넘 소개</h2>

<p>이넘(Enums)<br />
이넘은 특정 값들의 집합을 의미하는 자료형<br />
예를 들면 아래와 같은 목록이 이넘이 될 수 있다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>나이키
아디다스
뉴발란스
</pre></td></tr></tbody></table></code></pre></div></div>

<p>이넘은 다른 프로그래밍 언어를 다뤄본 사람들에게 친숙한 타입, 타입스크립트에서는 문자형 이넘과 숫자형 이넘을 지원한다.</p>

<p>드롭다운과 같은 정해져있는 목록의 값들을 지정할 때 쓰면 좋다.</p>

<h2 id="92-숫자형-이넘">9.2 숫자형 이넘</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kr">enum</span> <span class="nx">Shoes</span> <span class="p">{</span>
    <span class="nx">Nike</span><span class="p">,</span>
    <span class="nx">Adidas</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">myShoes</span> <span class="o">=</span> <span class="nx">Shoes</span><span class="p">.</span><span class="nx">Nike</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myShoes</span><span class="p">);</span> <span class="c1">// 0 출력</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>위와 같이 각 enum에 값을 지정하지 않으면 기본적으로 숫자형 이넘으로 취급한다.</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/1bec6bacc86b765343313530f99a56701f2f5fb9">diff check</a></p>
</blockquote>

<h2 id="93-문자형-이넘">9.3 문자형 이넘</h2>

<p>이넘의 값을 지정했을때 특정 값을 할당하거나 초기화를 하지 않으면 기본적인 값들은 0부터 시작한다.<br />
이번에는 이넘에 문자열을 할당해 보자.</p>

<p>그 결과를 확인하려면 TS Playground 사이트에서 코드를 넣고 <code class="language-plaintext highlighter-rouge">Run</code>을 클릭하면 콘솔창에서 확인 할 수 있다.</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/5408370b91e9b38c22a4e716035be40f2b147b99">diff check</a></p>
</blockquote>

<h2 id="94-이넘-활용-사례">9.4 이넘 활용 사례</h2>

<p>파라미터 타입을 enum으로하면 enum에서 제공하는 값만 파라미터로 넣을 수 있다.<br />
드롭다운 등의 목록이 필요한 곳에서 enum을 활용하면 예외처리할 부분이 줄어들고 좋다.</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/23239b375069a9f2bd92a2732be0a3eb5e89f3b5">diff check</a></p>
</blockquote>]]></content><author><name>FE Developer</name></author><category term="typescript-part1" /><category term="typescript" /><category term="enum" /><summary type="html"><![CDATA[typescript enum]]></summary></entry><entry><title type="html">[TypeScript-part1] 연산자를 이용한 타입 정의</title><link href="http://localhost:4000/typescript-part1/typescript-part1-beginners8/" rel="alternate" type="text/html" title="[TypeScript-part1] 연산자를 이용한 타입 정의" /><published>2022-07-13T00:00:00+09:00</published><updated>2022-07-13T00:00:00+09:00</updated><id>http://localhost:4000/typescript-part1/typescript-part1-beginners8</id><content type="html" xml:base="http://localhost:4000/typescript-part1/typescript-part1-beginners8/"><![CDATA[<h2 id="81-연산자를-이용한-타입-정의---union-type">8.1 연산자를 이용한 타입 정의 - Union Type</h2>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/d6a98809b130c7389993b94248aff79c72a61476">diff check</a></p>
</blockquote>

<h2 id="82-유니온-타입의-장점">8.2 유니온 타입의 장점</h2>

<p>유니온 타입은 특정 파라미터나 변수에 여러가지 타입을 지정하고 싶을 때 사용한다.</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/bfa08f4fe10154a2e5d3db6e6675ccdb35462b18">diff check</a></p>
</blockquote>

<h3 id="타입-가드">타입 가드</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">logMessage</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="nx">string</span> <span class="o">|</span> <span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">value</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">number</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">value</span><span class="p">.</span><span class="nx">toLocaleString</span><span class="p">()</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">value</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">value</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같이 <code class="language-plaintext highlighter-rouge">if문</code>으로 특정 타입으로 타입의 범위를 좁혀나가는(필터링 하는) 과정</p>

<h3 id="에러처리타입-가드">에러처리(타입 가드)</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">logMessage</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="nx">string</span> <span class="o">|</span> <span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">value</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">number</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">value</span><span class="p">.</span><span class="nx">toLocaleString</span><span class="p">()</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">value</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">value</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">()</span>
    <span class="p">}</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="dl">'</span><span class="s1">value must be string or number</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같이 지정된 타입 이외의 타입이 들어오면 에러 처리도 할 수 있다.</p>

<h2 id="83-유니온-타입의-특징">8.3 유니온 타입의 특징</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="kr">interface</span> <span class="nx">Developer</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">skill</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">age</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">askSomeone</span><span class="p">(</span><span class="nx">someone</span><span class="p">:</span> <span class="nx">Developer</span> <span class="o">|</span> <span class="nx">Person</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">someone</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">abc</span><span class="dl">'</span><span class="p">;</span>
    <span class="nx">someone</span><span class="p">.</span><span class="nx">skill</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">javascript</span><span class="dl">'</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>인터페이스를 두개를 선언하고 아래에서 유니온 타입으로 파라미터로 정의해 줬을때,<br />
someone에 접근할 수 있는 속성은 <code class="language-plaintext highlighter-rouge">name</code>뿐이다.<br />
아직 어떤 형태의 객체가 들어올지 모르는 상황에서 <code class="language-plaintext highlighter-rouge">skill, age</code> 속성들을 모두 열어 놓는다면 에러가 발생할 수도 있다고 판단하기 때문에 위와 같이 유니온 타입을 썼을때는 공통속성에만 접근할 수 있도록 한다.</p>

<p>이 <code class="language-plaintext highlighter-rouge">skill, age</code>같은 속성에 접근하고 싶다면 이전 시간에 봤던 <code class="language-plaintext highlighter-rouge">타입가드</code>를 이용해서 특정 타입으로 제한을 하고 그 후에 그 타입으로 인자가 들어왔을 때 처리하는 방식으로 해야한다.</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/7cc601b5f38ac11997eac77e90293035bb9eb6c5">diff check</a></p>
</blockquote>

<h2 id="84-인터섹션-타입-소개">8.4 인터섹션 타입 소개</h2>

<p><code class="language-plaintext highlighter-rouge">&amp;</code> 앤드 연산자를 사용한 인터섹션 타입</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">askSomeone2</span><span class="p">(</span><span class="nx">someone</span><span class="p">:</span> <span class="nx">Developer</span> <span class="o">&amp;</span> <span class="nx">Person</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">someone</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">abc</span><span class="dl">'</span><span class="p">;</span>
    <span class="nx">someone</span><span class="p">.</span><span class="nx">skill</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">javascript</span><span class="dl">'</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위 유니온 타입에서는 <code class="language-plaintext highlighter-rouge">someone.skill</code> 속성이 뜨지 않고 <code class="language-plaintext highlighter-rouge">someone.skill = 'javascript'</code>이 에러가 나는 반면 인터섹션 타입에서는 <code class="language-plaintext highlighter-rouge">someone.skill = 'javascript'</code>이 에러가 나지 않는다.<br />
Developer 인터페이스와 Person 인터페이스 속성 모두를 가지고 있는 데이터 타입.
이것이 &amp; 인터섹션이다.<br />
그러나 실무에서는 유니온 타입이 더 많이 쓰인다.</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/1f38d6ebcb428bb4cfc682075023e0e098bc9e8f">diff check</a></p>
</blockquote>

<h2 id="85-유니온-타입과-인터섹션-타입의-차이점">8.5 유니온 타입과 인터섹션 타입의 차이점</h2>

<ul>
  <li>유니온 타입: 여러 타입 중 하나의 타입만 만족하면 되므로 상황에 따라 원하는 타입을 만족하는 데이터를 넘기면됨</li>
  <li>인터섹션 타입: 인터섹션으로 선언된 모든 타입을 만족하는 데이터를 넘겨야된다.</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/944f98a8cbb6a5d29fa3f1ec894d583384c13445">diff check</a></p>
</blockquote>]]></content><author><name>FE Developer</name></author><category term="typescript-part1" /><category term="typescript" /><summary type="html"><![CDATA[typescript 연산자 이용]]></summary></entry><entry><title type="html">[TypeScript-part1] 첫 번째 프로젝트 - 할 일 관리 애플리케이션</title><link href="http://localhost:4000/typescript-part1/typescript-part1-beginners5/" rel="alternate" type="text/html" title="[TypeScript-part1] 첫 번째 프로젝트 - 할 일 관리 애플리케이션" /><published>2022-07-13T00:00:00+09:00</published><updated>2022-07-13T00:00:00+09:00</updated><id>http://localhost:4000/typescript-part1/typescript-part1-beginners5</id><content type="html" xml:base="http://localhost:4000/typescript-part1/typescript-part1-beginners5/"><![CDATA[<h2 id="51-첫-번째-실습-프로젝트-소개-환경-구성-코드-분석">5.1 첫 번째 실습 프로젝트 소개, 환경 구성, 코드 분석</h2>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/84f846d996ceb396f57c9a83b88bd1fa1fe3cacd">diff check</a></p>
</blockquote>

<h2 id="52-프로젝트-구성-파일-소개npm-eslint-ts">5.2 프로젝트 구성 파일 소개(NPM, ESLint, TS)</h2>

<p>tsconfig.json<br />
<code class="language-plaintext highlighter-rouge">compilerOptions</code>: 타입스크립트에서 자바스크립트로 변환할때 적용되는 옵션<br />
그중에 <code class="language-plaintext highlighter-rouge">"noImplicitAny": false</code>를 true로 바꾸면 에러가 뜨기 시작한다.<br />
이 에러들은 제거하지 않으면 자바스크립트로 컴파일시 컴파일이 되지 않는다.<br />
이런 에러난 부분에 대해서 꼭 타이핑(typing: 타입이 정의되지 않은 코드에 타입을 입혀주는 행위)을 해줘야 함</p>

<h2 id="53-실습-방법-안내-및-any-void-소개">5.3 실습 방법 안내 및 any, void 소개</h2>

<p>tsconfig.json파일을 열어서 <code class="language-plaintext highlighter-rouge">noImplicitAny</code>속성을 true로 바꿔주고<br />
quiz/1_todo/src/index.ts 파일을 열어서 <code class="language-plaintext highlighter-rouge">todoItems</code> 변수에 마우스를 갖다대면 any라는 타입이 보입니다.</p>

<p>이 any라는 타입은 어떤 타입이 들어와도 상관없다는 뜻<br />
실행하는 시점에 해당 값의 타입을 파악해서 타입을 할당하는 방식<br />
그러나 최대한 타입을 정확하게 명시하는것을 추천 (필요할 때가 있을 수 있으므로 알아둘 필요는 있음)</p>

<p>두번째로 아래 <code class="language-plaintext highlighter-rouge">addTodo</code>함수에 마우스를 갖다대면 리턴타입으로 void가 뜬다.<br />
void는 반환값이 없다는 것을 명시하는 것으로 리턴값이 없는 함수는 반환값에 void라고 명시하면 된다.</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/e1c4fb885e6ab8513fcdc424fd12cdd4cb5c5b8d">diff check</a></p>
</blockquote>

<h2 id="54-실습-풀이-1---변수-함수-타입">5.4 실습 풀이 1 - 변수, 함수 타입</h2>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/829e1ff7d52935d3ddbaa3e478d6d49c6cfcbc35">diff check</a></p>
</blockquote>

<h2 id="55-실습-풀이-2---filter-api--화살표-함수-소개">5.5 실습 풀이 2 - filter API &amp; 화살표 함수 소개</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span> <span class="na">gender</span><span class="p">:</span> <span class="dl">'</span><span class="s1">male</span><span class="dl">'</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">john</span><span class="dl">'</span> <span class="p">},</span>
    <span class="p">{</span> <span class="na">gender</span><span class="p">:</span> <span class="dl">'</span><span class="s1">female</span><span class="dl">'</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">ellin</span><span class="dl">'</span> <span class="p">},</span>
    <span class="p">{</span> <span class="na">gender</span><span class="p">:</span> <span class="dl">'</span><span class="s1">male</span><span class="dl">'</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">ben</span><span class="dl">'</span> <span class="p">},</span>
<span class="p">]</span>

<span class="kd">const</span> <span class="nx">filtered</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">gender</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">female</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">item</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">})</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">filtered</span><span class="p">)</span> <span class="c1">// [ { gender: 'female', name: 'ellin' } ]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>a.js파일을 src폴더에 만들고 터미널에서 node a.js 명령어를 실행하면 브라우저를 실행하지 않고 node로 js파일을 실행 할 수 있다.</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/6eeaa0f7ae1608102e3741bdc64d3c3bd9d6a700">diff check</a></p>
</blockquote>

<h2 id="56-실습-풀이-3---함수-구현">5.6 실습 풀이 3 - 함수 구현</h2>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/f34844ae3e39726d7dc2bb7919eb27850c41c79a">diff check</a></p>
</blockquote>

<h2 id="57-실습-풀이-4---오류-해결-및-구체적인-타입-정의">5.7 실습 풀이 4 - 오류 해결 및 구체적인 타입 정의</h2>

<p>원래 <code class="language-plaintext highlighter-rouge">let todoItems: object[];</code>으로 정의 했던 타입을 좀 더 구체적으로 <code class="language-plaintext highlighter-rouge">let todoItems: { id: number; title: string; done: boolean }[];</code>으로 정의 해 준다.</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/c17bc0e2f5a29d2b560629c5572d77c9b0b2a24e">diff check</a></p>
</blockquote>

<h2 id="58-실습-풀이-5---중복된-코드-제거-및-인터페이스-소개">5.8 실습 풀이 5 - 중복된 코드 제거 및 인터페이스 소개</h2>

<p>코드를 살펴보면 object의 코드를 구체적으로 명시하는 부분이 게속해서 반복적으로 나온다.<br />
이런 부분을 공통으로 묶어줄 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="nx">type</span> <span class="nx">Todo</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">id</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
  <span class="nl">title</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">done</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">let</span> <span class="nx">todoItems</span><span class="p">:</span> <span class="nx">Todo</span><span class="p">[];</span> <span class="c1">// 할 일 목록 받는 변수</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>이런 방법도 있지만<br />
interface를 사용하는 방법도 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kr">interface</span> <span class="nx">Todo</span> <span class="p">{</span>
  <span class="nl">id</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
  <span class="nl">title</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">done</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">let</span> <span class="nx">todoItems</span><span class="p">:</span> <span class="nx">Todo</span><span class="p">[];</span> <span class="c1">// 할 일 목록 받는 변수</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/2f30ce786215e2009780a4b67410fa05c0f16f6d">diff check</a></p>
</blockquote>]]></content><author><name>FE Developer</name></author><category term="typescript-part1" /><category term="typescript" /><summary type="html"><![CDATA[typescript 할 일 관리]]></summary></entry><entry><title type="html">[TypeScript-part1] 타입 별칭</title><link href="http://localhost:4000/typescript-part1/typescript-part1-beginners7/" rel="alternate" type="text/html" title="[TypeScript-part1] 타입 별칭" /><published>2022-07-13T00:00:00+09:00</published><updated>2022-07-13T00:00:00+09:00</updated><id>http://localhost:4000/typescript-part1/typescript-part1-beginners7</id><content type="html" xml:base="http://localhost:4000/typescript-part1/typescript-part1-beginners7/"><![CDATA[<h2 id="71-타입-별칭-소개">7.1 타입 별칭 소개</h2>

<p>타입 별칭은 특정 타입이나 인터페이스를 참조할 수 있는 타입 변수를 의미합니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="c1">// string 타입을 사용할 때</span>
<span class="kd">const</span> <span class="nx">name</span><span class="p">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">capt</span><span class="dl">'</span><span class="p">;</span>

<span class="c1">// 타입 별칭을 사용할 때</span>
<span class="nx">type</span> <span class="nx">MyName</span> <span class="o">=</span> <span class="nx">string</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">name</span><span class="p">:</span> <span class="nx">MyName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">capt</span><span class="dl">'</span><span class="p">;</span>

<span class="c1">// interface 레벨의 복잡한 타입에도 별칭 부여 가능</span>
<span class="nx">type</span> <span class="nx">Developer</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">skill</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 타입 별칭에 제네릭도 사용가능</span>
<span class="nx">type</span> <span class="nx">User</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="nx">T</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="72-타입-별칭-코드-예제">7.2 타입 별칭 코드 예제</h2>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/30ee844445f3081b96be8d0bea796ce59473e966">diff check</a></p>
</blockquote>

<h2 id="73-타입-별칭과-인터페이스의-차이점">7.3 타입 별칭과 인터페이스의 차이점</h2>

<p>타입 별칭은 새로운 타입 값을 하나 생성하는 것이 아니라 정의한 타입에 대해 나중에 쉽게 참고할 수 있게 이름을 부여하는 것과 같다.</p>

<p>인터페이스로 선언한 타입을 프리뷰로 확인하면 인터페이스를 가리킨다.</p>

<p><img src="/assets/images/ts/part1-7_01.png" alt="인터페이스" /></p>

<p><img src="/assets/images/ts/part1-7_02.png" alt="인터페이스" /></p>

<p>인터페이스와 타입은 마우스 커서를 대면 뜨는 프리뷰 설명에 차이가 있다.</p>

<p>인터페이스를 가리키기 때문에 인터페이스로 바로 이동이 가능하다. (커맨드 + b)</p>

<p>타입은 확장이 되지 않는다.<br />
인터페이스는 확장이 가능한데 반해 타입 별칭은 확장이 불가능하다. 따라서 <code class="language-plaintext highlighter-rouge">type</code> 보다는 <code class="language-plaintext highlighter-rouge">interface</code>로 선언해서 사용하는 것을 추천</p>]]></content><author><name>FE Developer</name></author><category term="typescript-part1" /><category term="typescript" /><summary type="html"><![CDATA[typescript 타입 별칭]]></summary></entry><entry><title type="html">[TypeScript-part1] 타입스크립트 기초 - 변수와 함수 타입 정의하기</title><link href="http://localhost:4000/typescript-part1/typescript-part1-beginners4/" rel="alternate" type="text/html" title="[TypeScript-part1] 타입스크립트 기초 - 변수와 함수 타입 정의하기" /><published>2022-07-11T00:00:00+09:00</published><updated>2022-07-11T00:00:00+09:00</updated><id>http://localhost:4000/typescript-part1/typescript-part1-beginners4</id><content type="html" xml:base="http://localhost:4000/typescript-part1/typescript-part1-beginners4/"><![CDATA[<h2 id="41-기본타입---문자열-숫자-배열">4.1 기본타입 - 문자열, 숫자, 배열</h2>

<ul>
  <li>
    <p><a href="https://joshua1988.github.io/ts/guide/basic-types.html">타입스크립트 변수 타입</a></p>
  </li>
  <li>Boolean</li>
  <li>Number</li>
  <li>String</li>
  <li>Object</li>
  <li>Array</li>
  <li>Tuple</li>
  <li>Enum</li>
  <li>Any</li>
  <li>Void</li>
  <li>Null</li>
  <li>Undefined</li>
  <li>Never</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/f9c7b10688ecc57c2ceb078dcd0e7f2a2ac87c6b">diff check</a></p>
</blockquote>

<h2 id="42-기본-타입---튜플-객체-진위값">4.2 기본 타입 - 튜플, 객체, 진위값</h2>

<ul>
  <li>튜플 : 배열의 특정 인덱스의 타입을 정의 하는것 <code class="language-plaintext highlighter-rouge">const address: [string, number] = ['gangnam', 100];</code></li>
  <li>객체 : 대다수의 데이터형이 객체이기 때문에 object로 했을때 호환되는 변수가 많을것이다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">person: object</code> 객체명에 object라고만 타입을 선언해도 에러가 나지 않는다.</li>
      <li>좀더 구체적으로 명시하고 싶다면 객체 안의 프로퍼티의 타입을 선언해 준다.</li>
    </ul>
  </li>
  <li>진위값 : boolean</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/b3089f7bbc8f254ca1eff138ace9def91ceee33e">diff check</a></p>
</blockquote>

<h2 id="43-함수-타입---파라미터-반환값">4.3 함수 타입 - 파라미터, 반환값</h2>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/bab4d27472f0ed03116a8d4c5686356b9ab19e84">diff check</a></p>
</blockquote>

<h2 id="44-함수-타입---파라미터를-제한하는-특성">4.4 함수 타입 - 파라미터를 제한하는 특성</h2>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/e3b4d4d02ac229811b127e215b5af92c1330d193">diff check</a></p>
</blockquote>

<h2 id="45-함수-타입---옵셔널-파라미터">4.5 함수 타입 - 옵셔널 파라미터</h2>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/45bd2b613db76a29e7cec836f9f8567761df2efa">diff check</a></p>
</blockquote>]]></content><author><name>FE Developer</name></author><category term="typescript-part1" /><category term="typescript" /><summary type="html"><![CDATA[typescript 기초]]></summary></entry><entry><title type="html">[TypeScript-part1] 타입스크립트 시작하기</title><link href="http://localhost:4000/typescript-part1/typescript-part1-beginners3/" rel="alternate" type="text/html" title="[TypeScript-part1] 타입스크립트 시작하기" /><published>2022-07-11T00:00:00+09:00</published><updated>2022-07-11T00:00:00+09:00</updated><id>http://localhost:4000/typescript-part1/typescript-part1-beginners3</id><content type="html" xml:base="http://localhost:4000/typescript-part1/typescript-part1-beginners3/"><![CDATA[<h2 id="31-타입스크립트-프로젝트-시작하는-방법라이브러리-설치와-tsc">3.1 타입스크립트 프로젝트 시작하는 방법(라이브러리 설치와 TSC)</h2>

<p>타입스크립트로 코드를 작성했을때, 브라우저에서 이 ts코드를 아직은 바로 인식할 수 없다.<br />
따라서 이 ts 파일을 브라우저가 인식할 수 있는 자바스크립트 파일로 변환을 해줘야하는데 이것을 컴파일(compile)이라고 한다.</p>

<p>현재 ts파일을 만든 폴더에서 터미널을 열어준 후에 node -v이 설치가 되어있는지 확인을 하고(v10 이상인지)<br />
<code class="language-plaintext highlighter-rouge">npm install typescript -g</code> 로 라이브러리를 설치한다.  -&gt; yarn add로 설치하면 안되는듯?</p>

<p><code class="language-plaintext highlighter-rouge">tsc index.ts</code> 명령어로 index.ts를 컴파일 시켜준다.</p>

<ul>
  <li><a href="https://www.inflearn.com/course/%ED%94%84%EB%9F%B0%ED%8A%B8%EC%97%94%EB%93%9C-%EC%9B%B9%ED%8C%A9/unit/37370?tab=curriculum">npm 무료강의</a></li>
  <li><a href="https://joshua1988.github.io/webpack-guide/build/node-npm.html#npm">NPM 소개 문서</a></li>
  <li><a href="https://joshua1988.github.io/webpack-guide/build/npm-module-install.html#npm-%EC%84%A4%EC%B9%98-%EB%AA%85%EB%A0%B9%EC%96%B4">npm i typescript -g 명령어 의미</a></li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/7f7ab5d62b0c40bf2f6a8df95e8b237b8715c662">diff check</a></p>
</blockquote>

<h2 id="32-타입스크립트-설정파일">3.2 타입스크립트 설정파일</h2>

<p>타입스크립트 설정파일<br />
타입스크립트를 변환하기 위해서 TSC를 사용했는데, 웹팩이나 그런트. 걸프 등과 같은 웹 테스크 매니저를 통해 자동화를 하는 것이 편하다.<br />
그래서 타입스크립트를 사용할 때 웹팩을 알고있는것이 좋다.</p>

<p>tsconfig.json으로 설정파일을 만들어서 정의</p>

<p>tsconfig.json로 파일을 생성하면 되는데 웹스톰에서 파일 생성시 자동으로 폼이 만들어져서 생성된다.</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="p">{</span><span class="w">
  </span><span class="nl">"compilerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"module"</span><span class="p">:</span><span class="w"> </span><span class="s2">"commonjs"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"target"</span><span class="p">:</span><span class="w"> </span><span class="s2">"es5"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"sourceMap"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"exclude"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"node_modules"</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>‘target’은 타입스크립트파일을 어떤 버전의 자바스크립트로 바꿔줄지 정하는 부분 es5로 셋팅해놓으면 es5 버전 자바스크립트로 컴파일(변환) 신버전을 원하면 es2016, esnext 이런 것도 입력 가능</p>

<p>‘module’은 자바스크립트 파일간 import 문법을 구현할 때 어떤 문법을 쓸지 정하는 곳 commonjs는 require 문법, es2015, esnext는 import 문법을 사용<br />
그래서 어느정도 IE 호환성을 원하면 es5, commonjs를 사용해야 한다. <br />
근데 정말 신버전 자바스크립트만 표현가능한 그런 문법들이 있는데(예를 들어 BigInt() 이런 함수와 bigint 타입)<br />
그런 것들은 esnext 등으로 버전을 올려줘야 사용가능</p>

<p>tsconfig에 들어갈 기타 항목들</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="rouge-code"><pre><span class="p">{</span><span class="w">
 </span><span class="nl">"compilerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">

  </span><span class="nl">"target"</span><span class="p">:</span><span class="w"> </span><span class="s2">"es5"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">'es</span><span class="mi">3</span><span class="err">'</span><span class="p">,</span><span class="w"> </span><span class="err">'es</span><span class="mi">5</span><span class="err">'</span><span class="p">,</span><span class="w"> </span><span class="err">'es</span><span class="mi">2015</span><span class="err">'</span><span class="p">,</span><span class="w"> </span><span class="err">'es</span><span class="mi">2016</span><span class="err">'</span><span class="p">,</span><span class="w"> </span><span class="err">'es</span><span class="mi">2017</span><span class="err">'</span><span class="p">,</span><span class="err">'es</span><span class="mi">2018</span><span class="err">'</span><span class="p">,</span><span class="w"> </span><span class="err">'esnext'</span><span class="w"> </span><span class="err">가능</span><span class="w">
  </span><span class="nl">"module"</span><span class="p">:</span><span class="w"> </span><span class="s2">"commonjs"</span><span class="p">,</span><span class="w"> </span><span class="err">//무슨</span><span class="w"> </span><span class="err">import</span><span class="w"> </span><span class="err">문법</span><span class="w"> </span><span class="err">쓸건지</span><span class="w"> </span><span class="err">'commonjs'</span><span class="p">,</span><span class="w"> </span><span class="err">'amd'</span><span class="p">,</span><span class="w"> </span><span class="err">'es</span><span class="mi">2015</span><span class="err">'</span><span class="p">,</span><span class="w"> </span><span class="err">'esnext'</span><span class="w">
  </span><span class="nl">"allowJs"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">js</span><span class="w"> </span><span class="err">파일들</span><span class="w"> </span><span class="err">ts에서</span><span class="w"> </span><span class="err">import해서</span><span class="w"> </span><span class="err">쓸</span><span class="w"> </span><span class="err">수</span><span class="w"> </span><span class="err">있는지</span><span class="w"> 
  </span><span class="nl">"checkJs"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">일반</span><span class="w"> </span><span class="err">js</span><span class="w"> </span><span class="err">파일에서도</span><span class="w"> </span><span class="err">에러체크</span><span class="w"> </span><span class="err">여부</span><span class="w"> 
  </span><span class="nl">"jsx"</span><span class="p">:</span><span class="w"> </span><span class="s2">"preserve"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">tsx</span><span class="w"> </span><span class="err">파일을</span><span class="w"> </span><span class="err">jsx로</span><span class="w"> </span><span class="err">어떻게</span><span class="w"> </span><span class="err">컴파일할</span><span class="w"> </span><span class="err">것인지</span><span class="w"> </span><span class="err">'preserve'</span><span class="p">,</span><span class="w"> </span><span class="err">'react-native'</span><span class="p">,</span><span class="w"> </span><span class="err">'react'</span><span class="w">
  </span><span class="nl">"declaration"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="err">//컴파일시</span><span class="w"> </span><span class="err">.d.ts</span><span class="w"> </span><span class="err">파일도</span><span class="w"> </span><span class="err">자동으로</span><span class="w"> </span><span class="err">함께생성</span><span class="w"> </span><span class="err">(현재쓰는</span><span class="w"> </span><span class="err">모든</span><span class="w"> </span><span class="err">타입이</span><span class="w"> </span><span class="err">정의된</span><span class="w"> </span><span class="err">파일)</span><span class="w">
  </span><span class="nl">"outFile"</span><span class="p">:</span><span class="w"> </span><span class="s2">"./"</span><span class="p">,</span><span class="w"> </span><span class="err">//모든</span><span class="w"> </span><span class="err">ts파일을</span><span class="w"> </span><span class="err">js파일</span><span class="w"> </span><span class="err">하나로</span><span class="w"> </span><span class="err">컴파일해줌</span><span class="w"> </span><span class="err">(module이</span><span class="w"> </span><span class="err">none</span><span class="p">,</span><span class="w"> </span><span class="err">amd</span><span class="p">,</span><span class="w"> </span><span class="err">system일</span><span class="w"> </span><span class="err">때만</span><span class="w"> </span><span class="err">가능)</span><span class="w">
  </span><span class="nl">"outDir"</span><span class="p">:</span><span class="w"> </span><span class="s2">"./"</span><span class="p">,</span><span class="w"> </span><span class="err">//js파일</span><span class="w"> </span><span class="err">아웃풋</span><span class="w"> </span><span class="err">경로바꾸기</span><span class="w">
  </span><span class="nl">"rootDir"</span><span class="p">:</span><span class="w"> </span><span class="s2">"./"</span><span class="p">,</span><span class="w"> </span><span class="err">//루트경로</span><span class="w"> </span><span class="err">바꾸기</span><span class="w"> </span><span class="err">(js</span><span class="w"> </span><span class="err">파일</span><span class="w"> </span><span class="err">아웃풋</span><span class="w"> </span><span class="err">경로에</span><span class="w"> </span><span class="err">영향줌)</span><span class="w">
  </span><span class="nl">"removeComments"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="err">//컴파일시</span><span class="w"> </span><span class="err">주석제거</span><span class="w"> 

  </span><span class="nl">"strict"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="err">//strict</span><span class="w"> </span><span class="err">관련</span><span class="p">,</span><span class="w"> </span><span class="err">noimplicit</span><span class="w"> </span><span class="err">어쩌구</span><span class="w"> </span><span class="err">관련</span><span class="w"> </span><span class="err">모드</span><span class="w"> </span><span class="err">전부</span><span class="w"> </span><span class="err">켜기</span><span class="w">
  </span><span class="nl">"noImplicitAny"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="err">//any타입</span><span class="w"> </span><span class="err">금지</span><span class="w"> </span><span class="err">여부</span><span class="w">
  </span><span class="nl">"strictNullChecks"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="kc">null</span><span class="p">,</span><span class="w"> </span><span class="err">undefined</span><span class="w"> </span><span class="err">타입에</span><span class="w"> </span><span class="err">이상한</span><span class="w"> </span><span class="err">짓</span><span class="w"> </span><span class="err">할시</span><span class="w"> </span><span class="err">에러내기</span><span class="w"> 
  </span><span class="nl">"strictFunctionTypes"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="err">//함수파라미터</span><span class="w"> </span><span class="err">타입체크</span><span class="w"> </span><span class="err">강하게</span><span class="w"> 
  </span><span class="nl">"strictPropertyInitialization"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="err">//class</span><span class="w"> </span><span class="err">constructor</span><span class="w"> </span><span class="err">작성시</span><span class="w"> </span><span class="err">타입체크</span><span class="w"> </span><span class="err">강하게</span><span class="w">
  </span><span class="nl">"noImplicitThis"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="err">//this</span><span class="w"> </span><span class="err">키워드가</span><span class="w"> </span><span class="err">any</span><span class="w"> </span><span class="err">타입일</span><span class="w"> </span><span class="err">경우</span><span class="w"> </span><span class="err">에러내기</span><span class="w">
  </span><span class="nl">"alwaysStrict"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="err">//자바스크립트</span><span class="w"> </span><span class="s2">"use strict"</span><span class="w"> </span><span class="err">모드</span><span class="w"> </span><span class="err">켜기</span><span class="w">

  </span><span class="nl">"noUnusedLocals"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="err">//쓰지않는</span><span class="w"> </span><span class="err">지역변수</span><span class="w"> </span><span class="err">있으면</span><span class="w"> </span><span class="err">에러내기</span><span class="w">
  </span><span class="nl">"noUnusedParameters"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="err">//쓰지않는</span><span class="w"> </span><span class="err">파라미터</span><span class="w"> </span><span class="err">있으면</span><span class="w"> </span><span class="err">에러내기</span><span class="w">
  </span><span class="nl">"noImplicitReturns"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="err">//함수에서</span><span class="w"> </span><span class="err">return</span><span class="w"> </span><span class="err">빼먹으면</span><span class="w"> </span><span class="err">에러내기</span><span class="w"> 
  </span><span class="nl">"noFallthroughCasesInSwitch"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="err">//switch문</span><span class="w"> </span><span class="err">이상하면</span><span class="w"> </span><span class="err">에러내기</span><span class="w"> 
 </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li><a href="https://codingapple.com/unit/typescript-tsconfig-json/">tsconfig 파일 설정 옵션 참고</a></li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/3750e167117e25c273048bb1f1b04424b6c2bdda">diff check</a></p>
</blockquote>

<h2 id="33-타입스크립트-플레이그라운드-사이트-소개">3.3 타입스크립트 플레이그라운드 사이트 소개</h2>

<ul>
  <li><a href="https://www.typescriptlang.org/play">플레이그라운드 사이트</a></li>
  <li><a href="https://babeljs.io/">바벨사이트</a></li>
</ul>

<p>플레이그라운드는 타입스크립트를 자바스크립트로 변환해서 보여주는 사이트 입니다.<br />
바벨은 자바스크립트의 최신문법을 최대한 많은 브라우저가 호환할 수 있도록 변환해주는 도구입니다.</p>

<p>바벨 &gt; Try it out &gt; TARGETS 안에 내용 지우고</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="c1">// 왼쪽에 입력하면</span>
<span class="kd">const</span> <span class="nx">sum</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span> 

<span class="c1">// 오른쪽에 변환</span>
<span class="dl">"</span><span class="s2">use strict</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>플레이그라운드에서 클래스에 타입을 정의하고 이것을 es5로 변환해보면</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="c1">// 왼쪽에 타입스크립트를 입력</span>
<span class="kd">class</span> <span class="nx">Student</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">tihs</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// es5로 설정해서 오른쪽에 변환</span>
<span class="dl">"</span><span class="s2">use strict</span><span class="dl">"</span>
<span class="kd">var</span> <span class="nx">Student</span> <span class="o">=</span> <span class="cm">/** @class */</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="kd">function</span> <span class="nx">Student</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">Student</span><span class="p">;</span>
<span class="p">}());</span>
</pre></td></tr></tbody></table></code></pre></div></div>]]></content><author><name>FE Developer</name></author><category term="typescript-part1" /><category term="typescript" /><summary type="html"><![CDATA[typescript 시작하기]]></summary></entry><entry><title type="html">[TypeScript-part1] 강의 오리엔테이션</title><link href="http://localhost:4000/typescript-part1/typescript-part1-beginners1/" rel="alternate" type="text/html" title="[TypeScript-part1] 강의 오리엔테이션" /><published>2022-07-09T00:00:00+09:00</published><updated>2022-07-09T00:00:00+09:00</updated><id>http://localhost:4000/typescript-part1/typescript-part1-beginners1</id><content type="html" xml:base="http://localhost:4000/typescript-part1/typescript-part1-beginners1/"><![CDATA[<h2 id="타입스크립트-오리엔테이션">타입스크립트 오리엔테이션</h2>

<p>자바스크립트로 제작된 COVID-19 세계 현황판을 타입스크립트로 변환해보면서 타입스크립트의 개념과 기초를 배워보는 강좌</p>

<ul>
  <li>구현되어 있는 자바스크립트를 타입스크립트로 변환하기 위해 필요한 개념들을 설명하고 실습</li>
  <li>그 후에 실제 프로젝트에 적용해보는 순서로 진행</li>
</ul>

<p>강의 대상</p>
<ul>
  <li>자바스크립트 문법을 알고 있는 웹 개발자</li>
  <li>자바스크립트로 좀 더 단단한 웹 애플리케이션을 만들고 싶은 웹 개발자(버그가 좀 더 없었으면 좋겠다)</li>
  <li>타입스크립트로 되어 있는 프로젝트에서 퍼블리싱을 해야 하는 퍼블리셔</li>
</ul>

<h2 id="개발환경-안내">개발환경 안내</h2>

<ul>
  <li>
    <p><a href="https://github.com/joshua1988/learn-typescript">강의 레포지토리 주소</a></p>
  </li>
  <li><a href="https://www.google.com/intl/ko/chrome/">Chrome</a></li>
  <li><a href="https://code.visualstudio.com/">Visual Studio Code</a></li>
  <li><a href="https://nodejs.org/ko/">Node.js LTS 버전(v10.x 이상)</a></li>
  <li><a href="https://git-scm.com/downloads">Git</a>
💡 참고 사항 : 수업에서는 VSCode를 기준으로 설명/ 별도로 선호하는 IDE가 있다면 그걸 써도 무방 😄</li>
</ul>

<p>VSCode 플러그인 목록</p>

<ul>
  <li>색 테마 : <a href="https://marketplace.visualstudio.com/items?itemName=sdras.night-owl">Night Owl</a></li>
  <li>파일 아이콘 테마 : <a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme">Material Icon Theme</a></li>
  <li>문법 검사 : ESLint, <a href="https://marketplace.visualstudio.com/items?itemName=eg2.tslint">TSLint</a></li>
  <li>실습 환경 보조 : <a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer">Live Server</a></li>
  <li>기타 : <a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">Prettier</a>, <a href="https://marketplace.visualstudio.com/items?itemName=alefragnani.project-manager">Project Manager</a>, <a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag">Auto Close Tag</a>, <a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens">GitLens</a>, <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.atom-keybindings">Atom Keymap</a>, <a href="https://marketplace.visualstudio.com/items?itemName=isudox.vscode-jetbrains-keybindings">Jetbrains IDE Keymap</a> 등</li>
</ul>

<h2 id="수업-소스-레포지토리-클론-및-vs-code로-폴더-열기">수업 소스 레포지토리 클론 및 VS Code로 폴더 열기</h2>

<p>상단 강의 레포지토리 주소 url로 이동해서 터미널이나 VS Code(또는 사용하는 프로그램)에서 git 명령어로 git clone을 받는다.</p>

<p><code class="language-plaintext highlighter-rouge">git clone 클론받을 url</code></p>

<h2 id="타입스크립트-강의-교안">타입스크립트 강의 교안</h2>

<p><a href="https://joshua1988.github.io/ts/">타입스크립트 핸드북</a></p>]]></content><author><name>FE Developer</name></author><category term="typescript-part1" /><category term="typescript" /><summary type="html"><![CDATA[typescript에 대해서]]></summary></entry><entry><title type="html">[TypeScript-part1] 타입스크립트 소개와 배경</title><link href="http://localhost:4000/typescript-part1/typescript-part1-beginners2/" rel="alternate" type="text/html" title="[TypeScript-part1] 타입스크립트 소개와 배경" /><published>2022-07-09T00:00:00+09:00</published><updated>2022-07-09T00:00:00+09:00</updated><id>http://localhost:4000/typescript-part1/typescript-part1-beginners2</id><content type="html" xml:base="http://localhost:4000/typescript-part1/typescript-part1-beginners2/"><![CDATA[<h2 id="21-타입스크립트란">2.1 타입스크립트란?</h2>

<p>타입스크립트는 자바스크립트에 타입을 부여한 언어.<br />
자바스크립트의 확장된 언어라고 볼 수 있다. 타입스크립트는 자바스크립트와 다르게 브라우저에서 실행하기 위해 파일을 한번 변환해줘야 함.<br />
이 과정을 <code class="language-plaintext highlighter-rouge">컴파일(compile)</code>이라고 한다.</p>

<h2 id="22-왜-타입스크립트를-쓰면-좋은가요">2.2 왜 타입스크립트를 쓰면 좋은가요?</h2>

<ul>
  <li><a href="https://github.com/axios/axios">HTTP 요청 라이브러리 axios</a></li>
  <li><a href="https://joshua1988.github.io/web-development/javascript/promise-for-beginners/">Promise 소개 글</a></li>
  <li><a href="https://jsonplaceholder.typicode.com/">JSONPlaceHolder 사이트</a></li>
</ul>

<p>clone 받았던 레포지토리에서 <code class="language-plaintext highlighter-rouge">why-ts</code>폴더의 <code class="language-plaintext highlighter-rouge">index.html</code>을 참고한다.<br />
사용자정보를 받아오는 웹페이지를 작성해 둔 상태이다.</p>

<p>axios를 이용해서 유저 정보를 api호출을 통해 유저 정보를 가져오자.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">https://jsonplaceholder.typicode.com/users</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">startApp</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">axios</span>
    <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
      <span class="nx">user</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
      <span class="c1">// TODO: 이름, 이메일, 주소 표시하기</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span>
      <span class="nx">username</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="nx">user</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">name</span><span class="p">;</span>
      <span class="nx">email</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="nx">user</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">email</span><span class="p">;</span>
      <span class="nx">address</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="nx">user</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">address</span><span class="p">;</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/a390b64ee3e1c51f645359c7536ff0344ef051a0">diff check</a></p>
</blockquote>

<p>위와 같이 작성해도 코드상에서는 문제가 없어 보인다.<br />
하지만 화면에서 확인해보면 <code class="language-plaintext highlighter-rouge">주소: [object Object]</code>라는 문구가 나온다.<br />
address가 객체형태이기 때문이다.<br />
<code class="language-plaintext highlighter-rouge">address.innerText = user[0].address.street;</code>라고 작성한다면 문제가 없다.<br />
그러나 <code class="language-plaintext highlighter-rouge">address.innerText = user[0].addres.street;</code> 이런식으로 오타가 있으면 화면에서는 undefined를 찍어낸다.</p>

<p>이렇게 코드상에서 잘못 입력하더라도 화면에서 직접 확인해야지 해당 코드가 잘못 되었는지 확인이 가능하다. <br />
이런 부분들을 타입스크립크를 사용하면 더 명확하게 할 수 있는 부분이다.</p>

<h2 id="23-자바스크립트에-타입이-있을-때의-첫-번째-장점">2.3 자바스크립트에 타입이 있을 때의 첫 번째 장점</h2>

<p>타입스크립트의 2가지 관점에서 자바스크립트 코드의 품질과 개발 생산성을 높인다.</p>

<ul>
  <li>에러의 사전 방지</li>
  <li>코드 가읻 및 자동 완성(개발 생산성 향상)</li>
</ul>

<p>에러의 사전 방지 : 에러를 사전에 미리 예방</p>

<p>Jsdoc의 표준 문법 : /** 치고 엔터를 치면 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * @typedef {object} Address
 * @property {string} street
 * @property {string} city
 */</span>

<span class="cm">/**
 * @typedef {object} User
 * @property {string} name
 * @property {string} email
 * @property {Address} address
 */</span>
<span class="cm">/**
 * @returns {Promise&lt;User&gt;}
 */</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>타입스크립트 이전에 자바스크립트에서는 위와 같은 Jsdoc 규칙으로 주석을 달아서 어떤 데이터타입인지 어떤 속성인지 명시를 했다.<br />
타입스크립트를 사용하면 어떤 데이터 타입이 들어오는지 속성이 무엇이 있는지 코드상에서 바로바로 잡아준다.</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/26e35a45796ef357ad39659cc735598786b6cd6e">diff check</a></p>
</blockquote>

<h2 id="24-자바스크립트에-타입이-있을-때의-두-번째-장점">2.4 자바스크립트에 타입이 있을 때의 두 번째 장점</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="c1">// sample.js</span>

<span class="kd">function</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">sum</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="dl">'</span><span class="s1">20</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// 1020</span>

<span class="kd">function</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">sum</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="dl">'</span><span class="s1">20</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// 1020</span>

<span class="c1">// 자바스크립트는 숫자와 문자를 더하면 전부다 문자로 취급</span>
<span class="c1">// 타입스크립트를 사용하면 a와 b에 모두 숫자만 들어오게 정의할 수 있다.</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="c1">//sample.ts</span>

<span class="kd">function</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">:</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">b</span><span class="p">:</span> <span class="nx">number</span><span class="p">):</span> <span class="nx">number</span> <span class="p">{</span> <span class="c1">// a와 b는 number, 그리고 함수가 반환하는 값의 타입까지 number라고 정의</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">sum</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
<span class="nx">sum</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="dl">'</span><span class="s1">20</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// 지정한 타입과 다른 타입의 값을 넣으면 에러가 남</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">const result = sum(10, 20);</code> 이런식으로 변수에 넣어주면 <code class="language-plaintext highlighter-rouge">result.</code>을 찍어보면
result는 number타입이 명시 되어 있기 때문에 number에서 제공하는 property를 전부 활용 할 수 있게 된다. 타입스크립트가 아니라면 온갖 프로퍼티가 다 나온다.</p>

<p>이런 코드 자동완성 기능을 intellisence라고 한다. (또는 code completion)
<a href="https://www.jetbrains.com/help/webstorm/auto-completing-code.html">코드 자동완성</a></p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/9dac152d5b0d0f0a7238b9f6073678e48c37b24a">diff check</a></p>
</blockquote>

<h2 id="25-자바스크립트를-타입스크립트처럼-코딩하는-방법">2.5 자바스크립트를 타입스크립트처럼 코딩하는 방법</h2>

<p>앞서 사용했던 것 처럼 Jsdoc을 사용해서 다시 정의해보면,</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 *
 * @param {number} a 첫번째 숫자
 * @param {number} b 두번째 숫자
 */</span>
<span class="kd">function</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">){</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>sum함수에 커서를 올려보면 preview가 보이는데 a와 b에 number가 들어가는게 보인다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nx">sum</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
<span class="nx">sum</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="dl">'</span><span class="s1">20</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// 그러나 이렇게 넣어도 자바스크립트에서는 에러로 잡지는 않는다. 웹스톰에서는 잡는듯..? 설정을 미리 따로 해줘서 그런것 같기도? 잘 모르겠다...ㅠ</span>
<span class="c1">// vs code에서 자바스크립트에 Jsdoc주석 위에 // @ts-check 추가 하면 ts 문법으로 에러 검사해준다고 함 </span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/22dbd8bdf75373b402624a3b82b387a8d3e67aa5">diff check</a></p>
</blockquote>]]></content><author><name>FE Developer</name></author><category term="typescript-part1" /><category term="typescript" /><summary type="html"><![CDATA[typescript 소개]]></summary></entry><entry><title type="html">[TypeScript] #3 인터페이스</title><link href="http://localhost:4000/typescript/typescript3/" rel="alternate" type="text/html" title="[TypeScript] #3 인터페이스" /><published>2022-06-09T00:00:00+09:00</published><updated>2022-06-09T00:00:00+09:00</updated><id>http://localhost:4000/typescript/typescript3</id><content type="html" xml:base="http://localhost:4000/typescript/typescript3/"><![CDATA[<h2 id="오브젝트-인터페이스">오브젝트 인터페이스</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">user</span><span class="p">:</span><span class="nx">object</span><span class="p">;</span>

<span class="nx">user</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">abc</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">age</span><span class="p">:</span> <span class="mi">20</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>타입스크립트에서 객체를 만들고 오브젝트 타입으로 정의한 후 콘솔로 찍어보면 에러가 발생한다.<br />
오브젝트에는 특정 속성 값에 대한 정보가 없기 때문이다. <code class="language-plaintext highlighter-rouge">name</code>에 커서를 올려보면 오브젝트에는 name이 없다고 뜬다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="kr">interface</span> <span class="nx">User</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">age</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">user</span><span class="p">:</span> <span class="nx">User</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">abc</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">age</span><span class="p">:</span> <span class="mi">20</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">age</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>이제 <code class="language-plaintext highlighter-rouge">console.log(user.)</code>까지만 찍어도 어떤 프로퍼티들이 있는지 힌트가 뜬다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="nx">type</span> <span class="nx">Score</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">A</span><span class="dl">'</span> <span class="o">|</span> <span class="dl">'</span><span class="s1">B</span><span class="dl">'</span> <span class="o">|</span> <span class="dl">'</span><span class="s1">C</span><span class="dl">'</span> <span class="o">|</span> <span class="dl">'</span><span class="s1">F</span><span class="dl">'</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">User</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">age</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
    <span class="nx">gender</span><span class="p">?:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nx">readonly</span> <span class="nx">birthYear</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
    <span class="p">[</span><span class="nx">grade</span><span class="p">:</span> <span class="nx">number</span><span class="p">]:</span> <span class="nx">Score</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">user</span><span class="p">:</span> <span class="nx">User</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">abc</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">age</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
    <span class="na">birthYear</span><span class="p">:</span> <span class="mi">2000</span><span class="p">,</span>
    <span class="mi">1</span><span class="p">:</span> <span class="dl">'</span><span class="s1">A</span><span class="dl">'</span><span class="p">,</span>
    <span class="mi">2</span><span class="p">:</span> <span class="dl">'</span><span class="s1">B</span><span class="dl">'</span>
<span class="p">}</span>

<span class="nx">user</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="nx">user</span><span class="p">.</span><span class="nx">gender</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">male</span><span class="dl">"</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">age</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>여기에서 <code class="language-plaintext highlighter-rouge">user.age = 10;</code>으로 변경은 문제가 없지만 <code class="language-plaintext highlighter-rouge">user.gender = "male"</code>은 에러가 발생한다.<br />
interface안에 있어도 되고 없어도 되는 옵셔널 속성으로 넣어주고 추가하면 된다.<br />
readonly속성은 생성할때만 할당이 가능하고 이후에는 수정이 불가하다.</p>

<p>여러가지 추가해야될 속성이 생길때, 예들들어 학년별로 성적을 추가해야한다고 할때<br />
옵셔널 말고 다른방법으로는 <code class="language-plaintext highlighter-rouge">[grade: number]</code> -&gt; 문자열 인덱스 서명을 추가하는 방법</p>

<h2 id="인터페이스에-함수">인터페이스에 함수</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="kr">interface</span> <span class="nx">Add</span> <span class="p">{</span>
    <span class="p">(</span><span class="nx">num1</span><span class="p">:</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">num2</span><span class="p">:</span> <span class="nx">number</span><span class="p">):</span> <span class="nx">number</span><span class="p">;</span> <span class="c1">// : number 는 리턴값이 number라는 뜻</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">add</span><span class="p">:</span> <span class="nx">Add</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">){</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">add</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>

<span class="kr">interface</span> <span class="nx">isAdult</span> <span class="p">{</span>
    <span class="p">(</span><span class="nx">age</span><span class="p">:</span><span class="nx">number</span><span class="p">):</span> <span class="nx">boolean</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">a</span><span class="p">:</span> <span class="nx">isAdult</span> <span class="o">=</span> <span class="p">(</span><span class="nx">age</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">age</span> <span class="o">&gt;</span> <span class="mi">19</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">a</span><span class="p">(</span><span class="mi">33</span><span class="p">)</span> <span class="c1">// true</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="인터페이스-확장extends">인터페이스 확장(extends)</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="kr">interface</span> <span class="nx">Car</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">wheels</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
    <span class="nx">start</span><span class="p">():</span> <span class="k">void</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">Toy</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">ToyCar</span> <span class="kd">extends</span> <span class="nx">Car</span><span class="p">,</span> <span class="nx">Toy</span> <span class="p">{</span>
    <span class="nl">price</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>]]></content><author><name>FE Developer</name></author><category term="typescript" /><category term="typescript" /><category term="interface" /><summary type="html"><![CDATA[타입스크립트]]></summary></entry></feed>
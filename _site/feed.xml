<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-09-07T08:21:38+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">FE Developer Note </title><subtitle>An amazing website.</subtitle><author><name>FE Developer</name></author><entry><title type="html">[JavaScript: Beginner] 2 - 연산자(Operator)</title><link href="http://localhost:4000/js-beginner/js-beginner2/" rel="alternate" type="text/html" title="[JavaScript: Beginner] 2 - 연산자(Operator)" /><published>2022-09-06T00:00:00+09:00</published><updated>2022-09-06T00:00:00+09:00</updated><id>http://localhost:4000/js-beginner/js-beginner2</id><content type="html" xml:base="http://localhost:4000/js-beginner/js-beginner2/"><![CDATA[<h2 id="21-연산자-표현식">2.1 연산자, 표현식</h2>

<p>표현식(Expression) 형태</p>
<ul>
  <li>1 + 2</li>
  <li>var total = 1 + 2;</li>
  <li>var value = total / (2 + 3);</li>
  <li>‘표현식을 평가’ 한다고 한다.</li>
  <li>표현식을 평가하면 결과가 반환되며 이를 <code class="language-plaintext highlighter-rouge">평가결과</code> 라고 한다.</li>
</ul>

<h2 id="22-할당-연산자-해석실행-순서">2.2 할당 연산자, 해석/실행 순서</h2>

<h2 id="단일-할당-연산자">단일 할당 연산자</h2>]]></content><author><name>FE Developer</name></author><category term="js-beginner" /><category term="javascript" /><category term="operator" /><summary type="html"><![CDATA[연산자, 표현식]]></summary></entry><entry><title type="html">[JavaScript: Beginner] 1 - 기본문법</title><link href="http://localhost:4000/js-beginner/js-beginner1/" rel="alternate" type="text/html" title="[JavaScript: Beginner] 1 - 기본문법" /><published>2022-09-06T00:00:00+09:00</published><updated>2022-09-06T00:00:00+09:00</updated><id>http://localhost:4000/js-beginner/js-beginner1</id><content type="html" xml:base="http://localhost:4000/js-beginner/js-beginner1/"><![CDATA[<h2 id="11-변수">1.1 변수</h2>

<ul>
  <li>variable : 값을 저장하는 영역</li>
  <li>변수에 저장된 값의 재사용</li>
</ul>

<p>변수 선언 방법</p>
<blockquote>
  <p>var book = ‘책’<br />
var book = ‘책’, point = 123;</p>
</blockquote>

<h2 id="12-상수-진수">1.2 상수, 진수</h2>

<p>상수</p>
<ul>
  <li>값을 변경할 수 없는 값</li>
  <li>상수 변수: 상수가 설정된 변수
    <ul>
      <li>js는 변수의 값을 변경할 수 있으므로 상수 변수는 선언적 의미</li>
    </ul>
  </li>
  <li>코딩 관례로 영문 대문자 사용</li>
  <li>var ONE = 1;</li>
  <li>상수로 사용한다는 시맨틱 선언</li>
</ul>

<h2 id="13-데이터-타입data-type">1.3 데이터 타입(Data Type)</h2>

<ul>
  <li>숫자 타입: 123</li>
  <li>문자 타입: ‘sports’</li>
</ul>

<p>typeof 연산자</p>
<ul>
  <li>데이터(값) 타입 반환</li>
  <li>typeof value에 데이터를 작성</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="kd">var</span> <span class="nx">point</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">point</span><span class="p">);</span> <span class="c1">// number</span>

<span class="kd">var</span> <span class="nx">book</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">책</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">book</span><span class="p">);</span> <span class="c1">// string</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>키워드(Keywork)</p>
<ul>
  <li>특별한 기능을 가진 단어</li>
</ul>

<p>데이터 타입(자료형)</p>
<ul>
  <li>데이터는 타입을 가짐</li>
  <li>js는 데이터를 기준으로 타입을 결정</li>
  <li>타입을 먼저 선언하고 타입에 맞는 데이터를 할당하지 않음</li>
</ul>

<h2 id="14-number-타입-string-타입">1.4 Number 타입, String 타입</h2>

<p>Number타입</p>
<ul>
  <li>Number타입의 특수한 3개 값
    <ul>
      <li>NaN: Not-a-Number</li>
      <li>Infinity 양수 무한대</li>
      <li>-Infinity 음수 무한대</li>
    </ul>
  </li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kd">var</span> <span class="nx">point</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">*</span> <span class="dl">'</span><span class="s1">A</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">point</span><span class="p">);</span> <span class="c1">// NaN</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="15-undefined-null-타입">1.5 Undefined, Null 타입</h2>

<p>Undefined(대문자)타입</p>
<ul>
  <li>값: undifined(소문자)</li>
</ul>

<p>변수의 디폴트 값</p>
<ul>
  <li>var point;</li>
  <li>변수를 선언만 한 것으로 undefined가 초기값으로 설정</li>
  <li>변수에 값을 할당하지 않은 것을 나타내는 시맨틱</li>
</ul>

<p>변수에 undefined 할당 가능</p>

<p>Null(대문자)타입</p>
<ul>
  <li>값: null(소문자)</li>
</ul>

<p>null과 undefined 차이</p>
<ul>
  <li>undefined는 단지 변수만 선언</li>
  <li>null을 할당해야 값이 null이 됨</li>
  <li>의도적으로 값을 할당한 것으로 코드를 수행한 것이 된다.</li>
</ul>

<h2 id="16-boolean-타입-object-타입">1.6 Boolean 타입, Object 타입</h2>

<p>Object 형태</p>
<ul>
  <li>{name: value} 형태</li>
</ul>

<p>프로퍼티(Property)</p>
<ul>
  <li>name과 value 하나를 지칭</li>
  <li>Object는 프로퍼티 집합</li>
</ul>]]></content><author><name>FE Developer</name></author><category term="js-beginner" /><category term="javascript" /><category term="type" /><summary type="html"><![CDATA[변수, 주석, 정수, 실수, 상수, 진수, 데이터타입]]></summary></entry><entry><title type="html">[javascript]Chart.js의 option을 활용해서 커스텀하기</title><link href="http://localhost:4000/javascript/chartjs/" rel="alternate" type="text/html" title="[javascript]Chart.js의 option을 활용해서 커스텀하기" /><published>2022-08-17T00:00:00+09:00</published><updated>2022-08-17T00:00:00+09:00</updated><id>http://localhost:4000/javascript/chartjs</id><content type="html" xml:base="http://localhost:4000/javascript/chartjs/"><![CDATA[<h2 id="chartjs">Chart.js</h2>

<p><a href="https://www.youtube.com/watch?v=aAzZDG_L-i4">Chart.js 옵션 활용하는 유튜브 영상</a></p>

<ul>
  <li>상단 데이터 라벨 이미지 모양 커스텀</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="nx">options</span><span class="p">:</span> <span class="p">{</span>
    <span class="nl">plugins</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">legend</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">labels</span><span class="p">:</span> <span class="p">{</span>
                <span class="na">usePointStyle</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// false가 default라서 true값을 줘야 모양 커스텀 가능</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>xamarin 컴포넌트 syncfusion 라이브러리?<br />
<a href="https://www.syncfusion.com/">syncfusion</a></li>
</ul>]]></content><author><name>FE Developer</name></author><category term="javascript" /><category term="Chart.js" /><summary type="html"><![CDATA[Chart.js]]></summary></entry><entry><title type="html">Stylelint: browserslist: caniuse-lite is outdated. Please run 에러</title><link href="http://localhost:4000/tips/stylelint-error1/" rel="alternate" type="text/html" title="Stylelint: browserslist: caniuse-lite is outdated. Please run 에러" /><published>2022-08-08T00:00:00+09:00</published><updated>2022-08-08T00:00:00+09:00</updated><id>http://localhost:4000/tips/stylelint-error1</id><content type="html" xml:base="http://localhost:4000/tips/stylelint-error1/"><![CDATA[<h2 id="stylelint-error-인가">stylelint error 인가?</h2>

<p>웹스톰 사용중 <code class="language-plaintext highlighter-rouge">Stylelint: browserslist: caniuse-lite is outdated. Please run</code> 어떤 파일 상단에 이런 에러문구가 나타남</p>

<p>세부정보를 눌러보면</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nx">Browserslist</span><span class="p">:</span> <span class="nx">caniuse</span><span class="o">-</span><span class="nx">lite</span> <span class="nx">is</span> <span class="nx">outdated</span><span class="p">.</span> <span class="nx">Please</span> <span class="nx">run</span><span class="p">:</span>
  <span class="nx">npx</span> <span class="nx">browserslist</span><span class="p">@</span><span class="nd">latest</span> <span class="o">--</span><span class="nx">update</span><span class="o">-</span><span class="nx">db</span>
  <span class="nx">Why</span> <span class="nx">you</span> <span class="nx">should</span> <span class="k">do</span> <span class="nx">it</span> <span class="nx">regularly</span><span class="p">:</span> <span class="nx">https</span><span class="p">:</span><span class="c1">//github.com/browserslistbrowserslist#browsers-data-updating</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>이런 정보가 나온다.</p>

<p>서치를 해보니 브라우저리스트를 업데이트 하라는거 같음 -&gt; <code class="language-plaintext highlighter-rouge">npx browserslist@latest --update-db</code></p>

<p>일단은 문제가 에러문구는 뜨지만 컴파일시 딱히 문제가 있지는 않으므로 업데이트를 하지는 않았음, 추후에 컴파일시 문제가 생기면 업데이트 예정.(22.08.08 - QRScanner.vue)</p>]]></content><author><name>FE Developer</name></author><category term="tips" /><category term="webstorm" /><category term="stylelint" /><category term="error" /><summary type="html"><![CDATA[웹스톰 사용중 stylelint error?]]></summary></entry><entry><title type="html">[vue]파일 경로 - 이미지 스프라이트 사용하면서..</title><link href="http://localhost:4000/vue-study/fe-vue-file-path/" rel="alternate" type="text/html" title="[vue]파일 경로 - 이미지 스프라이트 사용하면서.." /><published>2022-08-02T00:00:00+09:00</published><updated>2022-08-02T00:00:00+09:00</updated><id>http://localhost:4000/vue-study/fe-vue-file-path</id><content type="html" xml:base="http://localhost:4000/vue-study/fe-vue-file-path/"><![CDATA[<h2 id="이미지-스프라이트-사용시-파일-경로-설정할때-절대-경로-설정-하기">이미지 스프라이트 사용시 파일 경로 설정할때 절대 경로 설정 하기</h2>

<p>절대 경로<br />
@: src(루트)부터 시작</p>

<p>상대 경로
../: 상위 폴더로 하나 올라가기
./: 현재 같은 폴더</p>

<h3 id="개인정보처리방침-서비스에-이미지-스프라이트-절대경로">개인정보처리방침 서비스에 이미지 스프라이트 절대경로</h3>

<ul>
  <li>
    <p>policy 서비스 절대경로 설정시<br />
<code class="language-plaintext highlighter-rouge">@/assets/images/sprites/sprite-${basename}.png</code></p>
  </li>
  <li>
    <p>dl 절대경로 설정시
<code class="language-plaintext highlighter-rouge">~@/assets/images/sprites/sprite-${basename}.png</code><br />
위와 같이 물결하나 추가해줘야 했음..</p>
  </li>
</ul>

<p><a href="https://stackoverflow.com/questions/51621458/for-handling-assets-in-vue-js-not-working">참고 stack overflow</a></p>

<p><a href="https://stackoverflow.com/questions/51531821/vue-cli-include-image-from-assets-folder-in-static-file#answer-52097176">webpack 정적 자산 처리 stack overflow</a></p>

<p><a href="https://vuejs-templates.github.io/webpack/static.html">vue.js 정적자산처리</a></p>]]></content><author><name>FE Developer</name></author><category term="vue-study" /><category term="file" /><category term="path" /><summary type="html"><![CDATA[파일 경로]]></summary></entry><entry><title type="html">[TypeScript-part1] 타입 가드</title><link href="http://localhost:4000/typescript-part1/typescript-part1-beginners15/" rel="alternate" type="text/html" title="[TypeScript-part1] 타입 가드" /><published>2022-07-22T00:00:00+09:00</published><updated>2022-07-22T00:00:00+09:00</updated><id>http://localhost:4000/typescript-part1/typescript-part1-beginners15</id><content type="html" xml:base="http://localhost:4000/typescript-part1/typescript-part1-beginners15/"><![CDATA[<h2 id="151-타입-가드를-위한-예제-소개">15.1 타입 가드를 위한 예제 소개</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="kr">interface</span> <span class="nx">Developer</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">skill</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">age</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">introduce</span><span class="p">():</span> <span class="nx">Developer</span> <span class="o">|</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Tony</span><span class="dl">'</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">33</span><span class="p">,</span> <span class="na">skill</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Iron Making</span><span class="dl">'</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">tony</span> <span class="o">=</span> <span class="nx">introduce</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">tony</span><span class="p">.</span><span class="nx">skill</span><span class="p">);</span> <span class="c1">// 유니온 타입은 공통된 속성에만 접근 가능해서 에러가 난다.</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같은 에러를 해결하기 위해 타입 단언을 활용 할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="c1">// 타입단언</span>
<span class="k">if</span> <span class="p">((</span><span class="nx">tony</span> <span class="k">as</span> <span class="nx">Developer</span><span class="p">).</span><span class="nx">skill</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">skill</span> <span class="o">=</span> <span class="p">(</span><span class="nx">tony</span> <span class="k">as</span> <span class="nx">Developer</span><span class="p">).</span><span class="nx">skill</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">skill</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="nx">tony</span> <span class="k">as</span> <span class="nx">Person</span><span class="p">).</span><span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">age</span> <span class="o">=</span> <span class="p">(</span><span class="nx">tony</span> <span class="k">as</span> <span class="nx">Person</span><span class="p">).</span><span class="nx">age</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">age</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>그러나 이렇게 하면 가독성도 별로고 코드도 복잡해 진다.<br />
이때 타입 가드를 사용하면 된다.</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/7b745e42388b2d690d77912aa65cd97bc521fc0b">diff check</a></p>
</blockquote>

<h2 id="152-타입-가드-소개와-적용">15.2 타입 가드 소개와 적용</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="c1">// 티입 가드</span>
<span class="kd">function</span> <span class="nx">isDeveloper</span><span class="p">(</span><span class="nx">target</span><span class="p">:</span> <span class="nx">Developer</span> <span class="o">|</span> <span class="nx">Person</span><span class="p">):</span> <span class="nx">target</span> <span class="nx">is</span> <span class="nx">Developer</span> <span class="p">{</span><span class="c1">// Developer인지 아닌지</span>
    <span class="k">return</span> <span class="p">(</span><span class="nx">target</span> <span class="k">as</span> <span class="nx">Developer</span><span class="p">).</span><span class="nx">skill</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">;</span> <span class="c1">// skill이 있을때(undefined가 아닐때)</span>
<span class="p">}</span>

<span class="k">if</span><span class="p">(</span><span class="nx">isDeveloper</span><span class="p">(</span><span class="nx">tony</span><span class="p">))</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">tony</span><span class="p">.</span><span class="nx">skill</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">tony</span><span class="p">.</span><span class="nx">age</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/a4c36343fee48535097a9590211facea7969d97f">diff check</a></p>
</blockquote>]]></content><author><name>FE Developer</name></author><category term="typescript-part1" /><category term="typescript" /><summary type="html"><![CDATA[typescript 타입 가드]]></summary></entry><entry><title type="html">[TypeScript-part1] 타입 모듈화</title><link href="http://localhost:4000/typescript-part1/typescript-part1-beginners17/" rel="alternate" type="text/html" title="[TypeScript-part1] 타입 모듈화" /><published>2022-07-22T00:00:00+09:00</published><updated>2022-07-22T00:00:00+09:00</updated><id>http://localhost:4000/typescript-part1/typescript-part1-beginners17</id><content type="html" xml:base="http://localhost:4000/typescript-part1/typescript-part1-beginners17/"><![CDATA[<h2 id="171-타입스크립트의-모듈-시스템">17.1 타입스크립트의 모듈 시스템</h2>

<p>타입스크립트에서 가리키는 모듈이라는 개념은 ES6+ Modules 개념과 유사하다.<br />
모듈은 전역 변수와 구분되는 자체 유효범위를 가지며 <code class="language-plaintext highlighter-rouge">export</code>, <code class="language-plaintext highlighter-rouge">import</code>와 같은 키워드를 사용하지 않으면 다른 파일에서 접근 할 수 없다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="c1">// app.ts</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">Todo</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./types</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">let</span> <span class="nx">item</span><span class="p">:</span> <span class="nx">Todo</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">할일 1</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">checked</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
<span class="p">}</span>

<span class="c1">// types.ts</span>
<span class="k">export</span> <span class="kr">interface</span> <span class="nx">Todo</span> <span class="p">{</span>
    <span class="nl">title</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">checked</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">,</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/3361f8ab1fdc7181b78aabcd88767d4202fa7d61">diff check</a></p>
</blockquote>

<h2 id="172-자바스크립트의-모듈-시스템">17.2 자바스크립트의 모듈 시스템</h2>

<ul>
  <li><a href="https://joshua1988.github.io/vue-camp/es6+/modules.html">ES6 Modules</a></li>
  <li><a href="https://d2.naver.com/helloworld/12864">자바스크립트 모듈화 역사</a></li>
</ul>

<p><code class="language-plaintext highlighter-rouge">import</code>와 <code class="language-plaintext highlighter-rouge">export</code>는 자바스크립트의 코드를 모듈화 할 수 있는 기능이다.<br />
여기서 모듈화란 쉽게 말해서 다른 파일에 있는 자바스크립트의 기능을 특정 파일에서 사용할 수 있는 것을 말한다.<br />
예전엔 <code class="language-plaintext highlighter-rouge">AMD(Asynchronous Module Definition)</code>도 있었고 요즘도 많이 사용하는 <code class="language-plaintext highlighter-rouge">CommonJS</code>도 있다.</p>

<h3 id="1721-모듈화의-필요성">17.2.1 모듈화의 필요성</h3>

<p>기본적으로 자바스크립트의 유효 범위는 전역으로 시작<br />
따라서 아래와 같이 HTML 페이지를 로딩하면 원하는 결과가 나오지 않는다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="nt">&lt;body&gt;</span>
    <span class="c">&lt;!-- 여기서 말하는 모듈은 각 파일이라고 생각하면 된다.--&gt;</span>
    <span class="c">&lt;!-- 하지만 각 파일마다 변수 영역이 나뉘는 것이 아니라서 서로 다른 파일이지만 변수명이 같을 경우 변수값이 덮어씌워지거나 기타 예기치 못한 오류가 나올 수 있다. --&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"a.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"b.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script&gt;</span>
        <span class="nx">getTotal</span><span class="p">();</span> <span class="c1">// 200</span>
    <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="c1">// a.js</span>
<span class="kd">let</span> <span class="nx">total</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
<span class="kd">function</span> <span class="nx">getTotal</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">total</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="c1">// b.js</span>
<span class="kd">let</span> <span class="nx">total</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>다른 프로그래밍 언어 배경을 가진 분들이라면 파일마다 변수의 유효범위가 다를 것이라고 생각할 것이다.<br />
하지만 자바스크립트는 기본적으로 변수의 유효범위가 전역으로 잡히기 때문에 네임스페이스 모듈화 패턴이나 Require.js와 같은 모듈화 라이브러리를 이용하여 모듈화 기능을 구현해 왔다.</p>

<p>이제는 프로그래밍 패턴이나 별도의 모듈화 라이브러리를 사용하지 않고도 자바스크립트 언어 자체에서 모듈화를 지원한다.</p>

<h3 id="1722-import--export-기본-문법">17.2.2 import &amp; export 기본 문법</h3>

<p>모듈화 기능을 사용하기 위한 기본적인 import, export 문법</p>

<ul>
  <li>export 문법</li>
</ul>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">export 변수, 함수</code></p>
</blockquote>

<p>다른 파일에서 가져다 쓸 변수나 함수의 앞에 <code class="language-plaintext highlighter-rouge">export</code>라는 키워드를 붙인다.<br />
익스포트된 파일은 임포트로 불러와 사용한다.</p>

<ul>
  <li>import 문법</li>
</ul>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">import { 불러올 변수 또는 함수 이름 } from '파일 경로';</code></p>
</blockquote>

<p>익스포트된 변수나 함수를 <code class="language-plaintext highlighter-rouge">{}</code> 에 선언한 뒤 해당 파일이 있는 경로를 적어준다.</p>

<h3 id="1723-import--export-기본-예제">17.2.3 import &amp; export 기본 예제</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="c1">// math.js</span>
<span class="k">export</span> <span class="kd">let</span> <span class="nx">pi</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="c1">// app.js</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">pi</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./math.js</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">pi</span><span class="p">);</span> <span class="c1">// 3.14</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>변수가 아니라 함수를 내보내는 예제</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="c1">// math.js</span>
<span class="k">export</span> <span class="kd">let</span> <span class="nx">pi</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="c1">// app.js</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">sum</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./math.js</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">sum</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span> <span class="c1">// 30</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="1724-import--export-브라우저-지원-범위">17.2.4 import &amp; export 브라우저 지원 범위</h3>

<p>ES6의 기본적인 문법들이 최신 브라우저에서 지원되는데 반해 import, export는 아직 보조 도구가 있어야만 사용할 수 있다.</p>

<p>가급적 실무 코드에서 사용할 때는 <code class="language-plaintext highlighter-rouge">웹팩(webpack)</code>과 같은 모듈 번들러를 이용하여 구현하는 것을 추천</p>

<h2 id="173-전화번호부-애플리케이션에-모듈화-실습">17.3 전화번호부 애플리케이션에 모듈화 실습</h2>

<ol>
  <li>types.ts파일 만들기</li>
  <li>타입정의한 코드 옮기기</li>
  <li>다른파일로 옮겼으니까 export를 이용해서 꺼내서 사용할 수 있도록 만들기</li>
  <li>export한 내용을 import로 원래 파일로 들고오기</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="c1">// types.ts</span>
<span class="kr">interface</span> <span class="nx">PhoneNumberDictionary</span> <span class="p">{</span>
    <span class="p">[</span><span class="nx">phone</span><span class="p">:</span> <span class="nx">string</span><span class="p">]:</span> <span class="p">{</span>
        <span class="nl">num</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
    <span class="p">};</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">Contact</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">address</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">phones</span><span class="p">:</span> <span class="nx">PhoneNumberDictionary</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">enum</span> <span class="nx">PhoneType</span> <span class="p">{</span>
    <span class="nx">Home</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">home</span><span class="dl">'</span><span class="p">,</span>
    <span class="nx">Office</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">office</span><span class="dl">'</span><span class="p">,</span>
    <span class="nx">Studio</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">studio</span><span class="dl">'</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">export</span> <span class="p">{</span> <span class="nx">PhoneType</span><span class="p">,</span> <span class="nx">Contact</span> <span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="c1">// index.ts</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Contact</span><span class="p">,</span> <span class="nx">PhoneType</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./types</span><span class="dl">'</span><span class="p">;</span>
<span class="c1">//...</span>
<span class="c1">//...</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/8ec0d6c3e823be468b0d258df325f79ab986d5b7">diff check</a></p>
</blockquote>]]></content><author><name>FE Developer</name></author><category term="typescript-part1" /><category term="typescript" /><summary type="html"><![CDATA[typescript 타입 모듈화]]></summary></entry><entry><title type="html">[TypeScript-part1] 두번째 프로젝트 - 전화번호부 애플리케이션</title><link href="http://localhost:4000/typescript-part1/typescript-part1-beginners12/" rel="alternate" type="text/html" title="[TypeScript-part1] 두번째 프로젝트 - 전화번호부 애플리케이션" /><published>2022-07-22T00:00:00+09:00</published><updated>2022-07-22T00:00:00+09:00</updated><id>http://localhost:4000/typescript-part1/typescript-part1-beginners12</id><content type="html" xml:base="http://localhost:4000/typescript-part1/typescript-part1-beginners12/"><![CDATA[<h2 id="121-프로젝트-소개">12.1 프로젝트 소개</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
</pre></td><td class="rouge-code"><pre><span class="kr">interface</span> <span class="nx">PhoneNumberDictionary</span> <span class="p">{</span>
  <span class="p">[</span><span class="nx">phone</span><span class="p">:</span> <span class="nx">string</span><span class="p">]:</span> <span class="p">{</span>
    <span class="nl">num</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
  <span class="p">};</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">Contact</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">address</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">phones</span><span class="p">:</span> <span class="nx">PhoneNumberDictionary</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// api</span>
<span class="c1">// TODO: 아래 함수의 반환 타입을 지정해보세요.</span>
<span class="kd">function</span> <span class="nx">fetchContacts</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// TODO: 아래 변수의 타입을 지정해보세요.</span>
  <span class="kd">const</span> <span class="nx">contacts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Tony</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">address</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Malibu</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">phones</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">home</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">num</span><span class="p">:</span> <span class="mi">11122223333</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="na">office</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">num</span><span class="p">:</span> <span class="mi">44455556666</span><span class="p">,</span>
        <span class="p">},</span>
      <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Banner</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">address</span><span class="p">:</span> <span class="dl">'</span><span class="s1">New York</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">phones</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">home</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">num</span><span class="p">:</span> <span class="mi">77788889999</span><span class="p">,</span>
        <span class="p">},</span>
      <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">마동석</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">address</span><span class="p">:</span> <span class="dl">'</span><span class="s1">서울시 강남구</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">phones</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">home</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">num</span><span class="p">:</span> <span class="mi">213423452</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="na">studio</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">num</span><span class="p">:</span> <span class="mi">314882045</span><span class="p">,</span>
        <span class="p">},</span>
      <span class="p">},</span>
    <span class="p">},</span>
  <span class="p">];</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="nx">resolve</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">resolve</span><span class="p">(</span><span class="nx">contacts</span><span class="p">),</span> <span class="mi">2000</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">}</span>

<span class="c1">// main</span>
<span class="kd">class</span> <span class="nx">AddressBook</span> <span class="p">{</span>
  <span class="c1">// TODO: 아래 변수의 타입을 지정해보세요.</span>
  <span class="nx">contacts</span> <span class="o">=</span> <span class="p">[];</span>

  <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">fetchData</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="nx">fetchData</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">fetchContacts</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">contacts</span> <span class="o">=</span> <span class="nx">response</span><span class="p">;</span>
    <span class="p">});</span>
  <span class="p">}</span>

  <span class="cm">/* TODO: 아래 함수들의 파라미터 타입과 반환 타입을 지정해보세요 */</span>
  <span class="nx">findContactByName</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">contacts</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">contact</span> <span class="o">=&gt;</span> <span class="nx">contact</span><span class="p">.</span><span class="nx">name</span> <span class="o">===</span> <span class="nx">name</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">findContactByAddress</span><span class="p">(</span><span class="nx">address</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">contacts</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">contact</span> <span class="o">=&gt;</span> <span class="nx">contact</span><span class="p">.</span><span class="nx">address</span> <span class="o">===</span> <span class="nx">address</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">findContactByPhone</span><span class="p">(</span><span class="nx">phoneNumber</span><span class="p">,</span> <span class="nx">phoneType</span><span class="p">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">contacts</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span>
      <span class="nx">contact</span> <span class="o">=&gt;</span> <span class="nx">contact</span><span class="p">.</span><span class="nx">phones</span><span class="p">[</span><span class="nx">phoneType</span><span class="p">].</span><span class="nx">num</span> <span class="o">===</span> <span class="nx">phoneNumber</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">addContact</span><span class="p">(</span><span class="nx">contact</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">contacts</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">contact</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">displayListByName</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">contacts</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">contact</span> <span class="o">=&gt;</span> <span class="nx">contact</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">displayListByAddress</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">contacts</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">contact</span> <span class="o">=&gt;</span> <span class="nx">contact</span><span class="p">.</span><span class="nx">address</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="cm">/* ------------------------------------------------ */</span>
<span class="p">}</span>

<span class="k">new</span> <span class="nx">AddressBook</span><span class="p">();</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="122-프로젝트-실습-방법-안내">12.2 프로젝트 실습 방법 안내</h2>

<ol>
  <li>tsconfig.json 파일에서 noImplicitAny 옵션값을 true로 설정, 
strict 옵션도 true로 설정하고, strictFunctionTypes”: true도 추가.</li>
</ol>

<p>위와 같이 true로 바꾸는 순간 타입을 지정하지 않은 것들에 대해 추론과정에서 에러로 간주한다.<br />
strict 또한 true라 훨씬 더 많은 error 가 발생한다는 것을 볼 수 있다.<br />
strictFunctionTypes”: true 이것도 설정해서 더 많은 것들이 error 로 잡히는 것을 볼 수 있다.</p>

<ol>
  <li>
    <p>.eslintrc.js 파일에서 @typescript-eslint/no-explicit-any와 @typescript-eslint/explicit-function-return-type를 주석처리 하면 반환 타입이 없다는 에러들이 많이 잡힌다.<br />
이렇게 <code class="language-plaintext highlighter-rouge">lint</code>를 어떻게 설정하냐에 따라 고민할 부분이 많아진다.</p>
  </li>
  <li>
    <p>endOfLine: ‘auto’ : 코드의 개행부분에 에러가 잡히면 eslintrc에 넣어준다.</p>
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="nx">rules</span><span class="p">:</span> <span class="p">{</span>
 <span class="dl">'</span><span class="s1">prettier/prettier</span><span class="dl">'</span><span class="p">:</span> <span class="p">[</span>
   <span class="dl">'</span><span class="s1">error</span><span class="dl">'</span><span class="p">,</span>
   <span class="p">{</span>
     <span class="na">singleQuote</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
     <span class="na">semi</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
     <span class="na">useTabs</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
     <span class="na">tabWidth</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
     <span class="na">printWidth</span><span class="p">:</span> <span class="mi">80</span><span class="p">,</span>
     <span class="na">bracketSpacing</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
     <span class="na">arrowParens</span><span class="p">:</span> <span class="dl">'</span><span class="s1">avoid</span><span class="dl">'</span><span class="p">,</span>
     <span class="na">endOfLine</span><span class="p">:</span> <span class="dl">'</span><span class="s1">auto</span><span class="dl">'</span>
   <span class="p">},</span>
 <span class="p">],</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ol>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/c9af028751fd556c17ff65b04b47a12475588878">diff check</a></p>
</blockquote>

<h2 id="123-애플리케이션에-정의된-타입-설명-및-api-함수-타입-정의-힌트">12.3 애플리케이션에 정의된 타입 설명 및 API 함수 타입 정의 힌트</h2>

<p>함수 <code class="language-plaintext highlighter-rouge">function fetchContacts()</code>의 반환값을 보면 <code class="language-plaintext highlighter-rouge">new Promise</code>를 반환하기 때문에 <code class="language-plaintext highlighter-rouge">function fetchContacts(): Prommise</code>로 반환 타입을 지정해 주면 에러가 뜨고 프리뷰를 확인 해 보면 설명에 제네릭이 뜬다. 이유가 뭘까?</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/505b61fcafa91719c3cfa1f41ce690ea6e570f0f">diff check</a></p>
</blockquote>

<h2 id="124-promise를-이용한-api-함수-타입-정의">12.4 Promise를 이용한 API 함수 타입 정의</h2>

<p><img src="/assets/images/ts/part1-12_01.jpg" alt="타입정의" /></p>

<p>함수의 반환값 카입을 정의하지 않았지만 반환값이 string[]타입일거라고 추론하고 있다.<br />
함수내부의 코드를 보고 <code class="language-plaintext highlighter-rouge">return items</code> 부분의 items가 string[] 타입이란 것을 알 수 있기 떄문이다.</p>

<p><img src="/assets/images/ts/part1-12_02.jpg" alt="타입정의" /></p>

<p>서버에서 데이터를 받아오는 상황이라 가정하고 Promise 비동기 상황으로 코드를 짜면, 위와같이 추론괒어을 거친 반환값 타입이 <code class="language-plaintext highlighter-rouge">Promise&gt;unknown&gt;</code>이다.<br />
그러니까 위 코드처럼 <code class="language-plaintext highlighter-rouge">new Promise</code>를 반환하게 되면 추론과정에서 Promise 인스턴스를 반환하는건 알지만 그 안에서 반환하는 게 무슨 타입인지 모른다는 것이다.<br />
즉, 타입스크립트가 Promise 인스턴스안에 들어오는 코드에 대해선 알 수가 없다는 것이다.</p>

<p><img src="/assets/images/ts/part1-12_03.jpg" alt="타입정의" /></p>

<p>Promise타입에 대해 보면 타입스크립트 내부적으로 어떤것들을 정의했는지 볼 수있다.<br />
<code class="language-plaintext highlighter-rouge">Promise&lt;unknown&gt;</code>프로미스를 통해서 반환받을 값의 타입까지 정확히 명시를 해야한다는 것이다.<br />
Promise가 기본적으로 제네릭을 통해 정의가 되고있기 떄문이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">fetchItems</span><span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">string</span><span class="p">[]</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="na">items</span><span class="p">:</span> <span class="nx">string</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">b</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">c</span><span class="dl">'</span><span class="p">];</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">resolve</span><span class="p">(</span><span class="nx">items</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">}</span>

<span class="nx">fetchItems</span><span class="p">();</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>실제 서비스에서는 위와 같은 목업 코드말고 axios와 같은 Promise 객체 기반 라이브러리를 통해 코드를 작성할 것이다.<br />
그럴때 위와 같은 타입을 정의해 주면 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">fetchItems</span><span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">number</span><span class="p">[]</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="na">items</span><span class="p">:</span> <span class="nx">string</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">b</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">c</span><span class="dl">'</span><span class="p">];</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">resolve</span><span class="p">(</span><span class="nx">items</span><span class="p">);</span> <span class="c1">// error: 왼쪽 item은 number로 이루어진 배열이되어야하는데 현재 추론과정에선 string으로 이루어진 배열이므로 에러가 발생한다.</span>
  <span class="p">});</span>
<span class="p">}</span>

<span class="nx">fetchItems</span><span class="p">();</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/12a48d6375044900fd70d5fa9a20687af0e45458">diff check</a></p>
</blockquote>

<h2 id="125-전화번호부-클래스-전언부-타입-정의">12.5 전화번호부 클래스 전언부 타입 정의</h2>

<p>클래스를 보면 기본적으로 클래스안에 사용될 변수, 속성에 대해서 구체적으로 정의할 수 있다.</p>

<p>contacts = []; -&gt; contacts: Contact[] = [];</p>

<p>여기에 정의해주기 전에는 밑에 fetchData 안에 <code class="language-plaintext highlighter-rouge">this.contacts = response;</code>부분에 에러가 잡히던 부분이 정의해 주면서 에러가 사라진다.</p>

<p>constructor는 기본적으로 따로 타입 선언 안해도 된다.</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/31ed9427c3b1224dd218f157b8ff290faddc10d1">diff check</a></p>
</blockquote>

<h2 id="126-전화번호부-검색-메서드의-타입-정의">12.6 전화번호부 검색 메서드의 타입 정의</h2>

<p><code class="language-plaintext highlighter-rouge">return this.contacts.filter(contact =&gt; contact.name === name);</code><br />
filter기 때문에 리턴값은 배열을 반환한다.</p>

<p>폰넘버는 이넘으로 정의해볼 수 있다.</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/3ea58c187c48776775462e5dc51a505ce485307e">diff check</a></p>
</blockquote>

<h2 id="127-이넘을-이용한-타입-정의">12.7 이넘을 이용한 타입 정의</h2>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/3b7c5a6c30744d4134223cfdd81c6adc842254c1">diff check</a></p>
</blockquote>

<h2 id="128-주요-메서드조회-타입-정의-및-실습-마무리">12.8 주요 메서드(조회) 타입 정의 및 실습 마무리</h2>

<p>map -&gt; 기존 배열을 변환을 해서 새로운 배열을 만들어주는 함수라고 보면 된다.</p>

<p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/map">MDN Array map90 API 문서</a></p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/a3ab3d5955a31bb93c1d3e092252801a726e4f0f">diff check</a></p>
</blockquote>]]></content><author><name>FE Developer</name></author><category term="typescript-part1" /><category term="typescript" /><summary type="html"><![CDATA[typescript 두번째 프로젝트]]></summary></entry><entry><title type="html">[TypeScript-part1] 타입 호환</title><link href="http://localhost:4000/typescript-part1/typescript-part1-beginners16/" rel="alternate" type="text/html" title="[TypeScript-part1] 타입 호환" /><published>2022-07-22T00:00:00+09:00</published><updated>2022-07-22T00:00:00+09:00</updated><id>http://localhost:4000/typescript-part1/typescript-part1-beginners16</id><content type="html" xml:base="http://localhost:4000/typescript-part1/typescript-part1-beginners16/"><![CDATA[<h2 id="161-타입-호환이란">16.1 타입 호환이란?</h2>

<p><a href="https://joshua1988.github.io/ts/guide/type-compatibility.html">타입 호환</a></p>

<p>타입호환이란 타입스크립트 코드에서 특정 타입이 다른 타입에 잘 맞는지를 의미한다.<br />
예를 들면 아래와 같은 코드를 의미한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="kr">interface</span> <span class="nx">Ironman</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">Avengers</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">i</span><span class="p">:</span> <span class="nx">Ironman</span><span class="p">;</span>
<span class="nx">i</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Avengers</span><span class="p">();</span> <span class="c1">// OK, because of structural typing</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>C#이나 Java였다면 위에서 에러가 났을것이다.<br />
왜냐면 <code class="language-plaintext highlighter-rouge">Avengers</code>클래스가 명시적으로 <code class="language-plaintext highlighter-rouge">Ironman</code>인터페이스를 상속받아 구현되지 않았기 때문이다.</p>

<p>하지만 위와 같은 코드가 타입스크립트에서 정상적으로 작동하는 이유는 자바스크립트의 작동방식과 관련있다.<br />
기본적으로 자바스크립트는 객체 리터럴이나 익명 함수 등을 사용하기 때문에 명시적으로 타입을 지정하는 것보다는 코드의 구조 관점에서 타입을 지정하는 것이 더 잘 어울린다.(structural typing)</p>

<h3 id="1611-구조적-타이핑-예시">16.1.1 구조적 타이핑 예시</h3>

<p>구조적 타이핑이란?<br />
코드 구조 관점에서 타입이 서로 호환되는지의 여부를 판단하는 것이다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kr">interface</span> <span class="nx">Avengers</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">hero</span><span class="p">:</span> <span class="nx">Avengers</span><span class="p">;</span>
<span class="c1">// 타입스크립트가 추론한 capt의 타입은 { name: string, location: string }이다. </span>
<span class="kd">let</span> <span class="nx">capt</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Captain</span><span class="dl">'</span><span class="p">,</span> <span class="na">location</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Pangyo</span><span class="dl">'</span> <span class="p">}</span>
<span class="nx">hero</span> <span class="o">=</span> <span class="nx">capt</span> <span class="c1">// hero에는 location이 없지만 에러가 나지 않는다.</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위 코드에서 <code class="language-plaintext highlighter-rouge">capt</code>가 <code class="language-plaintext highlighter-rouge">hero</code>타입에 호환될 수 있는 이유는 <code class="language-plaintext highlighter-rouge">capt</code>의 속성중에 <code class="language-plaintext highlighter-rouge">name</code>이 있기 때문이다.<br />
<code class="language-plaintext highlighter-rouge">Avengers</code>인터페이스에서 <code class="language-plaintext highlighter-rouge">name</code>속성을 갖고 있기 떄문에 <code class="language-plaintext highlighter-rouge">capt</code>는 <code class="language-plaintext highlighter-rouge">Avengers</code> 타입에 호환이 가능하다. 함수를 호출할 때도 마찬가지이다.</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/6ab180cd6faca4497766e8a2639a3f05db57c161">diff check</a></p>
</blockquote>

<h3 id="1612-soundness란">16.1.2 Soundness란?</h3>

<p>타입스크립트는 컴파일 시점에 타입을 추론할 수 없는 특정 타입에 대해서 일단 안전하다고 보는 특성이 있다.
이걸 <code class="language-plaintext highlighter-rouge">"들리지 않는다(it is said to not be sound)"</code>라고 표현한다.</p>

<h3 id="1613-enum-타입-호환-주의-사항">16.1.3 Enum 타입 호환 주의 사항</h3>

<p>이넘 타입은 <code class="language-plaintext highlighter-rouge">number</code> 타입과 호환 되지만 이넘 타입끼리는 호환 되지 않는다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kr">enum</span> <span class="nx">Status</span> <span class="p">{</span> <span class="nx">Ready</span><span class="p">,</span> <span class="nx">Waiting</span> <span class="p">};</span>

<span class="kr">enum</span> <span class="nx">Color</span> <span class="p">{</span> <span class="nx">Red</span><span class="p">,</span> <span class="nx">Blue</span><span class="p">,</span> <span class="nx">Green</span> <span class="p">};</span>

<span class="kd">let</span> <span class="nx">status1</span> <span class="o">=</span> <span class="nx">Status</span><span class="p">.</span><span class="nx">Ready</span><span class="p">;</span>
<span class="nx">status1</span> <span class="o">=</span> <span class="nx">Color</span><span class="p">.</span><span class="nx">Green</span><span class="p">;</span>  <span class="c1">// error</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/17d701737dd65ba15a442e5c10357ce809228830">diff check</a></p>
</blockquote>

<h3 id="1614-class-타입-호환-주의-사항">16.1.4 Class 타입 호환 주의 사항</h3>

<p>클래스 타입은 클래스 타입끼리 비교할 때 스태틱 멤버(static member)와 생성자(constructor)를 제외하고 속성만 비교한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nx">Hulk</span> <span class="p">{</span>
    <span class="nl">handSize</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">numHand</span><span class="p">:</span> <span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kd">class</span> <span class="nx">Captain</span> <span class="p">{</span>
    <span class="nl">handSize</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="nx">numHand</span><span class="p">:</span> <span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">a</span><span class="p">:</span> <span class="nx">Hulk</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">s</span><span class="p">:</span> <span class="nx">Captain</span><span class="p">;</span>

<span class="nx">a</span> <span class="o">=</span> <span class="nx">s</span><span class="p">;</span> <span class="c1">// OK</span>
<span class="nx">s</span> <span class="o">=</span> <span class="nx">a</span><span class="p">;</span> <span class="c1">// OK</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/2be9642a12b0152e237de3a7090c6bca663464b5">diff check</a></p>
</blockquote>

<h3 id="1615-generics">16.1.5 Generics</h3>

<p>제네릭은 제네릭 타입 간의 호환 여부를 판단할 때 타입 인자 <code class="language-plaintext highlighter-rouge">&lt;T&gt;</code>가 속성에 할당 되었는지를 기준으로 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kr">interface</span> <span class="nx">Empty</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span> <span class="p">{</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">x</span><span class="p">:</span> <span class="nx">Empty</span><span class="o">&lt;</span><span class="nx">number</span><span class="o">&gt;</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">y</span><span class="p">:</span> <span class="nx">Empty</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">;</span>

<span class="nx">x</span> <span class="o">=</span> <span class="nx">y</span><span class="p">;</span> <span class="c1">// OK</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>위 인터페이스는 일단 속성(member 변수)이 없기 때문에 x와 y는 같은 타입으로 간주 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kr">interface</span> <span class="nx">NotEmpty</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">{</span>
    <span class="na">data</span><span class="p">:</span> <span class="nx">T</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">xx</span><span class="p">:</span> <span class="nx">NotEmpty</span><span class="o">&lt;</span><span class="nx">number</span><span class="o">&gt;</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">yy</span><span class="p">:</span> <span class="nx">NotEmpty</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">;</span>

<span class="nx">xx</span> <span class="o">=</span> <span class="nx">yy</span><span class="p">;</span> <span class="c1">// error</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>그러나 인터페이스 <code class="language-plaintext highlighter-rouge">NotEmpty</code>에 넘긴 제네릭 타입 <code class="language-plaintext highlighter-rouge">&lt;T&gt;</code>에 data속성이 할당되었으므로 x와 y는 서로 다른타입으로 간주된다.</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/9c1962c9b127c06d4429c574079430d1102c6af5">diff check</a></p>
</blockquote>

<h2 id="162-타입-호환-예제---인터페이스-클래스">16.2 타입 호환 예제 - 인터페이스, 클래스</h2>

<p>타입스크립트에서는 interface, class등 서로 다른 유형도 비교가 가능하다.<br />
그 안의 속성들을 통해 비교를 한다.<br />
이를 구조적 타이핑 이라고 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="c1">// 인터페이스</span>
<span class="kr">interface</span> <span class="nx">Developer</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">skill</span><span class="p">:</span> <span class="nx">string</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">developer</span><span class="p">:</span> <span class="nx">Developer</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">person</span><span class="p">:</span> <span class="nx">Person</span><span class="p">;</span>

<span class="nx">person</span> <span class="o">=</span> <span class="nx">developer</span><span class="p">;</span> <span class="c1">// 반면, person 인터페이스의 속성이 더 많고, developer의 속성을 포함하고 있으므로 왼쪽과 같이 명시하면 추론과정에서 에러가 발생하지 않는다.</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="c1">// 인터페이스</span>
<span class="kr">interface</span> <span class="nx">Developer</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">skill</span><span class="p">:</span> <span class="nx">string</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">developer</span><span class="p">:</span> <span class="nx">Developer</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">person</span><span class="p">:</span> <span class="nx">Person</span><span class="p">;</span>

<span class="nx">developer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span> <span class="c1">// error: 왼쪽도 마찬가지 이유로 에러가난다.</span>
                          <span class="c1">// 추론 과정에서 developer는 name, skill 속성이 있어야되는데</span>
                          <span class="c1">// Person 클래스는 name 속성밖에 없으므로.</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/afd28e1ae9e6eb2f40d37642d2fb45462f98b9e9">diff check</a></p>
</blockquote>

<h2 id="163-타입-호환-예제---함수-제네릭">16.3 타입 호환 예제 - 함수, 제네릭</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="rouge-code"><pre><span class="c1">// 함수</span>
<span class="kd">let</span> <span class="nx">add</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">:</span> <span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">:</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">b</span><span class="p">:</span> <span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
<span class="c1">// 여기까지의 차이는 일단 파라미터의 갯수 차이가 있다. sum의 구조가 add의 구조보다 크다고 볼 수 있다.</span>

<span class="nx">add</span> <span class="o">=</span> <span class="nx">sum</span> <span class="c1">// 그렇기 때문에 add에 sum을 할당하면 에러가 발생한다.</span>

<span class="nx">sum</span> <span class="o">=</span> <span class="nx">add</span> <span class="c1">// 이거는 가능하다고 판단함</span>

<span class="c1">// 제네릭</span>
<span class="kr">interface</span> <span class="nx">Empty</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">empty1</span><span class="p">:</span> <span class="nx">Empty</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">empty2</span><span class="p">:</span> <span class="nx">Empty</span><span class="o">&lt;</span><span class="nx">number</span><span class="o">&gt;</span><span class="p">;</span>
<span class="nx">empty1</span> <span class="o">=</span> <span class="nx">empty2</span><span class="p">;</span>
<span class="nx">empty2</span> <span class="o">=</span> <span class="nx">empty1</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">NotEmpty</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="na">data</span><span class="p">:</span> <span class="nx">T</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">notempty1</span><span class="p">:</span> <span class="nx">NotEmpty</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">notempty2</span><span class="p">:</span> <span class="nx">NotEmpty</span><span class="o">&lt;</span><span class="nx">number</span><span class="o">&gt;</span><span class="p">;</span>
<span class="nx">notempty1</span> <span class="o">=</span> <span class="nx">notempty2</span><span class="p">;</span> <span class="c1">// error</span>
<span class="nx">notempty2</span> <span class="o">=</span> <span class="nx">notempty1</span><span class="p">;</span> <span class="c1">// error</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/37cdc7e8fe55fccfe5515219170351c71ffc3f38">diff check</a></p>
</blockquote>]]></content><author><name>FE Developer</name></author><category term="typescript-part1" /><category term="typescript" /><summary type="html"><![CDATA[typescript 타입 호환]]></summary></entry><entry><title type="html">[TypeScript-part1] 타입 단언</title><link href="http://localhost:4000/typescript-part1/typescript-part1-beginners14/" rel="alternate" type="text/html" title="[TypeScript-part1] 타입 단언" /><published>2022-07-22T00:00:00+09:00</published><updated>2022-07-22T00:00:00+09:00</updated><id>http://localhost:4000/typescript-part1/typescript-part1-beginners14</id><content type="html" xml:base="http://localhost:4000/typescript-part1/typescript-part1-beginners14/"><![CDATA[<h2 id="141-타입-단언-소개">14.1 타입 단언 소개</h2>

<p>타입스크립트보다 오히려 개발자가 타입을 추론하는것이 더 빠르고 정확할 때가 있기 때문에 개발자가 정의한 타입으로 간주하라고 하는것이 <code class="language-plaintext highlighter-rouge">타입단언</code>이다.</p>

<p>타입 단언은 DOM API를 조작할 때 가장 많이 사용된다.</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/6d589f06539bb26b7f743f2980d5576896f6c1c6">diff check</a></p>
</blockquote>

<h2 id="142-타입-단언-예제">14.2 타입 단언 예제</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">div</span><span class="dl">'</span><span class="p">);</span>
<span class="c1">// div에 호버해보면 HTMLDivElement 또는 null일수 있다고 추론한다.</span>
<span class="c1">// 때문에 바로 div.innerText등으로 사용하면 에러가 발생하기때문에 null이 아님을 보장해줘야함</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">div</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">div</span><span class="p">.</span><span class="nx">innerText</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// let div = document.querySelector('div') as HTMLDivElement; // 이렇게 타입 단언을 해서 null이 있는 유니온 타입이 아닌 타입을 단언해주는 방법도 있음</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/6a8c4c7442393bdc5e483188035c38e5f58ae483">diff check</a></p>
</blockquote>]]></content><author><name>FE Developer</name></author><category term="typescript-part1" /><category term="typescript" /><summary type="html"><![CDATA[typescript 타입 단언]]></summary></entry></feed>
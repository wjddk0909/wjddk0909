I"!<h2 id="디바운싱-기법과-쓰로틀링-기법">디바운싱 기법과 쓰로틀링 기법</h2>

<p>디바운싱과 쓰로틀링 모두 웹에서 발생하는 이벤트르 제어하는 방법이다.</p>

<p>스크롤 이벤트의 경우 스크롤 할 때마다 이벤트가 발생해서 스크롤하면 이벤트가 굉장히 많이 중첩된다.<br />
디바운싱과 쓰로틀링을 사용하여 그런 상황을 막을 수 있다.</p>

<h3 id="디바운싱debouncing">디바운싱(Debouncing)</h3>
<blockquote>
  <p>연속으로 호출되는 함수들 중에서 마지막에 호출되는 함수(또는 제일 처음 함수)만 실행되도록 하는것<br />
어떤 이벤트가 호출되고 일정시간 안에 같은 이벤트가 다시 발생하면 그전 이벤트는 취소하고 새로 발생한 함수를 백그라운드에 올린다.<br />
연속성을 기준으로 효율화가 이루어짐</p>
</blockquote>

<ol>
  <li>이벤트가 발생하면 특정 시간 후에 로직이 실행되도록 <code class="language-plaintext highlighter-rouge">예약</code>을 걸어둔다.</li>
  <li>예약된 시간이 되기 전에 이벤트가 다시 발생하면 기존 <code class="language-plaintext highlighter-rouge">예약을 취소</code>하고 <code class="language-plaintext highlighter-rouge">새로운 예약</code>을 건다.</li>
</ol>

<p>resize시 이벤트가 실행되어야 할때, resize는 브라우저의 크기를 바꾸는 중에 계속 발생하는데 그때마다 로직이 실행되면 성능상 문제가 생길 수 있다.<br />
그때 debounce 기법을 사용한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="c1">//Javascript</span>
<span class="kd">let</span> <span class="nx">timer</span><span class="p">;</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">resize</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
    <span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">timer</span><span class="p">);</span>
    <span class="nx">timer</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">resize event!</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">},</span><span class="mi">2000</span><span class="p">)</span>
<span class="p">});</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>이벤트가 발생할 때마다 이전에 설정한 내용을 지우고 다시 새로 timer를 설정한다.<br />
설정한 시간내에 이벤트가 다시 발생하지 않으면 이벤트 발생이 끝난 것으로 보고 코드가 실행된다.</p>

<ul>
  <li>ajax검색에서 디바운싱을 많이 사용한다.</li>
  <li>input에서 사용자가 작성하는 텍스트에 따라 연관검색어를 보여주는 기능이 있을때, 한개 한개 칠때마다 연관검색어가 보이기보다는 어느정도 유의미한 단어가 만들어져서 사용자가 타이핑을 멈춰서 연속성이 끊겼을때 1번 ajax요청을 하면 효율적이다.</li>
</ul>

<h3 id="쓰로틀링-throttling">쓰로틀링 (Throttling)</h3>
<blockquote>
  <p>이벤트에 의한 콜백을 일정시간 뒤에 호출<br />
무조건 일정시간마다 실행, 일정시간안에 발생한 같은 이벤트는 취소시킨다.</p>
</blockquote>

<ol>
  <li>이벤트가 발생하면 특정 시간 후에 로직이 실행되도록 <code class="language-plaintext highlighter-rouge">예약</code>을 건다.</li>
  <li>예약된 시간이 되기전에 이벤트가 발생하면 새로운 예약을 걸지 않고 발생한 이벤트들을 <code class="language-plaintext highlighter-rouge">스킵</code>한다.</li>
</ol>

<p>쓰로틀링은 주로 스크롤 이벤트에서 많이 사용<br />
스크롤 이벤트는 매우 짧은 시간에 여러번 일어난다. 일정 시간안에 일어난 스크롤 이벤트는 단 한번만 콜백함수를 호출 하도록 만들면 효율적이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kd">var</span> <span class="nx">timerForThrottle</span><span class="p">;</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">scroll</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">timerForThrottle</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">timerForThrottle</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">scroll event</span><span class="dl">'</span><span class="p">);</span>
      <span class="nx">timerForThrottle</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">},</span> <span class="mi">2000</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET
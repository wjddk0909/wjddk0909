I""<h2 id="131-타입-추론-소개">13.1 타입 추론 소개</h2>

<p>타입스크립트가 타입 추론을 해나가는 과정은 다음과 같다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같이 x에 대한 타입을 따로 지정하지 않아도 일단 x는 number로 간주된다.<br />
이렇게 변수를 선언하거나 초기화할 때 타입이 추론된다.<br />
이외에도 변수, 속성, 인자의 기본값, 함수의 반환값 등을 설정할 때 타입 추론이 일어난다.</p>

<p>변수를 선언하고 10을 할당하면 number로 타입을 추론하고 ‘abc’를 할당하면 string으로 타입을 추론한다.</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/55671a9abecc9bfca73ef422fb0b97cc53b2aedb">diff check</a></p>
</blockquote>

<h2 id="132-인터페이스와-제네릭을-이용한-타입-추론-방식">13.2 인터페이스와 제네릭을 이용한 타입 추론 방식</h2>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/77015e674307da7a53f4988421e375039d5759dd">diff check</a></p>
</blockquote>

<h2 id="133-복잡한-구조에서의-타입-추론-방식">13.3 복잡한 구조에서의 타입 추론 방식</h2>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/096df08c21bb5f49aa4f6086e9d0dbe5c0c06121">diff check</a></p>
</blockquote>

<h2 id="134-best-common-type-추론-방식">13.4 Best Common Type 추론 방식</h2>

<p><a href="https://joshua1988.github.io/ts/guide/type-inference.html#%EB%AC%B8%EB%A7%A5%EC%83%81%EC%9D%98-%ED%83%80%EC%9D%B4%ED%95%91-contextual-typing">문맥을 이용한 타입 추론 방식</a></p>

<p>타입은 보통 몇개의 표현식(코드)을 바탕으로 타입을 추론한다.<br />
그리고 그 표현식을 이용하여 가장 근접한 타입을 Best Common Type 이라고 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">null</span><span class="p">];</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>배열의 각 아이템의 타입은 크게 number와 null로 구분된다.</p>

<p><img src="/assets/images/ts/part1-13_01.jpg" alt="타입추론" /><br />
<img src="/assets/images/ts/part1-13_02.jpg" alt="타입추론" /><br />
<img src="/assets/images/ts/part1-13_03.jpg" alt="타입추론" /></p>

<p>위와 같이 추론하는 것이 Best Common Type이다.<br />
위와 같이 값들을 통해 유니온 타입으로 정의해나간다.</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/typescript-part1/commit/e45b4e4fe2bc49fca3aaef0db7a6d7fa92c8c643">diff check</a></p>
</blockquote>

<h2 id="135-typescript-language-server-소개">13.5 Typescript Language Server 소개</h2>

<p><a href="https://www.jetbrains.com/help/webstorm/typescript-support.html">웹스톰 타입스크립트</a>
<a href="https://code.visualstudio.com/docs/languages/typescript#_code-suggestions">VSCode 타입스크립트</a></p>

<p>node_modules폴더 안에 typescript안에 보면 tsc, tscsever등 이러한 코드들이 내부적으로 돌고있다.<br />
웹스톱(또는 VS Code) 내부에는 이미 타입스크립트를 지원하는 서버가 내부적으로 탑재되어있다는 것을 이해하면 된다.<br />
이러한 코드들이 돌아가고 있기 때문에 타입 추론이 가능한 것이다.</p>

:ET
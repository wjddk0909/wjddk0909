I"1<h2 id="11-function-형태-function-오브젝트-생성-오브젝트-저장-생각의-전환">1.1 function 형태, function 오브젝트 생성, 오브젝트 저장, 생각의 전환</h2>

<p>function 형태</p>
<ul>
  <li>빌트인 Function 오브젝트 Function.prototype.call()</li>
  <li>function 오브젝트
    <ul>
      <li>function book(){…}</li>
      <li>var book = function() {…}</li>
      <li>인스턴스이지만, new 연산자로 생성한 인스턴스와 구분하기 위해 function 오브젝트로 표기</li>
    </ul>
  </li>
  <li>function 인스턴스
    <ul>
      <li>new Book()처럼 new연산자를 사용하여 Book.prototype에 연결된 메소드로 생성</li>
    </ul>
  </li>
</ul>

<p>function 오브젝트 생성</p>
<ul>
  <li>var book = function() {…};</li>
  <li>엔진이 function 키워드를 만나면 빌트인 Function 오브젝트의 prototype에 연결된 메소드로 function 오브젝트 생성</li>
  <li>생성한 오브젝트를 book 변수에 할당</li>
  <li>book() 형태로 호출
    <ul>
      <li>function 오브젝트이므로 호출 가능</li>
    </ul>
  </li>
</ul>

<p>오브젝트 저장</p>
<ul>
  <li>함수를 호출하려면 생성한 function 오브젝트를 저장해야한다.</li>
  <li>function 오브젝트 저장형태
    <ul>
      <li>{name: value} 형태로 저장</li>
      <li>{book: 생성한 function 오브젝트} 형태</li>
    </ul>
  </li>
  <li>함수를 호출하려면
    <ol>
      <li>저장된 오브젝트에서 함수 이름(book)으로 검색</li>
      <li>value 값을 구하고</li>
      <li>value가 function 오브젝트면 호출</li>
    </ol>
  </li>
</ul>

<p>함수가 호출되면 엔진은 함수의 변수와 함수를 {name: value} 형태로 실행 환경을 설정하고 함수 코드를 실행한다.<br />
{name: value} 형태로 생각을 전환해야 JS의 아키텍처와 메커니즘을 쉽게 이해할 수 있다.<br />
function(){…} 코드를 보면 함수의 변수와 함수가 {name: value} 형태로 연상되어야 한다.</p>

<h2 id="12-function-오브젝트-생성-과정-function-오브젝트-구조">1.2 function 오브젝트 생성 과정, function 오브젝트 구조</h2>

<p>function 오브젝트 생성 과정</p>

<ol>
  <li>function sports(){…} 형태에서 function 키워드를 만나면</li>
  <li>오브젝트를 생성하고 저장
    <ul>
      <li>{sports: {…}}</li>
      <li>sports는 function 오브젝트 이름</li>
      <li>오브젝트 {…}에 프로퍼티가 없는 상태 -&gt; 이제부터 빈 오브젝트에 프로퍼티를 채운다.</li>
    </ul>
  </li>
</ol>

<p>ㄴsports 오브젝트 형태</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="kd">var</span> <span class="nx">sports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){};</span>
<span class="cm">/*
1. 생성한 오브젝트가 sports에 할당된다. -&gt; 오브젝트를 생성하는 시점에는 빈 오브젝트
2. Local의 sports를 펼치면
arguments: (...)
caller: (...)
length: 0
name: "sports"
prototype: {
  construnctor: ƒ ()
  __propto__: Object // 빌트인 오브젝트에 관련된 메소드들이 설정되어있음(6개)
}
__proto__: ƒ () // apply, bind, call 빌트인 function 오브젝트의 prototype에 연결되어 있는 메소드들이 설정됨
*/</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ol>
  <li>sports 오브젝트에 <code class="language-plaintext highlighter-rouge">prototype 오브젝트</code> 첨부</li>
  <li>prototype에 <code class="language-plaintext highlighter-rouge">constructor</code> 프로퍼티 첨부
    <ul>
      <li>prototype.contructor가 sports 오브젝트 참조</li>
    </ul>
  </li>
  <li>prototype에 <code class="language-plaintext highlighter-rouge">__proto__</code> 오브젝트 첨부</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="nx">sports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">prototype</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">constructor</span><span class="p">:</span> <span class="nx">sports</span>
    <span class="na">__proto__</span><span class="p">:</span> <span class="p">{}</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ol>
  <li>빌트인 Object.prototype의 메소드로 Object 인스턴스를 생성하여 <code class="language-plaintext highlighter-rouge">prototype.__proto__</code>에 첨부</li>
  <li>sports 오브젝트에 <code class="language-plaintext highlighter-rouge">__proto__</code> 오브젝트 첨부 -&gt; <code class="language-plaintext highlighter-rouge">sports.__proto__</code> 구조가 된다.</li>
  <li>빌트인 Function.prototype의 메소드로 function 인스턴스를 생성해서 <code class="language-plaintext highlighter-rouge">sports.__proto__</code>에 첨부</li>
  <li>sports 오브젝트 프로퍼티에 초기값 설정 - arguments, caller, length, name 프로퍼티</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="nx">sports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">arguments</span><span class="p">:</span> <span class="p">{},</span>
  <span class="na">caller</span><span class="p">:</span> <span class="p">{},</span>
  <span class="na">length</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">sports</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">prototype</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">constructor</span><span class="p">:</span> <span class="nx">sports</span><span class="p">,</span>
    <span class="na">__propto__</span><span class="p">:</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span>
  <span class="p">},</span>
  <span class="na">__proto__</span><span class="p">:</span> <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>function 오브젝트에 prototype이 있으며 constuctor가 연결된다.</li>
  <li>__proto__가 연결되어 있으며 Object인스턴스가 연결된다.</li>
  <li>function 오브젝트에 __proto__가 있으며 Function 인스턴스가 연결된다.</li>
  <li>Array면 Array인스턴스가 연결되고 String이면 String 인스턴스가 연결된다.</li>
</ul>

<h2 id="13-함수-실행-환경-인식-함수-실행-환경-저장-내부-프로퍼티">1.3 함수 실행 환경 인식, 함수 실행 환경 저장, 내부 프로퍼티</h2>

<p>함수 실행 환경 인식이 필요한 이유?</p>
<ul>
  <li>함수가 호출되었을 때 실행될 환경을 알아야 실행 환경에 맞추어 실행할 수 있기 때문</li>
</ul>

<p>실행 환경 설정 시점</p>
<ul>
  <li>엔진이 function 키워드를 만나 function 오브젝트를 생성할 때</li>
</ul>

<p>설정하는 것</p>
<ul>
  <li>실행 영역(함수가 속한 스코프 - <a href="/javascript/lexical-scope/">렉시컬스코프</a>)</li>
  <li>파라미터, 함수 코드 등</li>
</ul>

<p>함수 실행 환경 저장</p>
<ul>
  <li>function 오브젝트를 생성하고 바로 실행하지 않으므로 함수가 호출 되었을때 사용할 수 있도록 환경을 저장</li>
</ul>

<p>어디에?</p>
<ul>
  <li>생성한 functio 오브젝트에 저장</li>
</ul>

<p>인식한 환경을 function 오브젝트의 내부 프로퍼티에 설정 -&gt; {name: value} 형태로</p>

<p>내부 프로퍼티란?</p>
<ul>
  <li>엔진이 내부 처리에 사용하는 프로퍼티(외부에서 사용 불가)</li>
  <li>자바스크립트 엔진의 구현 알고리즘을 설명하기 위해 ECMAScript 사양에서 사용하는 의사 프로퍼티(내부 엔진 설명용)</li>
  <li>일부 내부 슬롯과 내부 메서드에 한해 간접적으로 접근할 수 있는 수단 제공</li>
  <li><code class="language-plaintext highlighter-rouge">[[]]</code> 이중 대괄호로 감싼 형태. 예를 들어 모든 걕체는 <code class="language-plaintext highlighter-rouge">[[prototype]]</code>이라는 내부 프로퍼티(슬롯)을 가진다.</li>
</ul>

<h2 id="14-내부-프로퍼티-분류-공통-내부-프로퍼티-선택적-내부-프로퍼티">1.4 내부 프로퍼티 분류: 공통 내부 프로퍼티, 선택적 내부 프로퍼티</h2>

<p>내부 프로퍼티 분류</p>
<ul>
  <li>공통 프로퍼티
    <ul>
      <li>모든 오브젝트에 공통으로 설정되는 프로퍼티</li>
    </ul>
  </li>
  <li>선택적 프로퍼티
    <ul>
      <li>오브젝트에 따라 선택적으로 설정되는 프로퍼티</li>
      <li>해당되는 오브젝트에만 설정</li>
    </ul>
  </li>
</ul>

<p>자바스크립트 엔진은 프로퍼티를 생성할 때 <code class="language-plaintext highlighter-rouge">프로퍼티의 상태를 나타내는 프로퍼티 어트리뷰트</code>를 기본값으로 자동 정의한다.</p>
<blockquote>
  <p>프로퍼티의 상태랑 프로퍼티의 값(value), 값의 갱신 가능 여부(writable), 열거 가능 여부(enumerable), 재정의 가능 여부(configurable)를 말한다.</p>
</blockquote>

<p>프로퍼티 어트리뷰트(상태)는 자바스크립트 엔진이 관리하는 내부상태 값인 내부 슬롯 <code class="language-plaintext highlighter-rouge">[[value]], [[writable]], [[enumerable]], [[configurable]]</code>이다. (내부 슬롯중 간접적으로 접근할 수 있는 일부)</p>

<p>따라서 프로퍼티 어트리뷰트에 직접 전근할 수 없지만 <code class="language-plaintext highlighter-rouge">Object.getOwnPropertyDescriptor</code>메서드를 사용하여 간접적으로 확인할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">ellin</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">age</span><span class="p">:</span> <span class="mi">25</span>
<span class="p">}</span>

<span class="c1">// 프로퍼티 어트리뷰트 정보를 제공하는 프로퍼티 디스크립터 객체를 반환한다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">))</span>
<span class="c1">// {value: 'ellin', writable: true, enumerable: true, configurable: true}</span>


<span class="c1">// 모든 프로퍼티의 프로퍼티 어트리뷰트 정보를 제공하는 프로퍼티 디스크립터 객체를 반환한다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptors</span><span class="p">(</span><span class="nx">person</span><span class="p">))</span>
<span class="cm">/*
{
  age: { value: 25, writable: true, enumerable: true, configurable: true },
  name: { value: 'ellin', writable: true, enumerable: true, configurable: true }
}
*/</span>
</pre></td></tr></tbody></table></code></pre></div></div>

:ET
I"<h2 id="component를-커스텀해야-하는-이유">component를 커스텀해야 하는 이유</h2>

<p>vue를 사용해서 작업할때 vuetify나 element-ui를 사용하면 편하지만, 직접 커스텀해서 만들줄 알아야 한다.<br />
그래야 구조도 빠르게 파악할 수 있고 특히 element-ui 같은 경우 tree shaking이 불가능하기 때문에 안쓰는게 좋다.</p>

<h3 id="tree-shaking">tree shaking</h3>

<p>트리쉐이킹이란 사용하지 않는 코드를 제거하는 방식이다.<br />
es6에서는 모듈을 가져올때 <code class="language-plaintext highlighter-rouge">export</code>로 내보내고 <code class="language-plaintext highlighter-rouge">import</code>로 가져오는데 정적 방식과, 동적 방식 두가지가 있다.</p>

<ul>
  <li>정적<br />
기본적으로 개체 하나만 선언되어 있는 모듈(하나만 내보내기 함)로 한번에 묶어서 내보내고 가져올때는 아무 이름으로 사용해도 괜찮다.<br />
해당 모듈에는 개체가 하나만 있다는 사실을 명확히 나타낼 수 있다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="c1">// 📁 cube.js</span>
<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">cube</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// main.js</span>
<span class="k">import</span> <span class="nx">cube1</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./cube.js</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">cube1</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>동적<br />
여러 값을 내보낼때 유용, 가져올때는 내보낸 이름과 동일한 이름을 사용해야 한다.<br />
가져올때는 필요한 개체만 가져와서 사용할 수 있으므로 불필요한 코드를 가져오지 않아서 리소스 절약이 가능하다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="c1">// say.js</span>
<span class="kd">function</span> <span class="nx">sayHi</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s2">`Hello, </span><span class="p">${</span><span class="nx">user</span><span class="p">}</span><span class="s2">!`</span><span class="p">);</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">sayBye</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s2">`Bye, </span><span class="p">${</span><span class="nx">user</span><span class="p">}</span><span class="s2">!`</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="p">{</span> <span class="nx">sayHi</span><span class="p">,</span> <span class="nx">sayBye</span> <span class="p">};</span> <span class="c1">// 함수 두개를 내보냄</span>

<span class="c1">// 📁 main.js</span>
<span class="c1">// 1. 객체 형태로 한번에 가져오기</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">say</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./say.js</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">say</span><span class="p">.</span><span class="nx">hi</span><span class="p">(</span><span class="dl">'</span><span class="s1">John</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// Hello, John!</span>
<span class="nx">say</span><span class="p">.</span><span class="nx">bye</span><span class="p">(</span><span class="dl">'</span><span class="s1">John</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// Bye, John!</span>

<span class="c1">// 2. 각각 적어주기 - say.js에서는 여러개를 내보냈지만 main.js에서는 sayHi하나만 필요할 경우에는 한개만 적어주면 됨</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">sayHi</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./say.js</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">sayHi</span><span class="p">(</span><span class="dl">'</span><span class="s1">John</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// Hello, John!</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET
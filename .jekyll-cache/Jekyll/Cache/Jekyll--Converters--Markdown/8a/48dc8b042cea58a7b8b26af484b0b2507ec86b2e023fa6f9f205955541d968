I"+7<h2 id="111-자바스크립트-비동기-처리-패턴의-발전-과정">11.1 자바스크립트 비동기 처리 패턴의 발전 과정</h2>

<p>비동기 처리에 대해서 모르고 자바스크립트로 어떤 데이터를 받아와서 처리하려고 할때 일반적인 사고라면 아래와 같이 작성할 것이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">domain.com/id</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// #1 domain.com/id 로 get 요청을 보내서 결과값을 id에 담고</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">id</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">john</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// #2 그 id가 john이면</span>
    <span class="kd">var</span> <span class="nx">products</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">domain.com/products</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// #3 domain.com/products 로 get 요청을 받아서 결과값을 products에 담아라</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>그러나 위와 같이 코드를 짠다면 <code class="language-plaintext highlighter-rouge">var id = $.get('domain.com/id');</code> 여기서 데이터 요청을 보내고 받아오기 전에 아래줄이 실행이 되기때문에, 이것에 대해 콜백 처리가 필요하다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="nx">$</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">domain.com/id</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">id</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">john</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">domain.com/products</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">products</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">products</span><span class="p">);</span>
        <span class="p">});</span>
    <span class="p">}</span>
<span class="p">});</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>이것을 Promise를 적용해보면,(대충 아래같은 식으로 코드 작성)</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="rouge-code"><pre><span class="c1">// $.get('domain.com/id', function(id) {</span>
<span class="c1">//     if (id === 'john') {</span>
<span class="c1">//         $.get('domain.com/products', function(products) {</span>
<span class="c1">//             console.log(products);</span>
<span class="c1">//         });</span>
<span class="c1">//     }</span>
<span class="c1">// });</span>
<span class="kd">function</span> <span class="nx">getId</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">domain.com/id</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">resolve</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
        <span class="p">})</span>
    <span class="p">})</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">getProduct</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">id</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">john</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">domain.com/products</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">products</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">products</span><span class="p">);</span><span class="o">\</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(...)</span>
        <span class="p">});</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">logProduct</span><span class="p">(</span><span class="nx">products</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">products</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">getId</span><span class="p">()</span> <span class="c1">// #1 id를 가져오면</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">getProduct</span><span class="p">())</span> <span class="c1">// #2 product를 가져오고</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">logProduct</span><span class="p">())</span> <span class="c1">// #3 콘솔에 product를 찍기</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="112-async--await-문법-소개">11.2 async &amp; await 문법 소개</h2>

<p>async &amp; await는 자바스크립트 비동기 처리 패턴의 최신 문법.<br />
Promise와 Callback에서 주는 단점들을 해결 하고 자바스크립트의 비동기전 사고 방식에서 벗어나 동기적(절차적)으로 코드를 작성할 수 있게 도와준다.</p>

<p>기본문법</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="k">async</span> <span class="kd">function</span> <span class="nx">fetchData</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">await</span> <span class="nx">getUserList</span><span class="p">();</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>async함수는 함수의 앞에 <code class="language-plaintext highlighter-rouge">async</code>를 붙여주고 함수의 내부 로직 중 비동기 처리 로직 앞에 <code class="language-plaintext highlighter-rouge">await</code>를 붙여주면 된다.<br />
좀 더 정확하게 말하면 <code class="language-plaintext highlighter-rouge">Promise</code>객체를 반환하는 API 호출 함수 앞에 <code class="language-plaintext highlighter-rouge">await</code>를 붙인다.</p>

<p>예제를 좀 더 살펴보면</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">fetchData</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">list</span> <span class="o">=</span> <span class="nx">getUserList</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">list</span><span class="p">);</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">getUserList</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">userList</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">user1</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">user2</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">user3</span><span class="dl">'</span><span class="p">];</span>
        <span class="nx">resolve</span><span class="p">(</span><span class="nx">userList</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>

<span class="nx">fetchData</span><span class="p">()</span>
<span class="c1">// Promise {&lt;fulfilled&gt;: Array(3)}</span>
<span class="c1">// undefined</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>여기에 async await를 적용하면</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="k">async</span> <span class="kd">function</span> <span class="nx">fetchData1</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">list</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">getUserList1</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">list</span><span class="p">);</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">getUserList1</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">userList</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">user1</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">user2</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">user3</span><span class="dl">'</span><span class="p">];</span>
        <span class="nx">resolve</span><span class="p">(</span><span class="nx">userList</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>

<span class="nx">fetchData</span><span class="p">()</span>
<span class="c1">// (3) ['user1', 'user2', 'user3']</span>
<span class="c1">// Promise {&lt;fulfilled&gt;: Array(3)}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="113-async--await-예제-소개">11.3 async &amp; await 예제 소개</h2>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/0737fe51e0aa5b5727af0e46305a249db996c090">diff check</a></p>
</blockquote>

<h2 id="114-async-await-예제-실습">11.4 async await 예제 실습</h2>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/8d9fd89a99dcb30b8a86595f38fcbaa4deb9c884">diff check</a></p>
</blockquote>

<h2 id="115-async-await-에러-처리-방법과-공통화-함수-작성-방법">11.5 async await 에러 처리 방법과 공통화 함수 작성 방법</h2>

<ul>
  <li>try / catch 문으로 에러 처리</li>
</ul>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-news/commit/ebb2dccbdc4c56a96ce2c6a5fe335fd1a1be4c33">diff check</a></p>
</blockquote>
:ET
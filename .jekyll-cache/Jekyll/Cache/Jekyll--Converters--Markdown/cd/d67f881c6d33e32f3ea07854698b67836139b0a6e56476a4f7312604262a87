I"I<h2 id="31-debugger">3.1 debugger</h2>

<ul>
  <li>debugger 위치에서 실행 멈춤
    <ul>
      <li>브라우저의 개발자 도구 창이 열려 있을 때만 멈춤</li>
      <li>열려 있지 않으면 멈추지 않음</li>
    </ul>
  </li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kd">var</span> <span class="nx">sports</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">스포츠</span><span class="dl">'</span><span class="p">;</span>
<span class="k">debugger</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sports</span><span class="p">);</span>
<span class="c1">// debugger에서 실행이 멈춤 -&gt; 다음라인으로 이동 시키면 console.log 찍음</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="32-while-do-while">3.2 while, do-while</h2>

<p>while</p>

<ul>
  <li>형태: while (표현식) 문장</li>
  <li>표현식의 평가 결과가 false가 될 때까지 문장을 반복하여 실행</li>
  <li>반복이 종료되는 조건 필요</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kd">var</span> <span class="nx">k</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">while</span> <span class="p">(</span><span class="nx">k</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">k</span><span class="p">);</span>
    <span class="nx">k</span><span class="o">++</span><span class="p">;</span>
<span class="p">};</span>
<span class="c1">// 1</span>
<span class="c1">// 2</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>do-while</p>

<ul>
  <li>형태: do 문장 while (표현식)</li>
  <li>처리 방법은 while 문과 같음</li>
  <li>단, do 문을 먼저 실행</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="kd">var</span> <span class="nx">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">do</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">do:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">k</span><span class="p">);</span>
    <span class="nx">k</span><span class="o">++</span><span class="p">;</span>
<span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="nx">k</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">while:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">k</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">// do:0</span>
<span class="c1">// do:1</span>
<span class="c1">// do:2</span>
<span class="c1">// while:3</span>

<span class="c1">// 1. 먼저 do문을 실행</span>
<span class="c1">// 2. while문의 표현식을 평가</span>
<span class="c1">// 3. 평가 결과가 true면 do문의 블록을 다시 실행</span>
<span class="c1">// 4. 평가결과가 false면 while문의 블록 실행</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="33-for">3.3 for()</h2>

<ul>
  <li>형태: for(초기값opt; 비교opt; 증감opt) 문장</li>
  <li>2번째의 비교 표현식의 평가 결과가 true인 동안 문장을 반복 실행</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">k</span><span class="o">&lt;</span><span class="mi">2</span><span class="p">;</span> <span class="nx">k</span><span class="o">++&gt;</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">k</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">// 0</span>
<span class="c1">// 1</span>

<span class="c1">// 1. var k = 0;</span>
<span class="c1">// 2. k &lt; 2; 비교표현식 평가</span>
<span class="c1">// 3. 평가 결과가 true면 for() 블록의 코드를 실행</span>
<span class="c1">// 4. 처음 반복은 k가 0이므로 true가 되어 블록의 console.log(k) 실행</span>
<span class="c1">// 5. k++ k변수값을 1 증가시킨다.</span>
<span class="c1">// 6. 다시 2번부터 5번까지 실행, k가 2가 되면 2번에서 false가 되며 for()문을 종료</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>1~50까지 반복하면서 홀수번째 값과 짝수번째 값을 누적하고 반복한 값을 누적한다.</p>
<ul>
  <li>누적한 홀수번째 값을 출력</li>
  <li>누적한 짝수번쨰 값을 출력</li>
  <li>누적한 전체 값을 출력</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">num1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">num2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">num</span> <span class="o">&lt;=</span> <span class="mi">50</span><span class="p">;</span> <span class="nx">num</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">num</span><span class="o">%</span><span class="mi">2</span><span class="o">===</span><span class="mi">1</span><span class="p">){</span>
        <span class="nx">num1</span><span class="o">+=</span><span class="nx">num</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">현재 홀수의 합:</span><span class="dl">'</span><span class="o">+</span><span class="nx">num1</span><span class="o">+</span><span class="dl">'</span><span class="se">\n</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">num2</span><span class="o">+=</span><span class="nx">num</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">현재 짝수의 합:</span><span class="dl">'</span><span class="o">+</span><span class="nx">num2</span><span class="o">+</span><span class="dl">'</span><span class="se">\n</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">총 홀수의 합:</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">num1</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">총 짝수의 합:</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">num2</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">총 합:</span><span class="dl">'</span> <span class="o">+</span> <span class="p">(</span><span class="nx">num1</span> <span class="o">+</span> <span class="nx">num2</span><span class="p">));</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="34-switch">3.4 switch</h2>

<ul>
  <li>형태: switch (표현식) {
  case 표현식: 문장 리스트 opt
  default: 문장 리스트 opt
};</li>
  <li>switch 표현식의 평가 값과 일치하는 case 문 수행</li>
  <li>break 사용</li>
  <li>일치하는 case가 없으면 default 수행</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>OR(</td>
          <td> </td>
          <td>) 형태</td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="rouge-code"><pre><span class="kd">var</span> <span class="nx">exp</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">switch</span><span class="p">(</span><span class="nx">exp</span><span class="p">){</span>
    <span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
    <span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
<span class="p">};</span>
<span class="c1">// 100</span>
<span class="c1">// 200</span>

<span class="c1">// 1. switch(exp)에서 exp를 평가하여 값을 구하고 구한 값에 일치하는 case문을 수행</span>
<span class="c1">// 2. exp값이 1이므로 case 1:을 수행</span>
<span class="c1">// ** 주의**</span>
<span class="c1">// 3. case 1 아래의 모든 문장을 수행하므로 200이 출력된다.</span>
<span class="c1">// 4. 이를 방지하려면 break를 작성해야 한다.</span>

<span class="kd">var</span> <span class="nx">exp</span> <span class="o">=</span> <span class="mi">7</span><span class="p">,</span> <span class="nx">value</span><span class="p">;</span>
<span class="k">switch</span><span class="p">(</span><span class="nx">exp</span><span class="p">){</span>
    <span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
        <span class="nx">value</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
    <span class="nl">default</span><span class="p">:</span>
        <span class="nx">value</span> <span class="o">=</span> <span class="mi">700</span><span class="p">;</span>
    <span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
        <span class="nx">value</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
<span class="p">};</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
<span class="c1">// 200</span>

<span class="c1">// 1. switch(exp)의 값이 7이므로 일치하는 case가 없으니 default: 코드를 실행</span>
<span class="c1">// 2. case 2: 도 실행(break문이 없으므로)</span>

<span class="c1">// OR(||) 형태</span>
<span class="kd">var</span> <span class="nx">exp</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="k">switch</span><span class="p">(</span><span class="nx">exp</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
    <span class="k">case</span> <span class="mi">3</span><span class="p">:</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
<span class="p">};</span>
<span class="c1">// 100</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="35-try-catch-throw">3.5 try-catch, throw</h2>

<p>try-catch</p>
<ul>
  <li>try 문에서 예외 발생을 인식</li>
  <li>예외가 발생하면 catch 블록 실행</li>
  <li>finally 블록은 예외 발생과 관게없이 실행</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="kd">var</span> <span class="nx">value</span><span class="p">;</span>
<span class="k">try</span> <span class="p">{</span>
    <span class="nx">value</span> <span class="o">=</span> <span class="nx">ball</span><span class="p">;</span>
<span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">catch 실행</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">finally 실행</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span> <span class="c1">// catch 실행 / finally 실행</span>

<span class="c1">// 1. try블록에서 ball을 value에 할당할 때 ball 변수가 없으므로 에러 발생</span>
<span class="c1">// 2. 에러가 발생하면 catch(error) 블록 실행, 파라미터 error에 JS의 Error 오브젝트 설정</span>
<span class="c1">// 3. error는 식별자로 임의의 이름 사용 가능</span>
<span class="c1">// 4. 에러가 발생할 가능성이 있으면 반드시 try-catch를 사용해야 한다.</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>서버에서 데이터를 가져올때는 반드시 try-catch문을 사용해야 한다.</p>

<p>throw</p>

<ul>
  <li>명시적으로 예외를 발생시킴</li>
  <li>예외가 발생하면 catch 실행</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="k">try</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">예외 발생시킴</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">// 1. throw 표현식에 Error 오브젝트 작성, Error()의 파라미터에 메시지 작성 -&gt; 오브젝트의 message에 메시지가 설정된다.</span>
<span class="c1">// 2. catch(error)의 error에 Error 오브젝트가 설정된다.</span>
<span class="c1">// 3. error.message로 작성한 메시지 사용</span>
<span class="c1">// 실행결과 -&gt; 예외 발생시킴</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="36-strict-모드">3.6 strict 모드</h2>

<ul>
  <li>엄격하게 JS 문법 사용의 선언</li>
  <li>작성한 위치부터 적용</li>
  <li>ES5부터 지원</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="dl">"</span><span class="s2">use strict</span><span class="dl">"</span>
<span class="k">try</span> <span class="p">{</span>
    <span class="nx">book</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">변수 선언하지 않음</span><span class="dl">"</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">book</span><span class="p">);</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">// 1. 변수 키워드를 작성하지 않은 형태</span>
<span class="c1">// 2. book 변수에 에러 발생</span>
<span class="c1">// 3. error.message에 에러 메시지로 설정된다.</span>
<span class="c1">// 4. 코딩실수 예방 -&gt; use strict 선언 필수?</span>
<span class="c1">// 실행결과 -&gt; book is not defined</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET
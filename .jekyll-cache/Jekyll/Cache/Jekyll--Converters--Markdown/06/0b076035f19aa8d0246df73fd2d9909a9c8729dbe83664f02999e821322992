I"cG<h2 id="vuex-기본구조">vuex 기본구조</h2>

<p><img src="/assets/images/vue/vue-study/vuex1_1.png" alt="vuex" /></p>

<h2 id="vuex-흐름">vuex 흐름</h2>

<ol>
  <li>store 생성 : 통합 저장소</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vuex</span><span class="p">.</span><span class="nx">Store</span><span class="p">({</span>
  <span class="na">state</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">count</span><span class="p">:</span> <span class="mi">0</span>
  <span class="p">},</span>
  <span class="na">getters</span><span class="p">:</span> <span class="p">{},</span>
  <span class="na">actions</span><span class="p">:</span> <span class="p">{},</span>
  <span class="na">mutations</span><span class="p">:</span> <span class="p">{}</span>
<span class="p">})</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ol>
  <li>Vuex를 Vue 컴포넌트에 가져오기</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="c1">// 'Counter' 컴포넌트를 만듭니다</span>
<span class="kd">const</span> <span class="nx">Counter</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">template</span><span class="p">:</span> <span class="s2">`&lt;div&gt;8&lt;/div&gt;`</span><span class="p">,</span>
  <span class="na">computed</span><span class="p">:</span> <span class="p">{</span>
    <span class="nx">count</span> <span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">store</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ol>
  <li>getters</li>
</ol>

<p>Vuex는 <code class="language-plaintext highlighter-rouge">getters</code>를 store 안에 정의하는것을 허락
<code class="language-plaintext highlighter-rouge">getters</code>는 저장소 <code class="language-plaintext highlighter-rouge">state</code>의 값을 기반으로 <code class="language-plaintext highlighter-rouge">state</code>의를 계산해야 할 때 사용
<code class="language-plaintext highlighter-rouge">computed</code> 속성처럼 getter의 결과는 종속성(dependencies)에 따라 캐쉬되고, 일부 종속성이 변경된 경우에만 다시 재계산</p>

<p>속성유형 접근 방법</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vuex</span><span class="p">.</span><span class="nx">Store</span><span class="p">({</span>
  <span class="na">state</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">todos</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">text</span><span class="p">:</span> <span class="dl">'</span><span class="s1">...</span><span class="dl">'</span><span class="p">,</span> <span class="na">done</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>
      <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">text</span><span class="p">:</span> <span class="dl">'</span><span class="s1">...</span><span class="dl">'</span><span class="p">,</span> <span class="na">done</span><span class="p">:</span> <span class="kc">false</span> <span class="p">}</span>
    <span class="p">]</span>
  <span class="p">},</span>
  <span class="na">getters</span><span class="p">:</span> <span class="p">{</span>
    <span class="c1">// 첫 번째 전달 인자로 상태(state)를 받음</span>
    <span class="na">doneTodos</span><span class="p">:</span> <span class="nx">state</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">state</span><span class="p">.</span><span class="nx">todos</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">todo</span> <span class="o">=&gt;</span> <span class="nx">todo</span><span class="p">.</span><span class="nx">done</span><span class="p">)</span>
    <span class="p">},</span>
    <span class="c1">// state와 다른 getter도 받을 수 있습니다.</span>
    <span class="na">doneTodosCount</span><span class="p">:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">getters</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">getters</span><span class="p">.</span><span class="nx">doneTodos</span><span class="p">.</span><span class="nx">length</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">})</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>메소드 유형 접근 방법<br />
함수를 반환하여  getters 에 전달인자로 전달가능<br />
저장소의 배열을 검색할때 특히 유용, 메서드를 통해 접근하는 getter는 호출 할 때마다 실행되며 결과가 캐시되지 않는다는 것을 유의하기</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="nx">getters</span><span class="p">:</span> <span class="p">{</span>
  <span class="c1">// ...</span>
  <span class="nl">getTodoById</span><span class="p">:</span> <span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">state</span><span class="p">.</span><span class="nx">todos</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">todo</span> <span class="o">=&gt;</span> <span class="nx">todo</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">id</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ol>
  <li>map Helper</li>
</ol>

<p>헬퍼 함수에는 <code class="language-plaintext highlighter-rouge">mapState()</code>,  <code class="language-plaintext highlighter-rouge">mapGetters()</code>,  <code class="language-plaintext highlighter-rouge">mapMutations()</code>, <code class="language-plaintext highlighter-rouge">mapActions()</code> 가 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="c1">// 독립 실행 형 빌드에서 헬퍼가 Vuex.mapState로 노출됩니다.</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">mapState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">vuex</span><span class="dl">'</span>

<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="c1">// ...</span>
  <span class="na">computed</span><span class="p">:</span> <span class="nx">mapState</span><span class="p">({</span>
    <span class="c1">// 화살표 함수는 코드를 매우 간결하게 만들어 줍니다!</span>
    <span class="na">count</span><span class="p">:</span> <span class="nx">state</span> <span class="o">=&gt;</span> <span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="p">,</span>

    <span class="c1">// 문자열 값 'count'를 전달하는 것은 `state =&gt; state.count`와 같습니다.</span>
    <span class="na">countAlias</span><span class="p">:</span> <span class="dl">'</span><span class="s1">count</span><span class="dl">'</span><span class="p">,</span>

    <span class="c1">// `this`를 사용하여 로컬 상태에 액세스하려면 일반적인 함수를 사용해야합니다</span>
    <span class="nx">countPlusLocalState</span> <span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">state</span><span class="p">.</span><span class="nx">count</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">localCount</span>
    <span class="p">},</span>
    
    <span class="c1">// 매핑 된 계산된 속성의 이름이 상태 하위 트리 이름과 같을 때 문자열 배열을 ```mapState```에 전달</span>
    <span class="dl">'</span><span class="s1">count</span><span class="dl">'</span>
  <span class="p">})</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="c1">// 저장소 getter를 로컬 computed속성에 매핑합니다.</span>
<span class="nx">getter를</span> <span class="nx">다른이름으로</span> <span class="nx">매핑하려면</span> <span class="nx">객체를</span> <span class="nx">사용하면</span> <span class="nx">됩니다</span><span class="p">.</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">mapGetters</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">vuex</span><span class="dl">'</span>

<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="c1">// ...</span>
  <span class="na">computed</span><span class="p">:</span> <span class="p">{</span>
    <span class="c1">// getter를 객체 전개 연산자(Object Spread Operator)로 계산하여 추가합니다.</span>
    <span class="p">...</span><span class="nx">mapGetters</span><span class="p">([</span>
      <span class="dl">'</span><span class="s1">doneTodosCount</span><span class="dl">'</span><span class="p">,</span>
      <span class="dl">'</span><span class="s1">anotherGetter</span><span class="dl">'</span><span class="p">,</span>
      <span class="c1">// ...</span>
    <span class="p">])</span>
  <span class="p">}</span>
<span class="p">}</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<ol>
  <li>mutations</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vuex</span><span class="p">.</span><span class="nx">Store</span><span class="p">({</span>
  <span class="na">state</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">count</span><span class="p">:</span> <span class="mi">1</span>
  <span class="p">},</span>
  <span class="na">mutations</span><span class="p">:</span> <span class="p">{</span>
    <span class="nx">increment</span> <span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 상태 변이 </span>
      <span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="o">++</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">})</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">commit()</code><br />
<code class="language-plaintext highlighter-rouge">store.commit()</code>에 추가 전달인자를 사용해서 mutations를 호출(동기적 async여야 함)
<a href="https://tofusand-dev.tistory.com/7">참고페이지</a></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">store</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="dl">'</span><span class="s1">increment</span><span class="dl">'</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ol>
  <li>actions</li>
</ol>

<p>Actions는 Mutation과 유사<br />
상태를 변화시키는 대신 Actions에서 Mutations에 대한 commit()(Mutation내부의 메서드를 실행)을 하는것과,<br />
작업에 임의의 비동기 작업이 포함될 수 있다는 점이 다름</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vuex</span><span class="p">.</span><span class="nx">Store</span><span class="p">({</span>
  <span class="p">...</span>
  <span class="na">actions</span><span class="p">:</span> <span class="p">{</span>
    <span class="nx">increment</span> <span class="p">(</span><span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">context</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="dl">'</span><span class="s1">increment</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">})</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">dispatch()</code><br />
<code class="language-plaintext highlighter-rouge">store.commit()</code>은 동기적이지만 <code class="language-plaintext highlighter-rouge">store.dispatch()</code>는 비동기작업도 가능</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre><span class="p">...</span>
<span class="nx">actions</span><span class="p">:</span> <span class="p">{</span>
    <span class="c1">// 객체와 함께 디스패치</span>
    <span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">({</span>
      <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">incrementAsync</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">amount</span><span class="p">:</span> <span class="mi">10</span>
    <span class="p">})</span>
    
    <span class="c1">// 내부에 또다른 액션을 만들 수 있음</span>
    <span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="dl">'</span><span class="s1">actionA</span><span class="dl">'</span><span class="p">).</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">commit</span><span class="p">(</span><span class="dl">'</span><span class="s1">someOtherMutation</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">})</span>
    
    <span class="c1">// async/await 사용 가능</span>
    <span class="k">async</span> <span class="nx">actionB</span><span class="p">({</span><span class="nx">commit</span><span class="p">){</span>
        <span class="nx">commit</span><span class="p">(</span><span class="dl">'</span><span class="s1">gotData</span><span class="dl">'</span><span class="p">,</span> <span class="k">await</span> <span class="nx">getData</span><span class="p">())</span>
    <span class="p">},</span>
    <span class="k">async</span> <span class="nx">actionC</span><span class="p">({</span> <span class="nx">dispatch</span><span class="p">,</span> <span class="nx">commit</span> <span class="p">})</span> <span class="p">{</span>
        <span class="k">await</span> <span class="nx">dispatch</span><span class="p">(</span><span class="dl">'</span><span class="s1">actionA</span><span class="dl">'</span><span class="p">)</span>   <span class="c1">// actionA가 끝나기를 기다립니다.</span>
        <span class="nx">commit</span><span class="p">(</span><span class="dl">'</span><span class="s1">gotOtherData</span><span class="dl">'</span><span class="p">,</span> <span class="k">await</span> <span class="nx">getOtherData</span><span class="p">())</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET
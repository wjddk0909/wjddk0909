I"V.<h2 id="101-vuex-설치-및-등록">10.1 Vuex 설치 및 등록</h2>

<p>Vuex 설치하기
<a href="https://vuex.vuejs.org/installation.html#direct-download-cdn">vuejs 공식 문서</a></p>

<p>NPM</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>// npm <span class="nb">install </span>vuex@next <span class="nt">--save</span> // 공식문서에 써있는 걸로 설치하면 Vue3를 기준으로 설치 되므로 코어 라이브러리는 버전을 명시해줘야함
npm i vuex@3.4.0
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Yarn</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>// yarn add vuex@next <span class="nt">--save</span>
yarn add vuex@3.4.0 // yarn을 사용하면 yarn으로 설치해야 함
</pre></td></tr></tbody></table></code></pre></div></div>

<p>components 폴더랑 같은 레벨에 stor 폴더 만들기</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-lv2/commit/5bc72b82f63929c142affcd6997be802284b70d6">diff check</a></p>
</blockquote>

<h2 id="102-state와-getters-소개">10.2 state와 getters 소개</h2>

<p>Vuexa 기술 요소</p>
<ul>
  <li>state : 여러 컴포넌트에 공유되는 데이터 <code class="language-plaintext highlighter-rouge">data</code></li>
  <li>getters : 연산된 state 값을 접근하는 속성 <code class="language-plaintext highlighter-rouge">computed</code></li>
  <li>mutations : state 값을 변경하는 이벤트 로직, 메서드 <code class="language-plaintext highlighter-rouge">methods</code></li>
  <li>actions : 비동기 처리 로직을 선언하는 메서드 <code class="language-plaintext highlighter-rouge">async methods</code></li>
</ul>

<p>State란?</p>
<ul>
  <li>여러 컴포넌트 간에 공유할 데이터 - <code class="language-plaintext highlighter-rouge">상태</code></li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="c1">// vue</span>
<span class="nx">data</span><span class="p">:</span> <span class="p">{</span>
    <span class="nl">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Hello Vue.js</span><span class="dl">'</span>
<span class="p">}</span>

<span class="c1">// vuex</span>
<span class="nl">state</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Hello vue.js
}
</span></pre></td></tr></tbody></table></code></pre></div></div>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="c">&lt;!-- Vue --&gt;</span>
<span class="nt">&lt;p&gt;&lt;/p&gt;</span>

<span class="c">&lt;!-- Vuex --&gt;</span>
<span class="nt">&lt;p&gt;&lt;/p&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>getters란?</p>
<ul>
  <li>state 값을 접근하는 속성이자 <code class="language-plaintext highlighter-rouge">computed()</code> 처럼 미리 연산된 값을 접근하는 속성</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="c1">// store.js</span>
<span class="nx">state</span><span class="p">:</span> <span class="p">{</span>
    <span class="nl">num</span><span class="p">:</span> <span class="mi">10</span>
<span class="p">},</span>
<span class="nx">getters</span><span class="p">:</span> <span class="p">{</span>
    <span class="nx">getNumber</span><span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">state</span><span class="p">.</span><span class="nx">num</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="nx">doubleNumber</span><span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">state</span><span class="p">.</span><span class="nx">num</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>
     <span class="nt">&lt;h2&gt;</span> {{ user.name.first | uppercase }}<span class="nt">&lt;/h2&gt;</span>
     <span class="nt">&lt;p&gt;</span> {{ user.email }}<span class="nt">&lt;/p&gt;</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="103-리팩토링-state-속성-적용">10.3 [리팩토링] state 속성 적용</h2>

<p>store.js</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">const storage</code> 변수를 설정하고 <code class="language-plaintext highlighter-rouge">fetch()</code> 함수에 기존 App.vue에서 <code class="language-plaintext highlighter-rouge">created</code>로 가져오던 <code class="language-plaintext highlighter-rouge">localStorage</code>에 담긴 배열을 뿌려주는 로직을 옮기기</li>
  <li><code class="language-plaintext highlighter-rouge">state</code>에서 <code class="language-plaintext highlighter-rouge">todoItems: storage.fetch()</code>로 todoItems에 storage변수의 fetch() 함수 연결</li>
</ul>

<p>TodoList.vue
<code class="language-plaintext highlighter-rouge">v-for="(todoItem, index) in propsdata"</code> propsdata에서 반복문을 돌리던 것을 <code class="language-plaintext highlighter-rouge">v-for="(todoItem, index) in this.$store.state.todoItems</code>로 수정</p>

<blockquote>
  <p><a href="https://github.com/wjddk0909/vue-lv2/commit/91e220b6598930eedb86ccb238517108b1c43578">diff check</a></p>
</blockquote>

<h2 id="104-mutations와-commit-형식-소개">10.4 mutations와 commit() 형식 소개</h2>

<p>mutations란?</p>
<ul>
  <li>state의 값을 변경할 수 있는 유일한 방법이자 메서드</li>
  <li>뮤테이션은 <code class="language-plaintext highlighter-rouge">commit()</code> 으로 동작시킨다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="c1">// store.js</span>
<span class="nx">state</span><span class="p">:</span> <span class="p">{</span> <span class="nl">num</span><span class="p">:</span> <span class="mi">10</span> <span class="p">},</span>
<span class="nx">mutations</span><span class="p">:</span> <span class="p">{</span>
    <span class="nx">printNumbers</span><span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">state</span><span class="p">.</span><span class="nx">num</span>
    <span class="p">},</span>
    <span class="nx">sumNumbers</span><span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">anotherNum</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">state</span><span class="p">.</span><span class="nx">num</span> <span class="o">+</span> <span class="nx">anotherNum</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="dl">'</span><span class="s1">printNumbers</span><span class="dl">'</span><span class="p">);</span>
<span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="dl">'</span><span class="s1">sumNumbers</span><span class="dl">'</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>mutations의 commit() 형식</p>
<ul>
  <li>state를 변경하기 위해 mutations를 동작시킬 때 인자(payload)를 전달할 수 있음</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="c1">// store.js</span>
<span class="nx">state</span><span class="p">:</span> <span class="p">{</span> <span class="nl">storeNum</span><span class="p">:</span> <span class="mi">10</span> <span class="p">},</span>
<span class="nx">mutations</span><span class="p">:</span> <span class="p">{</span>
    <span class="nx">modifyState</span><span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">payload</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">payload</span><span class="p">.</span><span class="nx">str</span><span class="p">)</span>
        <span class="k">return</span> <span class="nx">state</span><span class="p">.</span><span class="nx">storeNum</span> <span class="o">+=</span> <span class="nx">payload</span><span class="p">.</span><span class="nx">num</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="dl">'</span><span class="s1">modifyState</span><span class="dl">'</span> <span class="p">{</span>
    <span class="nl">str</span><span class="p">:</span> <span class="dl">'</span><span class="s1">passed from payload</span><span class="dl">'</span><span class="p">,</span>
    <span class="nx">num</span><span class="p">:</span> <span class="mi">20</span>
<span class="p">});</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>두번째 인자로 값을 넘길 수 있음, 여러개를 보낼때는 객체형태로 보내면 된다.</p>

<h2 id="105-리팩토링퀴즈-mutations-적용-및-퀴즈-안내">10.5 [리팩토링&amp;퀴즈] mutations 적용 및 퀴즈 안내</h2>

:ET